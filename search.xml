<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android系列之Android Studio 搭建</title>
    <url>/2018/05/06/bcb6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><blockquote>
<p>一切都是最好的安排和<code>wuli秀</code>一起学习Android，记录学习的一系列过程。<br>希望彼此都有进步~`let’s go ~`😘</p>
</blockquote>
<a id="more"></a>

<h2 id="收集到的一些参考资料"><a href="#收集到的一些参考资料" class="headerlink" title="收集到的一些参考资料"></a>收集到的一些参考资料</h2><blockquote>
<p>这个地方我用来存放一些收集到的一些参考资料；</p>
</blockquote>
<ul>
<li>官方很重的入门资料(是你了没错😆😆😆): <a href="https://developer.android.google.cn/guide/"><code>https://developer.android.google.cn/guide/</code></a></li>
<li>developers中文官网(看新闻的咯) : <a href="https://developers.google.cn/" title="地址"><code>https://developers.google.cn/</code></a></li>
<li>开发文档:  <a href="https://www.diycode.cc/wiki/androidbook"><code>https://www.diycode.cc/wiki/androidbook</code></a></li>
<li>开发文档(胡凯): <a href="http://hukai.me/android-training-course-in-chinese/index.html#"><code>http://hukai.me/android-training-course-in-chinese/index.html#</code></a></li>
<li><a href="http://www.runoob.com/w3cnote/android-tutorial-android-studio.html"><code>http://www.runoob.com/w3cnote/android-tutorial-android-studio.html</code></a></li>
<li>极客学院资源: <a href="http://www.jikexueyuan.com/resources/"><code>http://www.jikexueyuan.com/resources/</code></a></li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li>下载安装包(mac): <code>https://developer.android.google.cn/studio/</code></li>
<li>查看JDK 版本: <code>java -version</code></li>
</ul>
<h2 id="第一行代码-Android-第2版"><a href="#第一行代码-Android-第2版" class="headerlink" title="第一行代码+Android+第2版"></a>第一行代码+Android+第2版</h2><embed src="https://gitee.com/alexlin/alexSource/raw/master/book/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81+Android+%E7%AC%AC2%E7%89%88.pdf" width="100%" height="950" type="application/pdf" align=center >


]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
        <tag>Android Studio</tag>
      </tags>
  </entry>
  <entry>
    <title>Android系列之各种疑难杂症处理</title>
    <url>/2018/05/06/7aeb.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><blockquote>
<p>各种疑难杂症登记和解决方法记录，小姐姐可以看O(∩_∩)O哈哈~</p>
</blockquote>
<a id="more"></a>

<h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1."></a>问题1.</h2><p><code>gradle project sync failed.Basic functionality(e.g.editing,debugging) will not work properly.</code></p>
<p><img src="https://gitee.com/alexlin/alexSource/raw/master/images/gradleFail.png" alt="gradle Fail"></p>
<ul>
<li><strong>解决方法:</strong><br>到项目下找到<code>gradle\wrapper\gradle-wrapper.properties</code> 然后下载里面<code>distributionUrl</code>指定内容;</li>
</ul>
<pre><code>#Sun May 06 22:16:52 CST 2018
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-all.zip</code></pre>
<p>然后把 <code>distributionUrl=</code> 换成下载后的路径;<br>比如我的是这样:</p>
<pre><code>distributionUrl=file:///Users/alex/.gradle/wrapper/dists/gradle-4.4-all/9br9xq1tocpiv8o6njlyu5op1/gradle-4.4-all.zip</code></pre>
<p>然后再重试一下。有可能还有提醒<code>Could not download protobuf-java.jar (com.google.protobuf:protob</code> 这种错误，我试了好久好久才能下载完，怪家里的网络太糟糕😰~<br><strong>特别感谢<code>wili秀</code>一直的鼓励❤️</strong></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP8266系列-12F引脚说明</title>
    <url>/2017/08/06/53ce.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ESP8266-12F-模组图"><a href="#ESP8266-12F-模组图" class="headerlink" title="ESP8266-12F 模组图"></a>ESP8266-12F 模组图</h2><p><img src="/images/pasted-14.png" alt="硬件模组图"><br><img src="/images/pasted-13.png" alt="esp12f管脚定义图"></p>
<a id="more"></a>
<h2 id="引脚说明"><a href="#引脚说明" class="headerlink" title="引脚说明"></a>引脚说明</h2><table>
<thead>
<tr>
<th align="center">引脚编号</th>
<th align="left">引脚名</th>
<th align="left">引脚描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="left">RST</td>
<td align="left">复位模组</td>
</tr>
<tr>
<td align="center">2</td>
<td align="left">ADC</td>
<td align="left">A/D 转换结果。输入电压范围 0～1V，取值范围：0～1024</td>
</tr>
<tr>
<td align="center">3</td>
<td align="left">EN</td>
<td align="left">芯片使能端，高电平有效</td>
</tr>
<tr>
<td align="center">4</td>
<td align="left">IO16</td>
<td align="left">GPIO16; 接到 RST 管脚时可做 deep sleep 的唤醒。</td>
</tr>
<tr>
<td align="center">5</td>
<td align="left">IO14</td>
<td align="left">GPIO14; HSPI_CLK</td>
</tr>
<tr>
<td align="center">6</td>
<td align="left">IO12</td>
<td align="left">GPIO12; HSPI_MISO</td>
</tr>
<tr>
<td align="center">7</td>
<td align="left">IO13</td>
<td align="left">GPIO13; HSPI_MOSI; UART0_CTS</td>
</tr>
<tr>
<td align="center">8</td>
<td align="left">VCC</td>
<td align="left">3.3V 供电</td>
</tr>
<tr>
<td align="center">9</td>
<td align="left">CS0</td>
<td align="left">片选</td>
</tr>
<tr>
<td align="center">10</td>
<td align="left">MISO</td>
<td align="left">从机输出主机输入</td>
</tr>
<tr>
<td align="center">11</td>
<td align="left">IO9</td>
<td align="left">GPIO9</td>
</tr>
<tr>
<td align="center">12</td>
<td align="left">IO10</td>
<td align="left">GBIO10</td>
</tr>
<tr>
<td align="center">13</td>
<td align="left">MOSI</td>
<td align="left">主机输出从机输入</td>
</tr>
<tr>
<td align="center">14</td>
<td align="left">SCLK</td>
<td align="left">时钟</td>
</tr>
<tr>
<td align="center">15</td>
<td align="left">GND</td>
<td align="left">GND</td>
</tr>
<tr>
<td align="center">16</td>
<td align="left">IO15</td>
<td align="left">GPIO15; MTDO; HSPICS; UART0_RTS</td>
</tr>
<tr>
<td align="center">17</td>
<td align="left">IO2</td>
<td align="left">GPIO2; UART1_TXD</td>
</tr>
<tr>
<td align="center">18</td>
<td align="left">IO0</td>
<td align="left">GPIO0</td>
</tr>
<tr>
<td align="center">19</td>
<td align="left">IO4</td>
<td align="left">GPIO4</td>
</tr>
<tr>
<td align="center">20</td>
<td align="left">IO5</td>
<td align="left">GPIO5</td>
</tr>
<tr>
<td align="center">21</td>
<td align="left">RXD</td>
<td align="left">UART0_RXD; GPIO3</td>
</tr>
<tr>
<td align="center">22</td>
<td align="left">TXD</td>
<td align="left">UART0_TXD; GPIO1</td>
</tr>
</tbody></table>
<h2 id="接口说明"><a href="#接口说明" class="headerlink" title="接口说明"></a>接口说明</h2><table>
<thead>
<tr>
<th align="center">引脚名</th>
<th align="left">引脚</th>
<th align="left">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">HSPI 接</td>
<td align="left">IO12(MISO),IO13(MOSI), IO14(CLK),IO15(CS)</td>
<td align="left">可外接 4SPI Flash、显示屏和 MCU 等。</td>
</tr>
<tr>
<td align="center">PWM  接</td>
<td align="left">IO12(R), IO15(G),IO13(B)</td>
<td align="left">demo 中提供 4 路 PWM (用户可自行扩展至 8 路)，可用来控制彩灯，蜂鸣器，继电器及电机等。</td>
</tr>
<tr>
<td align="center">IR   接</td>
<td align="left">IO14(IR_T), IO5(IR_R)</td>
<td align="left">IR Remote Control4 接口由软件实现，接口使用 NEC 编码及调制解调，采用 38KHz 的调制载波。</td>
</tr>
<tr>
<td align="center">ADC  接</td>
<td align="left">TOUT</td>
<td align="left">可于检测 VDD3P3 (Pin3,Pin4) 电源电压和 TOUT (Pin6)的输入电压(二者不可同时使用)。可用于传感器等应用。</td>
</tr>
<tr>
<td align="center">I2C  接</td>
<td align="left">IO14(SCL), IO2(SDA)</td>
<td align="left">可外接传感器及显示屏等</td>
</tr>
<tr>
<td align="center">UART 接</td>
<td align="left">UART0: TXD(U0TXD),RXD(U0RXD), IO15(RTS),IO13(CTS),UART1: IO2(TXD)</td>
<td align="left">可外接 UART 接口的设备。下载：U0TXD+U0RXD 或者 GPIO2+U0RXD通信(UART0)：U0TXD，U0RXD，MTDO(U0RTS)，MTCK(U0CTS) Debug: UART1_TXD(GPIO2)可作为 debug 信息的打印。</td>
</tr>
<tr>
<td align="center">-</td>
<td align="left">-</td>
<td align="left">UART0 在 ESP8266EX 上电默认会输出一些打印信息。对此敏感的应用，可以使用 UART 的内部引脚交换功能，在初始化的时候，将U0TXD，U0RXD 分别与 U0RTS，U0CTS 交换。硬件上将 MTDO MTCK 连接到对应的 外部 MCU 的串进行通信。</td>
</tr>
<tr>
<td align="center">I2S 接</td>
<td align="left">I2S 输入：IO12 (I2SI_DATA) ;IO13 (I2SI_BCK );IO14 (I2SI_WS);</td>
<td align="left">主要于音频采集、处理和传输。</td>
</tr>
<tr>
<td align="center">I2S 接</td>
<td align="left">I2S 输出：IO15 (I2SO_BCK );IO3 (I2SO_DATA);IO2 (I2SO_WS ).</td>
<td align="left">主要于音频采集、处理和传输。</td>
</tr>
</tbody></table>
<h2 id="ESP8266-SPI-说明"><a href="#ESP8266-SPI-说明" class="headerlink" title="ESP8266 SPI 说明"></a>ESP8266 SPI 说明</h2><p>ESP8266 有两组 SPI 通信模块命名分别为 SPI 与 HSPI。</p>
<ul>
<li>SPI 通常专于从外部 Flash 读取 CPU 程序代码。</li>
<li>HSPI 则用于用户和 SPI 设备的通信操作。</li>
</ul>
]]></content>
      <categories>
        <category>esp8266</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP8266系列-各个模组型号模组对比</title>
    <url>/2017/08/04/9fbf.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="烧录Flash-地址说明"><a href="#烧录Flash-地址说明" class="headerlink" title="烧录Flash 地址说明"></a>烧录Flash 地址说明</h2><table>
<thead>
<tr>
<th align="center">文件名称</th>
<th align="center">8Mbit烧录地址</th>
<th align="center">16Mbit烧录地址</th>
<th align="center">32Mbit烧录地址</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">boot.bin</td>
<td align="center">0x00000</td>
<td align="center">0x00000</td>
<td align="center">0x00000</td>
<td align="left">由乐鑫在 SDK 中提供，建议一直使用最新版本</td>
</tr>
<tr>
<td align="center">user1.bin</td>
<td align="center">0x01000</td>
<td align="center">0x01000</td>
<td align="center">0x01000</td>
<td align="left">主程序，由代码编译生成</td>
</tr>
<tr>
<td align="center">user2.bin</td>
<td align="center">0x81000</td>
<td align="center">0x81000</td>
<td align="center">0x81000</td>
<td align="left">主程序，由代码编译生成</td>
</tr>
<tr>
<td align="center">esp_init_data_default.bin</td>
<td align="center">0xFC000</td>
<td align="center">0x1FC000</td>
<td align="center">0x3FC000</td>
<td align="left">由乐鑫在 SDK 中提供</td>
</tr>
<tr>
<td align="center">blank.bin</td>
<td align="center">0xFE000</td>
<td align="center">0x1FE000</td>
<td align="center">0x3FE000</td>
<td align="left">由乐鑫在 SDK 中提供</td>
</tr>
</tbody></table>
<a id="more"></a>

<h2 id="硬件连接"><a href="#硬件连接" class="headerlink" title="硬件连接"></a>硬件连接</h2><p>ESP8266有运行模式、下载模式、测试模式的区别，进入下载模式可参考以下配置：</p>
<p>|模式|CH_PD(EN)| RST |GPIO15|GPIO0|GPIO2|TXD0|<br>|:—:|:—:|<br>|UART 下载模式|高|高|低|低|高|高|<br>|Flash运行模式|高|高|低|高|高|高|<br>|Chip 测试模式|- |- |- | -| -|低|</p>
<h2 id="模组对比"><a href="#模组对比" class="headerlink" title="模组对比"></a>模组对比</h2><p>![模组对比][1]<br>[1]: <a href="http://upload-images.jianshu.io/upload_images/1736256-9acf4a0574852890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240">http://upload-images.jianshu.io/upload_images/1736256-9acf4a0574852890.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240</a></p>
]]></content>
      <categories>
        <category>esp8266</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
      </tags>
  </entry>
  <entry>
    <title>Android系列之工具adb</title>
    <url>/2018/10/11/b305.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h2><hr>
<blockquote>
<p>首先说明一下，以下的内容都是我从网上找来的，仅仅作为笔记记录。</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><hr>
<ul>
<li><a href="https://github.com/mzlogin/awesome-adb">https://github.com/mzlogin/awesome-adb</a></li>
</ul>
<a id="more"></a>

<h2 id="ADB"><a href="#ADB" class="headerlink" title="ADB"></a>ADB</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h3 id="命令语法"><a href="#命令语法" class="headerlink" title="命令语法"></a>命令语法</h3><p>adb 命令的基本语法如下：</p>
<pre><code>adb [-d|-e|-s &lt;serialNumber&gt;] &lt;command&gt;</code></pre>
<p>如果只有一个设备/模拟器连接时，可以省略掉 [-d|-e|-s <serialNumber>] 这一部分，直接使用 adb <command>。</p>
<h3 id="为命令指定目标设备"><a href="#为命令指定目标设备" class="headerlink" title="为命令指定目标设备"></a>为命令指定目标设备</h3><p>如果有多个设备/模拟器连接，则需要为命令指定目标设备。<br>参数    含义</p>
<ul>
<li>-d    指定当前唯一通过 USB 连接的 Android 设备为命令目标</li>
<li>-e    指定当前唯一运行的模拟器为命令目标</li>
<li>-s <serialNumber>    指定相应 serialNumber 号的设备/模拟器为命令目标</li>
</ul>
<p>在多个设备/模拟器连接的情况下较常用的是 -s <serialNumber> 参数，serialNumber 可以通过 adb devices 命令获取。如：</p>
<pre class=" language-sh"><code class="language-sh">$ adb devices

List of devices attached
cf264b8f    device
emulator-5554    device
10.129.164.6:5555    device</code></pre>
<p>输出里的 <code>cf264b8f</code>、<code>emulator-5554</code> 和 <code>10.129.164.6:5555</code> 即为 <strong>serialNumber</strong>。</p>
<p>比如这时想指定 <code>cf264b8f</code> 这个设备来运行 <code>adb</code> 命令获取屏幕分辨率：</p>
<pre><code>adb -s cf264b8f shell wm size</code></pre>
<p>又如想给 <code>10.129.164.6:5555</code> 这个设备安装应用（这种形式的 serialNumber 格式为 <code>&lt;IP&gt;:&lt;Port&gt;</code>，一般为无线连接的设备或 Genymotion 等第三方 Android 模拟器）：</p>
<pre><code>adb -s 10.129.164.6:5555 install test.apk</code></pre>
<h3 id="安装APK"><a href="#安装APK" class="headerlink" title="安装APK"></a>安装APK</h3><p><strong>命令格式：</strong></p>
<pre><code>adb install [-lrtsdg] &lt;path_to_apk&gt;</code></pre>
<p><strong>参数:</strong></p>
<p><code>adb install</code> 后面可以跟一些可选参数来控制安装 APK 的行为，可用参数及含义如下：</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">-l</td>
<td align="left">将应用安装到保护目录 <code>/mnt/asec</code></td>
</tr>
<tr>
<td align="center">-r</td>
<td align="left">允许覆盖安装</td>
</tr>
<tr>
<td align="center">-t</td>
<td align="left">允许安装 <code>AndroidManifest.xml</code> 里 <code>application</code> 指定 <code>android:testOnly=&quot;true&quot;</code> 的应用</td>
</tr>
<tr>
<td align="center">-s</td>
<td align="left">将应用安装到 <code>sdcard</code></td>
</tr>
<tr>
<td align="center">-d</td>
<td align="left">允许降级覆盖安装</td>
</tr>
<tr>
<td align="center">-g</td>
<td align="left">授予所有运行时权限</td>
</tr>
</tbody></table>
<p>运行命令后如果见到类似如下输出（状态为 Success）代表安装成功：</p>
<pre><code>[100%] /data/local/tmp/1.apk
    pkg: /data/local/tmp/1.apk
Success</code></pre>
<p>上面是当前最新版 <code>v1.0.36</code> 的 <code>adb</code> 的输出，会显示 <code>push apk</code> 文件到手机的进度百分比。</p>
<p>使用旧版本 adb 的输出则是这样的：</p>
<pre><code>12040 KB/s (22205609 bytes in 1.801s)
        pkg: /data/local/tmp/SogouInput_android_v8.3_sweb.apk
Success</code></pre>
<p>而如果状态为 <code>Failure</code> 则表示安装失败，比如：</p>
<pre><code>[100%] /data/local/tmp/map-20160831.apk
        pkg: /data/local/tmp/map-20160831.apk
Failure [INSTALL_FAILED_ALREADY_EXISTS]</code></pre>
<p>常见安装失败输出代码、含义及可能的解决办法如下：</p>
<table>
<thead>
<tr>
<th align="left">输出</th>
<th>含义</th>
<th>解决办法</th>
</tr>
</thead>
<tbody><tr>
<td align="left">INSTALL_FAILED_ALREADY_EXISTS</td>
<td>应用已经存在，或卸载了但没卸载干净</td>
<td><code>adb install</code> 时使用 <code>-r</code> 参数，或者先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_INVALID_APK</td>
<td>无效的 APK 文件</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_INVALID_URI</td>
<td>无效的 APK 文件名</td>
<td>确保 APK 文件名里无中文</td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_INSUFFICIENT_STORAGE</td>
<td>空间不足</td>
<td>清理空间</td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_DUPLICATE_PACKAGE</td>
<td>已经存在同名程序</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_NO_SHARED_USER</td>
<td>请求的共享用户不存在</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_UPDATE_INCOMPATIBLE</td>
<td>以前安装过同名应用，但卸载时数据没有移除；或者已安装该应用，但签名不一致</td>
<td>先 <code>adb uninstall &lt;packagename&gt;</code> 再安装</td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_SHARED_USER_INCOMPATIBLE</td>
<td>请求的共享用户存在但签名不一致</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_MISSING_SHARED_LIBRARY</td>
<td>安装包使用了设备上不可用的共享库</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_REPLACE_COULDNT_DELETE</td>
<td>替换时无法删除</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_DEXOPT</td>
<td>dex 优化验证失败或空间不足</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_OLDER_SDK</td>
<td>设备系统版本低于应用要求</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_CONFLICTING_PROVIDER</td>
<td>设备里已经存在与应用里同名的 content provider</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_NEWER_SDK</td>
<td>设备系统版本高于应用要求</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_TEST_ONLY</td>
<td>应用是 test-only 的，但安装时没有指定 <code>-t</code> 参数</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_CPU_ABI_INCOMPATIBLE</td>
<td>包含不兼容设备 CPU 应用程序二进制接口的 native code</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_MISSING_FEATURE</td>
<td>应用使用了设备不可用的功能</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_CONTAINER_ERROR</td>
<td>1. sdcard 访问失败;<br />2. 应用签名与 ROM 签名一致，被当作内置应用。</td>
<td>1. 确认 sdcard 可用，或者安装到内置存储;<br />2. 打包时不与 ROM 使用相同签名。</td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_INVALID_INSTALL_LOCATION</td>
<td>1. 不能安装到指定位置;<br />2. 应用签名与 ROM 签名一致，被当作内置应用。</td>
<td>1. 切换安装位置，添加或删除 <code>-s</code> 参数;<br />2. 打包时不与 ROM 使用相同签名。</td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_MEDIA_UNAVAILABLE</td>
<td>安装位置不可用</td>
<td>一般为 sdcard，确认 sdcard 可用或安装到内置存储</td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_VERIFICATION_TIMEOUT</td>
<td>验证安装包超时</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_VERIFICATION_FAILURE</td>
<td>验证安装包失败</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_PACKAGE_CHANGED</td>
<td>应用与调用程序期望的不一致</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_UID_CHANGED</td>
<td>以前安装过该应用，与本次分配的 UID 不一致</td>
<td>清除以前安装过的残留文件</td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_VERSION_DOWNGRADE</td>
<td>已经安装了该应用更高版本</td>
<td>使用 <code>-d</code> 参数</td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_PERMISSION_MODEL_DOWNGRADE</td>
<td>已安装 target SDK 支持运行时权限的同名应用，要安装的版本不支持运行时权限</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_PARSE_FAILED_NOT_APK</td>
<td>指定路径不是文件，或不是以 <code>.apk</code> 结尾</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_PARSE_FAILED_BAD_MANIFEST</td>
<td>无法解析的 AndroidManifest.xml 文件</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION</td>
<td>解析器遇到异常</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_PARSE_FAILED_NO_CERTIFICATES</td>
<td>安装包没有签名</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES</td>
<td>已安装该应用，且签名与 APK 文件不一致</td>
<td>先卸载设备上的该应用，再安装</td>
</tr>
<tr>
<td align="left">INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING</td>
<td>解析 APK 文件时遇到 <code>CertificateEncodingException</code></td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME</td>
<td>manifest 文件里没有或者使用了无效的包名</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID</td>
<td>manifest 文件里指定了无效的共享用户 ID</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_PARSE_FAILED_MANIFEST_MALFORMED</td>
<td>解析 manifest 文件时遇到结构性错误</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_PARSE_FAILED_MANIFEST_EMPTY</td>
<td>在 manifest 文件里找不到找可操作标签（instrumentation 或 application）</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_INTERNAL_ERROR</td>
<td>因系统问题安装失败</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_USER_RESTRICTED</td>
<td>用户被限制安装应用</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_DUPLICATE_PERMISSION</td>
<td>应用尝试定义一个已经存在的权限名称</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_NO_MATCHING_ABIS</td>
<td>应用包含设备的应用程序二进制接口不支持的 native code</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_CANCELED_BY_USER</td>
<td>应用安装需要在设备上确认，但未操作设备或点了取消</td>
<td>在设备上同意安装</td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_ACWF_INCOMPATIBLE</td>
<td>应用程序与设备不兼容</td>
<td></td>
</tr>
<tr>
<td align="left">INSTALL_FAILED_TEST_ONLY</td>
<td>APK 文件是使用 Android Studio 直接 RUN 编译出来的文件</td>
<td>通过 Gradle 的 assembleDebug 或 assembleRelease 重新编译，或者 Generate Signed APK</td>
</tr>
<tr>
<td align="left">does not contain AndroidManifest.xml</td>
<td>无效的 APK 文件</td>
<td></td>
</tr>
<tr>
<td align="left">is not a valid zip file</td>
<td>无效的 APK 文件</td>
<td></td>
</tr>
<tr>
<td align="left">Offline</td>
<td>设备未连接成功</td>
<td>先将设备与 adb 连接成功</td>
</tr>
<tr>
<td align="left">unauthorized</td>
<td>设备未授权允许调试</td>
<td></td>
</tr>
<tr>
<td align="left">error: device not found</td>
<td>没有连接成功的设备</td>
<td>先将设备与 adb 连接成功</td>
</tr>
<tr>
<td align="left">protocol failure</td>
<td>设备已断开连接</td>
<td>先将设备与 adb 连接成功</td>
</tr>
<tr>
<td align="left">Unknown option: -s</td>
<td>Android 2.2 以下不支持安装到 sdcard</td>
<td>不使用 <code>-s</code> 参数</td>
</tr>
<tr>
<td align="left">No space left on device</td>
<td>空间不足</td>
<td>清理空间</td>
</tr>
<tr>
<td align="left">Permission denied … sdcard …</td>
<td>sdcard 不可用</td>
<td></td>
</tr>
<tr>
<td align="left">signatures do not match the previously installed version; ignoring!</td>
<td>已安装该应用且签名不一致</td>
<td>先卸载设备上的该应用，再安装</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android，adb</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP8266系列-资料收集</title>
    <url>/2017/08/06/1260.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="ESP8266-通用系类"><a href="#ESP8266-通用系类" class="headerlink" title="ESP8266 通用系类"></a>ESP8266 通用系类</h2><p>安信可科技: <a href="http://wiki.ai-thinker.com/esp8266">http://wiki.ai-thinker.com/esp8266</a><br>Jack’s LAB: <a href="http://wiki.jackslab.org/ESP8266">http://wiki.jackslab.org/ESP8266</a><br>乐鑫论坛: <a href="http://bbs.espressif.com/index.php">http://bbs.espressif.com/index.php</a></p>
<a id="more"></a>

<h2 id="ESP8266-Lua系列"><a href="#ESP8266-Lua系列" class="headerlink" title="ESP8266 Lua系列"></a>ESP8266 Lua系列</h2><p>NodeMCU: <a href="https://github.com/nodemcu/nodemcu-firmware/wiki/nodemcu_api_cn">https://github.com/nodemcu/nodemcu-firmware/wiki/nodemcu_api_cn</a><br>泰晓科技: <a href="http://tinylab.org/nodemcu-kickstart/">http://tinylab.org/nodemcu-kickstart/</a><br>NodeMcu Docs: [<a href="http://nodemcu.readthedocs.io/en/dev/]">http://nodemcu.readthedocs.io/en/dev/]</a> <a href="http://nodemcu.readthedocs.io/en/dev/">6</a></p>
<h2 id="ESP8266-常见问题"><a href="#ESP8266-常见问题" class="headerlink" title="ESP8266 常见问题"></a>ESP8266 常见问题</h2><p>上电输出以下信息</p>
<pre class=" language-SH"><code class="language-SH">ets Jan  8 2013,rst cause:1, boot mode:(3,6)</code></pre>
<p>In the bootup message ‘boot mode:(x,y)’ three low bits of x are {MTDO, GPIO0, GPIO2}.<br><br>The Espressif code can boot in different modes, selected on power-up based on GPIO pin levels. (<strong>MTDO is equivalent to GPIO15</strong>).<br></p>
<table>
<thead>
<tr>
<th align="left">MTDO</th>
<th align="left">GPIO0</th>
<th align="left">GPIO2</th>
<th align="left">Mode</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">L</td>
<td align="left">L</td>
<td align="left">H</td>
<td align="left">UART</td>
<td align="left">Download code from UART</td>
</tr>
<tr>
<td align="left">L</td>
<td align="left">H</td>
<td align="left">H</td>
<td align="left">Flash</td>
<td align="left">Boot from SPI Flash</td>
</tr>
<tr>
<td align="left">H</td>
<td align="left">x</td>
<td align="left">x</td>
<td align="left">SDIO</td>
<td align="left">Boot from SD-card</td>
</tr>
</tbody></table>
<h2 id="ESP8266-datasheet"><a href="#ESP8266-datasheet" class="headerlink" title="ESP8266 datasheet"></a>ESP8266 datasheet</h2><p><a href="https://www.espressif.com/sites/default/files/documentation/0a-esp8266ex_datasheet_cn.pdf">https://www.espressif.com/sites/default/files/documentation/0a-esp8266ex_datasheet_cn.pdf</a></p>
<h3 id="02D-datasheet"><a href="#02D-datasheet" class="headerlink" title="02D datasheet"></a>02D datasheet</h3><p><a href="https://www.espressif.com/sites/default/files/documentation/esp-wroom-02d_esp-wroom-02u_datasheet_cn.pdf">https://www.espressif.com/sites/default/files/documentation/esp-wroom-02d_esp-wroom-02u_datasheet_cn.pdf</a></p>
<h3 id="02D-引脚图"><a href="#02D-引脚图" class="headerlink" title="02D 引脚图"></a>02D 引脚图</h3><p><img src="/images/pasted-16.png" alt="upload successful"></p>
<h2 id="ESP8266-IDF-SDK-文档"><a href="#ESP8266-IDF-SDK-文档" class="headerlink" title="ESP8266 IDF-SDK 文档"></a>ESP8266 IDF-SDK 文档</h2><p><a href="https://docs.espressif.com/projects/esp8266-rtos-sdk/en/latest/api-reference/index.html">https://docs.espressif.com/projects/esp8266-rtos-sdk/en/latest/api-reference/index.html</a></p>
<h2 id="ESP8266-低功耗文档说明"><a href="#ESP8266-低功耗文档说明" class="headerlink" title="ESP8266 低功耗文档说明"></a>ESP8266 低功耗文档说明</h2><p><a href="https://www.espressif.com/sites/default/files/documentation/9b-esp8266-low_power_solutions_cn.pdf">https://www.espressif.com/sites/default/files/documentation/9b-esp8266-low_power_solutions_cn.pdf</a></p>
<h2 id="用脚本命令生成合成固件"><a href="#用脚本命令生成合成固件" class="headerlink" title="用脚本命令生成合成固件"></a>用脚本命令生成合成固件</h2><pre class=" language-sh"><code class="language-sh">if [ $GAT_FLASH_SIZE == 08Mbit ];then
    echo "08Mbit"
    BS_SIZE=1k
    SPI_FLASH_SIZE=2
    BOOT_ADDR_OFFSET=0k
    PART_ADDR_OFFSET=12k
    APP_ADDR_OFFSET=20k
    OTADATA_ADDR_OFFSET=1000k
    cp sdkconfig_08Mbit sdkconfig
elif [ $GAT_FLASH_SIZE == 16Mbit ];then
    echo "16Mbit"
    BS_SIZE=2k
    SPI_FLASH_SIZE=5
    BOOT_ADDR_OFFSET=0k
    PART_ADDR_OFFSET=32k
    OTADATA_ADDR_OFFSET=40k
    APP_ADDR_OFFSET=64k
    cp sdkconfig_16Mbit sdkconfig
elif [ $GAT_FLASH_SIZE == 32Mbit ];then
    BS_SIZE=4k
    SPI_FLASH_SIZE=6
    BOOT_ADDR_OFFSET=0k
    PART_ADDR_OFFSET=32k
    OTADATA_ADDR_OFFSET=2100k
    APP_ADDR_OFFSET=40k
    cp sdkconfig_32Mbit sdkconfig
    echo "32Mbit"
else
    echo "GAT_FLASH_SIZE must be one of [08Mbit|16Mbit|32Mbit]"
    exit
fi
FLASH_MAX_ADDR=1024
TARGET_DIR=build
BOOT_BIN=bootloader/bootloader.bin
OTA_DATA_BIN=ota_data_initial.bin
PART_BIN=Partition_$&#123;GAT_FLASH_SIZE&#125;.bin
COMBINE_BIN=$&#123;TARGET_NAME&#125;_combine.bin

# spi mode(0=QIO, 1=QOUT, 2=DIO, 3=DOUT)
SPI_MODE=3

dd if=/dev/zero bs=$BS_SIZE count=$&#123;FLASH_MAX_ADDR&#125; | sed 's/\x00/\xff/g' > $&#123;TARGET_DIR&#125;/$&#123;COMBINE_BIN&#125;
dd if=$&#123;TARGET_DIR&#125;/$&#123;BOOT_BIN&#125; ibs=$(wc -c < $&#123;TARGET_DIR&#125;/$&#123;BOOT_BIN&#125;) count=1 of=$&#123;TARGET_DIR&#125;/$&#123;COMBINE_BIN&#125; seek=$BOOT_ADDR_OFFSET obs=1 conv=notrunc
dd if=$&#123;TARGET_DIR&#125;/$&#123;PART_BIN&#125; ibs=$(wc -c < $&#123;TARGET_DIR&#125;/$&#123;PART_BIN&#125;) count=1 of=$&#123;TARGET_DIR&#125;/$&#123;COMBINE_BIN&#125; seek=$PART_ADDR_OFFSET obs=1 conv=notrunc
dd if=$&#123;TARGET_DIR&#125;/$&#123;OTA_DATA_BIN&#125; ibs=$(wc -c < $&#123;TARGET_DIR&#125;/$&#123;OTA_DATA_BIN&#125;) count=1 of=$&#123;TARGET_DIR&#125;/$&#123;COMBINE_BIN&#125; seek=$OTADATA_ADDR_OFFSET obs=1 conv=notrunc
dd if=$&#123;TARGET_DIR&#125;/$&#123;TARGET_NAME&#125;.bin ibs=$(wc -c < $&#123;TARGET_DIR&#125;/$&#123;TARGET_NAME&#125;.bin) count=1 of=$&#123;TARGET_DIR&#125;/$&#123;COMBINE_BIN&#125; seek=$APP_ADDR_OFFSET obs=1 conv=notrunc
echo 0$&#123;SPI_MODE&#125; | xxd -r -ps | dd of=$&#123;TARGET_DIR&#125;/$&#123;COMBINE_BIN&#125; seek=2 bs=1 count=1 conv=notrunc
echo $&#123;SPI_FLASH_SIZE&#125;0 | xxd -r -ps | dd of=$&#123;TARGET_DIR&#125;/$&#123;COMBINE_BIN&#125; seek=3 bs=1 count=1 conv=notrunc</code></pre>
<h2 id="其他有用命令"><a href="#其他有用命令" class="headerlink" title="其他有用命令"></a>其他有用命令</h2><ul>
<li>生成汇编文件，用于定位问题<pre class=" language-sh"><code class="language-sh">xtensa-lx106-elf-objdump -S build/$&#123;TARGET_NAME&#125;.elf > build/$&#123;TARGET_NAME&#125;.S</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>esp8266</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
      </tags>
  </entry>
  <entry>
    <title>COAP系列-lwm2m初识</title>
    <url>/2018/01/29/7f47.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Wakaama"><a href="#Wakaama" class="headerlink" title="Wakaama"></a>Wakaama</h2><hr>
<h2 id="1-Source-Layout"><a href="#1-Source-Layout" class="headerlink" title="1. Source Layout"></a>1. Source Layout</h2><pre><code>-+- core                   (the LWM2M engine)
 |    |
 |    +- er-coap-13        (Slightly modified Erbium&#39;s CoAP engine from
 |                          http://people.inf.ethz.ch/mkovatsc/erbium.php
 |
 +- tests                  (test cases)
 |
 +- examples
      |
      +- bootstrap_server  (a command-line LWM2M bootstrap server)
      |
      +- client            (a command-line LWM2M client with several test objects)
      |
      +- lightclient       (a very simple command-line LWM2M client with several test objects)
      |
      +- server            (a command-line LWM2M server)
      |
      +- shared            (utility functions for connection handling and command-
                            line interface)</code></pre>
<a id="more"></a>

<h2 id="2-Compiling"><a href="#2-Compiling" class="headerlink" title="2.Compiling"></a>2.Compiling</h2><p>Wakaama is not a library but files to be built with an application. Wakaama uses CMake &gt;= 3. Look at examples/server/CMakeLists.txt for an example of how to include it. Several compilation switches are used:</p>
<ul>
<li>LWM2M_BIG_ENDIAN if your target platform uses big-endian format.</li>
<li>LWM2M_LITTLE_ENDIAN if your target platform uses little-endian format.</li>
<li>LWM2M_CLIENT_MODE to enable LWM2M Client interfaces.</li>
<li>LWM2M_SERVER_MODE to enable LWM2M Server interfaces.</li>
<li>LWM2M_BOOTSTRAP_SERVER_MODE to enable LWM2M Bootstrap Server interfaces.</li>
<li>LWM2M_BOOTSTRAP to enable LWM2M Bootstrap support in a LWM2M Client.</li>
<li>LWM2M_SUPPORT_JSON to enable JSON payload support (implicit when defining - LWM2M_SERVER_MODE)</li>
<li>LWM2M_OLD_CONTENT_FORMAT_SUPPORT to support the deprecated content format values for TLV and JSON.</li>
</ul>
<h2 id="3-基础知识"><a href="#3-基础知识" class="headerlink" title="3.基础知识"></a>3.基础知识</h2><p>通过URI访问LWM2M实体</p>
<pre><code>/&lt;object id&gt;[/&lt;object instance id&gt;][/&lt;resource id&gt;]</code></pre>
<p>在LWM2M中，合法的URI应当像如下格式（注意，不能以/结尾）：</p>
<pre><code>/&lt;object id&gt;[/&lt;object instance id&gt;][/&lt;resource id&gt;]

# legal example
/0
/0/0
/0/1
/0/1/1
1
2
3
4
5
6
7</code></pre>
<p>URI分别标识了访问资源的object id、object instance id、resource id，后两个id是可选的。</p>
<p>Depending on your platform, you need to define LWM2M_BIG_ENDIAN or LWM2M_LITTLE_ENDIAN. LWM2M_CLIENT_MODE and LWM2M_SERVER_MODE can be defined at the same time.</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="http://www.eclipse.org/wakaama/">wakaama</a></li>
<li><a href="https://github.com/eclipse/wakaama">github</a></li>
<li><a href="http://blog.csdn.net/github_39603316/article/details/76014609">Blog</a></li>
</ul>
]]></content>
      <categories>
        <category>协议</category>
      </categories>
      <tags>
        <tag>COAP</tag>
        <tag>lwm2m</tag>
        <tag>协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Github Blog 搭建入门</title>
    <url>/2017/03/26/fc92.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="GitHub-项目创建"><a href="#GitHub-项目创建" class="headerlink" title="GitHub 项目创建"></a>GitHub 项目创建</h2><ul>
<li>创建一个跟你的用户名相同的项目，比如我的*<strong>github**<em>名称是</em></strong>ilxj*** 则项目名称为**<em>ilxj.github.io**</em></li>
</ul>
<h2 id="nodejs安装"><a href="#nodejs安装" class="headerlink" title="nodejs安装"></a>nodejs安装</h2><ul>
<li>安装nodejs，下载直接安装就可以了: <a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a>.</li>
</ul>
<a id="more"></a>

<h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><ul>
<li>安装配置hexo，安装命令:</li>
</ul>
<h3 id="淘宝cnpm"><a href="#淘宝cnpm" class="headerlink" title="淘宝cnpm"></a>淘宝cnpm</h3><p>网址:<a href="https://npm.taobao.org/">https://npm.taobao.org/</a></p>
<pre class=" language-sh"><code class="language-sh">npm install -g hexo-cli
# 若npm 安装有问题，可以更改为淘宝源,之后可以用 cnpm 代替 npm
npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre>
<ul>
<li>在终端输入:</li>
</ul>
<pre class=" language-sh"><code class="language-sh"> $ hexo
 #显示如下则成功.</code></pre>
<p> <img src="http://upload-images.jianshu.io/upload_images/1736256-808fd91a203124d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo"></p>
<ul>
<li>初始化博客</li>
</ul>
<pre class=" language-sh"><code class="language-sh"> #建立一个博客文件夹，并初始化博客，<folder>为文件夹的名称，可以随便起名字
 $ hexo init <folder>
 #进入博客文件夹，根据博客既定的dependencies配置安装所有的依赖包
 $ npm install
 # 部署所需的插件,加上--save比较好
 $ npm install hexo-deployer-git    --save</code></pre>
<ul>
<li>初始化完成之后，目录如下图<br><img src="http://upload-images.jianshu.io/upload_images/1736256-41e851da429e5a19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hexo 初始化图"><h2 id="博客配置"><a href="#博客配置" class="headerlink" title="博客配置"></a>博客配置</h2><img src="http://upload-images.jianshu.io/upload_images/1736256-70632d39b4a81358.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="博客配置"></li>
</ul>
<h3 id="本地发布命令"><a href="#本地发布命令" class="headerlink" title="本地发布命令"></a>本地发布命令</h3><pre class=" language-bash"><code class="language-bash"> $ hexo server.
 <span class="token comment" spellcheck="true">#浏览器浏览:http://localhost:4000/</span></code></pre>
<h3 id="GitHub-发布命令"><a href="#GitHub-发布命令" class="headerlink" title="GitHub 发布命令"></a>GitHub 发布命令</h3><pre class=" language-bash"><code class="language-bash"> $ hexo generate
 $ hexo deploy</code></pre>
<p>这时候我们的博客已经部署到网上了，我们可以在浏览器地址输入栏输入我们的网址即可，如我的博客是:<a href="http://lxj-life.com/">ilxj.github.io</a>。</p>
<h2 id="跨PC部署"><a href="#跨PC部署" class="headerlink" title="跨PC部署"></a>跨PC部署</h2><p>原理是一个仓库存部署工具，另外一个参考用来做发布仓库；</p>
<h2 id="Hexo-主题"><a href="#Hexo-主题" class="headerlink" title="Hexo 主题"></a>Hexo 主题</h2><ul>
<li><a href="https://hexo.io/themes/">官网 hexo 主题</a></li>
<li><a href="https://github.com/hexojs/hexo/wiki/Themes">主题 github</a></li>
</ul>
<h3 id="本博客主题是NEXT"><a href="#本博客主题是NEXT" class="headerlink" title="本博客主题是NEXT"></a>本博客主题是NEXT</h3><ul>
<li>新建一个页面，命名为 tags 。命令如下：<pre><code>$ hexo new page tags</code></pre>
</li>
<li>初始化<br>编辑刚新建的页面，设置type为tags：</li>
</ul>
<pre><code>title: 标签
date: 2014-12-22 12:39:04
type: &quot;tags&quot;

---</code></pre>
<p><a href="http://theme-next.iissnan.com/getting-started.html">NEXT 参考</a></p>
<h2 id="CDN-免费加速"><a href="#CDN-免费加速" class="headerlink" title="CDN 免费加速"></a>CDN 免费加速</h2><p>官网: <a href="https://www.jsdelivr.com/?docs=gh">https://www.jsdelivr.com/?docs=gh</a><br>例子</p>
<pre class=" language-sh"><code class="language-sh">https://cdn.jsdelivr.net/gh/github用户名/仓库@分支/images/pasted-15.png</code></pre>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo插件-Hexo Admin</title>
    <url>/2017/08/08/6e86.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Hexo-Admin"><a href="#Hexo-Admin" class="headerlink" title="Hexo Admin"></a>Hexo Admin</h2><p>官网链接:<a href="https://jaredforsyth.com/hexo-admin/">https://jaredforsyth.com/hexo-admin/</a></p>
<blockquote>
<p>插件可以直接在网页端创建、编辑markdown文章内容，并将内容发布到_posts里。<br>另外，对我而言，最方便的是可以很方便的给文章加标题、分类、打标签。</p>
</blockquote>
<h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><ol>
<li>第一步:下载启动</li>
</ol>
<pre class=" language-sh"><code class="language-sh">npm install --save hexo-admin
hexo server -d
open http://localhost:4000/admin/</code></pre>
<a id="more"></a>

<ol start="2">
<li>第二步：配置</li>
</ol>
<p>在Hexo 全局配置文件<strong>_config.yml</strong>最后添加类似如下内容</p>
<pre class=" language-sh"><code class="language-sh">admin:
  username: AlexLin
  password_hash: be121740bf988b2225a313fa1f107ca1
  secret: your admin password</code></pre>
<p><strong><em>secret :</em></strong>你的后台管理密码</p>
<p><strong><em>password_hash:</em></strong> 用密码生成的哈希串</p>
<p>我的生成命令如下:</p>
<pre class=" language-sh"><code class="language-sh">Alex@Alex-PC MINGW64 /e/work/myblog/gitBlog/hexo (master)
$ node
> const bcrypt = require('bcrypt-nodejs')
undefined
> bcrypt.hashSync('AlexLin666')
'$2a$10$NVMZ2dYeOd5YRxNb7g3WJOBMzJfaXJ5I53QCy8Pw5IV.3Uoldz0wq'
></code></pre>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加Swiftype</title>
    <url>/2017/08/04/5fa1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-swiftype-搭建站内搜索"><a href="#1-swiftype-搭建站内搜索" class="headerlink" title="1.swiftype 搭建站内搜索"></a>1.swiftype 搭建站内搜索</h2><p>Swiftype站内搜索 ，<a href="https://swiftype.com/">官网</a></p>
<h3 id="Swiftype-配置"><a href="#Swiftype-配置" class="headerlink" title="Swiftype 配置"></a>Swiftype 配置</h3><ol>
<li>需要注册账号，目前只是支持企业邮箱注册</li>
<li>创建网站搜索引擎，然后进入以下界面<br><img src="http://upload-images.jianshu.io/upload_images/1736256-0ba9347ffa9e0420.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片"></li>
</ol>
<blockquote>
<p>#st-search-input</p>
</blockquote>
<a id="more"></a>

<ol start="3">
<li>点击右下的<strong>SAVE</strong>,接着点击<strong>ACTIVATE SWIFTYPE</strong>按钮即可完成swiftype的所有配置了;</li>
<li>然后自动来到这个界面，把<strong>install</strong> 后面的字符串拷贝出来;</li>
</ol>
<h3 id="Hexo-Next-主题配置"><a href="#Hexo-Next-主题配置" class="headerlink" title="Hexo Next 主题配置"></a>Hexo Next 主题配置</h3><ol>
<li>source 创建 search/index.md</li>
<li>search/index.md 文件中添加如下信息<pre><code>layout: search
title: search</code></pre>
</li>
</ol>
<hr>
<pre><code>
3. 全局配置文件_config.yml添加以下内容/如图
```yml
swiftype_key: you_swiftype_key

search:
  path: search.xml
  field: post</code></pre>
<pre><code>![配置图][3]</code></pre>
<ol start="4">
<li>验证完成<pre class=" language-sh"><code class="language-sh">hexo clean;hexo g ;hexo s;hexo d</code></pre>
</li>
</ol>
<h2 id="2-Hexo-站内搜索"><a href="#2-Hexo-站内搜索" class="headerlink" title="2.Hexo 站内搜索"></a>2.Hexo 站内搜索</h2><blockquote>
<p>为什么呢？因为<code>swiftype</code>过期之后就无法使用了，使用 <code>hexo-generator-search</code> 插件可以用本地搜索</p>
</blockquote>
<h3 id="1-步骤一、安装插件"><a href="#1-步骤一、安装插件" class="headerlink" title="1. 步骤一、安装插件"></a>1. 步骤一、安装插件</h3><pre class=" language-sh"><code class="language-sh">    npm install hexo-generator-search --save</code></pre>
<h3 id="2-步骤二、配置"><a href="#2-步骤二、配置" class="headerlink" title="2. 步骤二、配置"></a>2. 步骤二、配置</h3><p>   2.1 全局配置文件 <code>_config.yml</code><br>    <code>yml     search:       path: search.xml       field: post       format: html       limit: 10000     </code><br>   2.2 主题配置文件 <code>next/_config.yml</code><br>    <code>yml     # Local search     local_search:       enable: true     </code></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo相关资源</title>
    <url>/2017/08/04/ddcb.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>中文网站 : <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo第三方评论插件引用</title>
    <url>/2017/08/01/6835.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="第三方插件-友言"><a href="#第三方插件-友言" class="headerlink" title="第三方插件-友言"></a>第三方插件-友言</h2><blockquote>
<p>友言已经暂停服务了，又不能用<br>因公司业务调整，非常遗憾的向大家宣布JiaThis公司决定自2018年4月30日起关闭旗下“友言”业务。<br>因为关停“友言”业务给您造成的不便，我们深表歉意。</p>
</blockquote>
<ul>
<li><a href="http://www.uyan.cc/">友言官网</a></li>
<li><a href="http://www.jianshu.com/p/4729e92fddbe">相关教程 1 </a></li>
<li><a href="http://www.qtdebug.com/hexo-uyan/">相关教程 2 </a></li>
</ul>
<a id="more"></a>

]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>IoT设备</title>
    <url>/2018/03/28/b3f9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>明天要去干一件大事，不能丢某人的脸~🆙加油💪</p>
<div align="center" >
![AVR][3]
</div>

<a id="more"></a>

<div align="center" >
![AVR][4]
</div>

<div align="center" >
![89S51最小系统][1]
</div>


]]></content>
      <categories>
        <category>硬件设备</category>
      </categories>
      <tags>
        <tag>智能硬件</tag>
        <tag>IoT</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之kill命令</title>
    <url>/2018/02/23/730d.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Kill-命令列表"><a href="#Kill-命令列表" class="headerlink" title="Kill 命令列表"></a>Kill 命令列表</h2><hr>
<pre><code>alex@ubuntu:~$ kill -l
 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP
 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1
11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM
16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP
21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR
31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX</code></pre>
<a id="more"></a>

<h3 id="Linux-Signals"><a href="#Linux-Signals" class="headerlink" title="Linux Signals"></a>Linux Signals</h3><p>Signals<br>Linux Signals are:</p>
<pre><code>Signal_Name Number  Description
SIGHUP       1      Hangup (POSIX)
SIGINT       2      Terminal interrupt (ANSI)
SIGQUIT      3      Terminal quit (POSIX)
SIGILL       4      Illegal instruction (ANSI)
SIGTRAP      5      Trace trap (POSIX)
SIGIOT       6      IOT Trap (4.2 BSD)
SIGBUS       7      BUS error (4.2 BSD)
SIGFPE       8      Floating point exception (ANSI)
SIGKILL      9      Kill(can&#39;t be caught or ignored) (POSIX)
SIGUSR1      10     User defined signal 1 (POSIX)
SIGSEGV      11     Invalid memory segment access (ANSI)
SIGUSR2      12     User defined signal 2 (POSIX)
SIGPIPE      13     Write on a pipe with no reader, Broken pipe (POSIX)
SIGALRM      14     Alarm clock (POSIX)
SIGTERM      15     Termination (ANSI)
SIGSTKFLT    16     Stack fault
SIGCHLD      17     Child process has stopped or exited, changed (POSIX)
SIGCONT      18     Continue executing, if stopped (POSIX)
SIGSTOP      19     Stop executing(can&#39;t be caught or ignored) (POSIX)
SIGTSTP      20     Terminal stop signal (POSIX)
SIGTTIN      21     Background process trying to read, from TTY (POSIX)
SIGTTOU      22     Background process trying to write, to TTY (POSIX)
SIGURG       23     Urgent condition on socket (4.2 BSD)
SIGXCPU      24     CPU limit exceeded (4.2 BSD)
SIGXFSZ      25     File size limit exceeded (4.2 BSD)
SIGVTALRM    26     Virtual alarm clock (4.2 BSD)
SIGPROF      27     Profiling alarm clock (4.2 BSD)
SIGWINCH     28     Window size change (4.3 BSD, Sun)
SIGIO        29     I/O now possible (4.2 BSD)
SIGPWR       30     Power failure restart (System V)</code></pre>
<h3 id="SIGKILL-9-和-SIGTERM-15-的区别"><a href="#SIGKILL-9-和-SIGTERM-15-的区别" class="headerlink" title="SIGKILL(9) 和 SIGTERM(15) 的区别"></a>SIGKILL(9) 和 SIGTERM(15) 的区别</h3><pre><code>SIGKILL 9   Kill(can&#39;t be caught or ignored) (POSIX)
# 默认kill 发送信号量
SIGTERM 15  Termination (ANSI)</code></pre>
<p>SIGKILL 是强制终止进程，进程来不及释放资源<br>SIGTERM 是 <strong><em>优雅</em></strong> 的退出进程，进程接收到SIGTERM可以进行资源释放；</p>
<h2 id="killall命令"><a href="#killall命令" class="headerlink" title="killall命令"></a>killall命令</h2><p>killall命令使用进程的名称来杀死进程，使用此指令可以杀死一组同名进程。<br>我们可以使用kill命令杀死指定进程PID的进程，如果要找到我们需要杀死的进程，我们还需要在之前使用ps等命令再配合grep来查找进程，而killall把这两个过程合二为一，是一个很好用的命令。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>killall(选项)(参数)</code></pre>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><pre><code>-e：对长名称进行精确匹配；
-l：忽略大小写的不同；
-p：杀死进程所属的进程组；
-i：交互式杀死进程，杀死进程前需要进行确认；
-l：打印所有已知信号列表；
-q：如果没有进程被杀死。则不输出任何信息；
-r：使用正规表达式匹配要杀死的进程名称；
-s：用指定的进程号代替默认信号“SIGTERM”；
-u：杀死指定用户的进程。</code></pre>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>进程名称：指定要杀死的进程名称。</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>杀死所有同名进程</p>
<pre><code>killall vi</code></pre>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之SSH</title>
    <url>/2018/12/18/720f.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul>
<li><a href="https://linux.cn/article-5975-1.html">https://linux.cn/article-5975-1.html</a></li>
</ul>
<pre class=" language-sh"><code class="language-sh">autossh -M 10109 -fN -o "PubkeyAuthentication=yes" -o "StrictHostKeyChecking=false" -o "PasswordAuthentication=no" -o "ServerAliveInterval 60" -o "ServerAliveCountMax 3" -R ubuntu.lxj-life.com:10108:localhost:22 ubuntu@ubuntu.lxj-life.com</code></pre>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker系列-基础入门</title>
    <url>/2017/10/09/e119.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>[ TOP ]</p>
<h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><hr>
<p><a href="https://www.docker.com/">https://www.docker.com</a><br><a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<a id="more"></a>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><hr>
<ul>
<li> 帮助命令</li>
</ul>
<pre><code># 查看run 命令的帮助信息
docker run --help</code></pre>
<ul>
<li> 显示 Docker 版本信息。</li>
</ul>
<pre><code>docker version</code></pre>
<ul>
<li>显示 Docker 系统信息，包括镜像和容器数。</li>
</ul>
<pre><code>docker info</code></pre>
<h3 id="镜像相关"><a href="#镜像相关" class="headerlink" title="镜像相关"></a>镜像相关</h3><hr>
<ul>
<li>查看镜像</li>
</ul>
<pre><code>docker images</code></pre>
<ul>
<li> 查看镜像详细信息</li>
</ul>
<pre><code>docker inspect &lt;IMAGE ID&gt;</code></pre>
<ul>
<li>搜索镜像</li>
</ul>
<p>可以到docker hub 或者命令行搜索<br><a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<pre><code>alex@Alex  ~  docker search ubuntu
NAME                                                   DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED
ubuntu                                                 Ubuntu is a Debian-based Linux operating s...   6645      [OK]
dorowu/ubuntu-desktop-lxde-vnc                         Ubuntu with openssh-server and NoVNC            131                  [OK]
rastasheep/ubuntu-sshd                                 Dockerized SSH service, built on top of of...   105                  [OK]
ansible/ubuntu14.04-ansible                            Ubuntu 14.04 LTS with ansible                   87                   [OK]</code></pre>
<ul>
<li>下载镜像</li>
</ul>
<pre><code>docker pull ubuntu</code></pre>
<ul>
<li>删除镜像</li>
</ul>
<pre><code>docker rmi &lt;IMAGE_ID&gt;</code></pre>
<ul>
<li>容器导出(保存当前的容器为一个镜像)</li>
</ul>
<p><strong>语法:</strong></p>
<pre><code>docker save [OPTIONS] IMAGE [IMAGE...]</code></pre>
<h3 id="容器相关"><a href="#容器相关" class="headerlink" title="容器相关"></a>容器相关</h3><hr>
<ul>
<li>docker和宿主机之间复制文件</li>
</ul>
<pre class=" language-shell"><code class="language-shell"># 从主机复制到容器
sudo docker cp host_path containerID:container_path
# 从容器复制到主机
sudo docker cp containerID:container_path host_path
# 容器ID的查询方法想必大家都清楚:docker ps -a</code></pre>
<ul>
<li>列出容器</li>
</ul>
<pre><code>docker ps - Lists containers.
-l：显示最后启动的容器
-a：同时显示停止的容器，默认只显示启动状态</code></pre>
<ul>
<li>停止、启动、杀死一个容器</li>
</ul>
<pre><code>$docker stop  Name/CONTAINER_ID
$docker start Name/CONTAINER_ID
$docker kill  Name/CONTAINER_ID</code></pre>
<ul>
<li>删除所有容器</li>
</ul>
<pre><code>$docker rm `docker ps -a -q`</code></pre>
<ul>
<li>删除指定容器</li>
</ul>
<pre><code>$docker rm Name/CONTAINER_ID</code></pre>
<ul>
<li>创建一个新的容器并运行一个命令</li>
</ul>
<pre><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></pre>
<p><strong>OPTIONS：</strong></p>
<ul>
<li>-a stdin : 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</li>
<li>-d : 后台运行容器，并返回容器ID；</li>
<li>-i : 以交互模式运行容器，通常与 -t 同时使用；</li>
<li>-t : 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
<li>--name=”nginx-lb” : 为容器指定一个名称；</li>
<li>--dns 8.8.8.8 : 指定容器使用的DNS服务器，默认和宿主一致；</li>
<li>--dns-search example.com : 指定容器DNS搜索域名，默认和宿主一致；</li>
<li>-h “mars” : 指定容器的hostname；</li>
<li>-e username=”ritchie” : 设置环境变量；</li>
<li>--env-file=[] : 从指定文件读入环境变量；</li>
<li>--cpuset=”0-2” or –cpuset=”0,1,2” : 绑定容器到指定CPU运行；</li>
<li>-m : 设置容器使用内存最大值；</li>
<li>--net=”bridge” : 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</li>
<li>--link=[] : 添加链接到另一个容器；</li>
<li>--expose=[] : 开放一个端口或一组端口；</li>
<li>--rm : 退出时删除容器</li>
<li>-v : 挂载目录，冒号前为宿主机目录，必须为绝对路径，冒号后为镜像内挂载的路径</li>
<li>--device /dev/ttyUSB0:/dev/ttyUSB0 : 指定了宿主机的串口设备以及容器的映射串口设备</li>
<li>--privileged : Docker将拥有访问主机所有设备的权限</li>
</ul>
<p><strong>例子</strong></p>
<ul>
<li>1.使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。</li>
</ul>
<pre><code>docker run --name mynginx -d nginx:latest</code></pre>
<ul>
<li>2.使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。</li>
</ul>
<pre><code>docker run -P -d nginx:latest</code></pre>
<ul>
<li>3.使用镜像nginx:latest以后台模式启动一个容器,将容器的80端口映射到主机的80端口,主机的目录/data映射到容器的/data。</li>
</ul>
<pre><code>docker run -p 80:80 -v /data:/data -d nginx:latest</code></pre>
<ul>
<li>4.使用镜像nginx:latest以交互模式启动一个容器,在容器内执行/bin/bash命令。</li>
</ul>
<pre><code>runoob@runoob:~$ docker run -it nginx:latest /bin/bash
root@b8573233d675:/#</code></pre>
<ul>
<li><p> 进入一个开启的容器</p>
</li>
<li><ul>
<li><strong>方法一：</strong><br><em>使用该命令有一个问题。当多个窗口同时使用该命令进入该容器时，所有的窗口都会同步显示。如果有一个窗口阻塞了，那么其他窗口也无法再进行操作。</em> <strong>(适合个人开发)</strong></li>
</ul>
</li>
</ul>
<pre><code>docker attach &lt;CONTAINER_ID&gt;</code></pre>
<ul>
<li><ul>
<li> <strong>方法二:</strong><br><em>使用docker exec进入Docker容器</em></li>
</ul>
</li>
</ul>
<pre><code>$ sudo docker ps
$ sudo docker exec -it &lt;CONTAINER_ID&gt; /bin/bash</code></pre>
<h2 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h2><hr>
<p>新的linux 没有带 <strong>ifconfig</strong> 命令,而是用<strong>ip</strong> 命令代替<br>如果想使员工__ifconfig___ 就要安装</p>
<pre><code>apt-get install net-tools</code></pre>
<h3 id="网络命令介绍"><a href="#网络命令介绍" class="headerlink" title="网络命令介绍"></a>网络命令介绍</h3><ul>
<li>iptables</li>
</ul>
<pre><code># 进行安装
apt-get install iptables</code></pre>
<h2 id="新镜像创建"><a href="#新镜像创建" class="headerlink" title="新镜像创建"></a>新镜像创建</h2><hr>
<blockquote>
<p>基于某个镜像运行起来之后，创建一个新的镜像</p>
</blockquote>
<ul>
<li>运行某个镜像(<strong>ubuntu:v1</strong>)</li>
</ul>
<pre><code>docker run -it ubuntu:v1 /bin/bash-</code></pre>
<ul>
<li>对镜像进行修改(<strong>安装ping 命令</strong>)</li>
</ul>
<pre><code>apt-get install inetutils-ping</code></pre>
<ul>
<li>退出容器，查看容器ID</li>
</ul>
<pre><code>docker ps -a</code></pre>
<ul>
<li> commit docker 容器的修改(<strong>alexubuntu:</strong> 为修改后新的镜像名称)</li>
</ul>
<pre><code>docker commit -m &quot;add hello.c&quot; -a &quot;AlexLin&quot; 04727fbe69a3 alexubuntu</code></pre>
<ul>
<li>查看新镜像信息</li>
</ul>
<pre><code>✘ alex@Alex  ~  docker images alexubuntu
REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
alexubuntu          latest              780ea1933dc9        About a minute ago   163.5 MB</code></pre>
<ul>
<li> 导出最新的镜像(<strong>save 方式</strong>)</li>
</ul>
<pre><code>docker save -o alexubuntu.tar alexubuntu</code></pre>
<ul>
<li>导入镜像(<strong>load 方式</strong>)</li>
</ul>
<pre><code>docker load&lt;alexubuntu.tar</code></pre>
<ul>
<li>查看</li>
</ul>
<pre><code>alex@Alex  ~  docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
alexubuntu          latest              780ea1933dc9        3 minutes ago       163.5 MB
ubuntu              v1                  41269ec1cc87        23 minutes ago      163.5 MB</code></pre>
<ul>
<li>使用 export 和 import 命令</li>
<li>选择要导出的镜像 CONTAINER ID</li>
</ul>
<pre><code>alex@Alex  ~  docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                         PORTS               NAMES
65cd9e63d321        ubuntu:v1           &quot;/bin/bash&quot;         11 minutes ago      Exited (0) 11 minutes ago                          grave_panini
04727fbe69a3        ubuntu:v1           &quot;/bin/bash&quot;         About an hour ago   Up About an hour                                   elated_poincare
591034c72b82        ubuntu              &quot;/bin/bash&quot;         3 hours ago         Exited (0) About an hour ago                       nauseous_tesla</code></pre>
<ul>
<li> 导出镜像</li>
</ul>
<pre><code>alex@Alex  ~  docker export 65cd9e63d321&gt;newubuntu.tar
alex@Alex  ~  ll newubuntu.tar
-rw-r--r--  1 alex  staff   128M 10  7 22:09 newubuntu.tar</code></pre>
<ul>
<li>导入镜像(<strong>newubuntu:为镜像名称</strong>)</li>
</ul>
<pre><code>✘ alex@Alex  ~  cat newubuntu.tar | docker import - newubuntu
sha256:ecc200f7c4c3a6b1249708c46a627e54dc81ad5e3370ce9d57ad3b413e73e6c0</code></pre>
<ul>
<li>查看</li>
</ul>
<pre><code>✘ alex@Alex  ~  docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
newubuntu           latest              ecc200f7c4c3        20 seconds ago      129.9 MB</code></pre>
<h3 id="Docker中export-save-的区别"><a href="#Docker中export-save-的区别" class="headerlink" title="Docker中export save 的区别"></a>Docker中export save 的区别</h3><p><strong>export :</strong> 是基于当前容器的最新状态，导出来的一个镜像，不会保留历史版本信息，所以体积会比较轻；<br><strong>save :</strong> 是针对镜像images,导出来的，会把镜像的历史也一致导入到新的镜像中，可以回滚以前的配置 ,所以体积会比较大;</p>
<h2 id="Dockerfile-制作镜像"><a href="#Dockerfile-制作镜像" class="headerlink" title="Dockerfile 制作镜像"></a>Dockerfile 制作镜像</h2><hr>
<blockquote>
<p>dockerfile 制作镜像是更标准的方式</p>
</blockquote>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><hr>
<p>docker commit</p>
<pre><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code></pre>
<p><strong>REPOSITORY :</strong> 不支持大写字母，不然会出现以下错误</p>
<pre><code>alex@Alex  ~  docker commit -m &quot;add hello.c&quot; -a &quot;AlexLin&quot; 04727fbe69a3 AlexUbuntu
invalid reference format</code></pre>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之CoreDump</title>
    <url>/2017/06/06/7ad3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Core-Dump-定位"><a href="#Core-Dump-定位" class="headerlink" title="Core Dump 定位"></a>Core Dump 定位</h2><hr>
<h3 id="打开CoreDump-功能"><a href="#打开CoreDump-功能" class="headerlink" title="打开CoreDump 功能"></a>打开CoreDump 功能</h3><ul>
<li>在终端中输入命令 ulimit -c ，输出的结果为 0，说明默认是关闭 core dump 的，即当程序异常终止时，也不会生成 core dump 文件。</li>
<li>我们可以使用命令 ulimit -c unlimited 来开启 core dump 功能，并且不限制 core dump 文件的大小； 如果需要限制文件的大小，将 unlimited 改成你想生成 core 文件最大的大小，注意单位为 blocks（KB）。</li>
<li>用上面命令只会对当前的终端环境有效，如果想需要永久生效，可以修改文件 /etc/security/limits.conf<br>文件，关于此文件的设置参看 <strong><a href="http://manpages.ubuntu.com/manpages/hardy/man5/limits.conf.5.html">这里</a></strong> 。增加一行:</li>
</ul>
<a id="more"></a>

<pre class=" language-sh"><code class="language-sh"># /etc/security/limits.conf
#
#Each line describes a limit for a user in the form:
#
#<domain>   <type>   <item>   <value>
  *          soft     core   unlimited</code></pre>
<h3 id="修改-core-文件保存的路径"><a href="#修改-core-文件保存的路径" class="headerlink" title="修改 core 文件保存的路径"></a><strong>修改 core 文件保存的路径</strong></h3><p>默认生成的 core 文件保存在可执行文件所在的目录下，文件名就为 core。<br>通过修改 /proc/sys/kernel/core_uses_pid 文件可以让生成 core 文件名是否自动加上 pid 号。<br>例如 echo 1 &gt; /proc/sys/kernel/core_uses_pid，生成的 core 文件名将会变成 core.pid，其中 pid 表示该进程的 PID。<br>还可以通过修改 /proc/sys/kernel/core_pattern来控制生成 core 文件保存的位置以及文件名格式。例如可以用 echo “/tmp/corefile-%e-%p-%t” &gt; /proc/sys/kernel/core_pattern 设置生成的 core 文件保存在 “/tmp/corefile” 目录下，文件名格式为 “core-命令名-pid-时间戳”。**<a href="http://man7.org/linux/man-pages/man5/core.5.html">这里</a>** 有更多详细的说明！</p>
<h3 id="实用GDB-定位Core"><a href="#实用GDB-定位Core" class="headerlink" title="实用GDB 定位Core"></a>实用GDB 定位Core</h3><ul>
<li>用gcc -g 编译生成带调试信息文件:</li>
</ul>
<pre class=" language-sh"><code class="language-sh">gcc -g demo.c  -o demo</code></pre>
<ul>
<li>运行程序，产生core 文件:</li>
</ul>
<pre class=" language-sh"><code class="language-sh">./demo</code></pre>
<ul>
<li>实用GDB 调试:</li>
</ul>
<pre class=" language-sh"><code class="language-sh">gdb demo core</code></pre>
<h3 id="实际例子如下"><a href="#实际例子如下" class="headerlink" title="实际例子如下"></a>实际例子如下</h3><pre class=" language-C"><code class="language-C">#include <stdarg.h>
#include <stdio.h>
#include <string.h>
// void demoFun( char *start,... )
// &#123;
//     va_list arg_ptr;
//     char *value =NULL;
//     char *valueOne=NULL;
//     value = start;

//     va_start(arg_ptr, start );
//     do&#123;
//         printf("value :%s len=%d \n", value,strlen(value) );
//         valueOne = value;
//         value=va_arg(arg_ptr, int);
//     &#125;while( value!=NULL);
//     va_end(arg_ptr);
//     printf( "%s %d value=%s\n",__FUNCTION__,__LINE__,valueOne );
//     return;
// &#125;

void printfData( int *pData )
&#123;
    *pData = 100;
&#125;
void main( void )
&#123;
    int *null_ptr = NULL;
    printfData( null_ptr );

    return ;
&#125;</code></pre>
<p>运行步骤如下</p>
<pre class=" language-sh"><code class="language-sh">alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ gcc -g demo.c  -o demo
alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ ./demo
Segmentation fault (core dumped)
alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ gdb demo core
GNU gdb (Ubuntu/Linaro 7.4-2012.04-0ubuntu2.1) 7.4-2012.04
Copyright (C) 2012 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "i686-linux-gnu".
For bug reporting instructions, please see:
<http://bugs.launchpad.net/gdb-linaro/>...
Reading symbols from /mnt/hgfs/gagent/working/demo/demo...done.

warning: core file may not match specified executable file.
[New LWP 8867]

warning: Can't read pathname for load map: Input/output error.
Core was generated by `./demo.c'.
Program terminated with signal 11, Segmentation fault.
#0  0x080483ba in printfData (pData=0x0) at demo.c:24
24      *pData = 100;
(gdb) where   #----------------->显示在哪个函数发生错误，以及在哪个地方调用了该函数
#0  0x080483ba in printfData (pData=0x0) at demo.c:24
#1  0x080483da in main () at demo.c:29
(gdb) quit    #----------------->退出gdb</code></pre>
<h3 id="GDB-断点（BreakPoint）："><a href="#GDB-断点（BreakPoint）：" class="headerlink" title="GDB 断点（BreakPoint）："></a>GDB 断点（BreakPoint）：</h3><p>在代码的指定位置中断，这个是我们用得最多的一种。设置断点的命令是break，它通常有如下方式：</p>
<pre><code>break &lt;function&gt;    在进入指定函数时停住
break &lt;linenum&gt;    在指定行号停住。
break +/-offset    在当前行号的前面或后面的offset行停住。offiset为自然数。
break filename:linenum    在源文件filename的linenum行处停住。
break ... if &lt;condition&gt;    ...可以是上述的参数，condition表示条件，在条件成立时停住。比如在循环境体中，可以设置break if i=100，表示当i为100时停住程序。</code></pre>
<p>可以通过info breakpoints [n]命令查看当前断点信息。此外，还有如下几个配套的常用命令：</p>
<pre><code>delete    删除所有断点
delete breakpoint [n]    删除某个断点
disable breakpoint [n]    禁用某个断点
enable breakpoint [n]    使能某个断点</code></pre>
<h3 id="观察点（WatchPoint）："><a href="#观察点（WatchPoint）：" class="headerlink" title="观察点（WatchPoint）："></a>观察点（WatchPoint）：</h3><p>在变量读、写或变化时中断，这类方式常用来定位bug。</p>
<pre><code>watch &lt;expr&gt;    变量发生变化时中断
rwatch &lt;expr&gt;    变量被读时中断
awatch &lt;expr&gt;     变量值被读或被写时中断</code></pre>
<p>可以通过info watchpoints [n]命令查看当前观察点信息</p>
<h3 id="捕捉点（CatchPoint）："><a href="#捕捉点（CatchPoint）：" class="headerlink" title="捕捉点（CatchPoint）："></a>捕捉点（CatchPoint）：</h3><p>捕捉点用来补捉程序运行时的一些事件。如：载入共享库（动态链接库）、C++的异常等。通常也是用来定位bug。</p>
<p>捕捉点的命令格式是：catch <event>，event可以是下面的内容</p>
<pre><code>throw     C++抛出的异常时中断
catch     C++捕捉到的异常时中断
exec    调用系统调用exec时（只在某些操作系统下有用）
fork    调用系统调用fork时（只在某些操作系统下有用）
vfork    调用系统调用vfork时（只在某些操作系统下有用）
load 或 load &lt;libname&gt;     载入共享库时（只在某些操作系统下有用）
unload 或 unload &lt;libname&gt;    卸载共享库时（只在某些操作系统下有用）</code></pre>
<p>另外，还有一个tcatch <event>，功能类似，不过他只设置一次捕捉点，当程序停住以后，应点被自动删除。</p>
<p>捕捉点信息的查看方式和代码断点的命令是一样的，这里就不多介绍了。</p>
<h4 id="在特定线程中中断"><a href="#在特定线程中中断" class="headerlink" title="在特定线程中中断"></a>在特定线程中中断</h4><p>你可以定义你的断点是否在所有的线程上，或是在某个特定的线程。GDB很容易帮你完成这一工作。</p>
<pre><code>break &lt;linespec&gt; thread &lt;threadno&gt;
break &lt;linespec&gt; thread &lt;threadno&gt; if ...
linespec指定了断点设置在的源程序的行号。threadno指定了线程的ID，注意，这个ID是GDB分配的，你可以通过&quot;info threads&quot;命令来查看正在运行程序中的线程信息。如果你不指定thread &lt;threadno&gt;</code></pre>
<p>则表示你的断点设在所有线程上面。你还可以为某线程指定断点条件。如：<br>    <code>     (gdb) break frik.c:13 thread 28 if bartab &gt; lim    </code><br>当你的程序被GDB停住时，所有的运行线程都会被停住。这方便你你查看运行程序的总体情况。而在你恢复程序运行时，所有的线程也会被恢复运行。那怕是主进程在被单步调试时。</p>
<p>恢复程序运行和单步调试</p>
<h3 id="在gdb中，和调试步进相关的命令主要有如下几条："><a href="#在gdb中，和调试步进相关的命令主要有如下几条：" class="headerlink" title="在gdb中，和调试步进相关的命令主要有如下几条："></a>在gdb中，和调试步进相关的命令主要有如下几条：</h3><pre><code>continue    继续运行程序直到下一个断点（类似于VS里的F5）
next        逐过程步进，不会进入子函数（类似VS里的F10）
setp        逐语句步进，会进入子函数（类似VS里的F11）
until        运行至当前语句块结束
finish    运行至函数结束并跳出，并打印函数的返回值（类似VS的Shift+F11）</code></pre>
<p>PS：这些命令大部分可以简写为第一个字母，在日常使用过程中，往往只会输入第一个字符即可执行该命令，我标红的即是通常的使用方式。这几条命令使用非常频繁，并且可以带一些附加参数以实现高级功能，需要熟练掌握。</p>
<h2 id="Addr2Line"><a href="#Addr2Line" class="headerlink" title="Addr2Line"></a>Addr2Line</h2><blockquote>
<p>Addr2line 工具（它是标准的 GNU Binutils 中的一部分）是一个可以将指令的地址和可执行映像转换成文件名、函数名和源代码行数的工具。这种功能对于将跟踪地址转换成更有意义的内容来说简直是太棒了。</p>
</blockquote>
<h3 id="实战一"><a href="#实战一" class="headerlink" title="实战一"></a>实战一</h3><pre class=" language-C"><code class="language-C">#include <stdio.h>

int main()
&#123;
        int *p = NULL;
        *p = 0;

        printf("bad\n");
        return 0;
&#125;</code></pre>
<pre class=" language-shell"><code class="language-shell">alex@ubuntu:/media/psf/Home/myself/C$ gcc -g addr2line.c -o demo
alex@ubuntu:/media/psf/Home/myself/C$ ./demo
Segmentation fault
alex@ubuntu:/media/psf/Home/myself/C$ dmesg |grep demo
[ 2555.121891] demo[10553]: segfault at 0 ip 080483e9 sp bf9a7f60 error 6 in demo[8048000+1000]
alex@ubuntu:/media/psf/Home/myself/C$ addr2line
addr2line.c  bit.c        csv/         DS1302/      .DS_Store    hello.c      log/         printflog/
a.out        crc/         demo         DS1302.rar   gdb_test     list/        mac/         test.c
alex@ubuntu:/media/psf/Home/myself/C$ addr2line -e demo 080483e9
/media/psf/Home/myself/C/addr2line.c:6</code></pre>
<p><strong>解释:</strong></p>
<ol>
<li><code>gcc -o demo -g addr2line.c</code> 生成带有调试信息的可执行文件 demo</li>
<li><code>dmesg | grep demo</code> ：获得执行demo后的出错信息， 你可以将结果理解为日志， 其中的080483c9是一个地址， 正是这个地址出错了</li>
<li><code>addr2line -e demo 080483e9</code> ：将出错地址转换成源代码对应的行， 结果为6， 也就是说源代码第6行有问题。 一看， 果然是，万恶的*p=0;被揪出来了。</li>
</ol>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之Socket关键</title>
    <url>/2017/06/07/179d.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、Socket-属性设置函数"><a href="#一、Socket-属性设置函数" class="headerlink" title="一、Socket 属性设置函数"></a>一、Socket 属性设置函数</h2><pre class=" language-C"><code class="language-C">int getsockopt(int sockfd, int level, int optname,void *optval, socklen_t *optlen);
int setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen);</code></pre>
<p>解释:*<em>setsockopt(int sockfd, int level, int optname,const void <em>optval, socklen_t optlen)</em></em></p>
<a id="more"></a>
<ul>
<li><strong>sockfd(套接字):</strong> 指向一个打开的套接口描述字</li>
<li><strong>level(级别):</strong> 指定选项代码的类型</li>
<li><ul>
<li><strong>SOL_SOCKET:</strong> 基本套接口</li>
</ul>
</li>
<li><ul>
<li><strong>IPPROTO_IP:</strong> IPv4套接口</li>
</ul>
</li>
<li><ul>
<li><strong>IPPROTO_IPV6:</strong> IPv6套接口</li>
</ul>
</li>
<li><ul>
<li><strong>IPPROTO_TCP:</strong> TCP套接口</li>
</ul>
</li>
<li><strong>optname(选项名):</strong> 选项名称</li>
<li><strong>optval(选项值):</strong> 是一个指向变量的指针 类型：整形，套接口结构， 其他结构类型:linger{}, timeval{ }<br>该值有两种类型，分别是布尔型选项，允许或禁止一种特性；另一种是整形或结构选项。<br>允许一个布尔型选项，则将optval指向非零整形数；<br>禁止一个选项optval指向一个等于零的整形数。对于布尔型选项，optlen应等于sizeof(int)；<br>对其他选项，optval指向包含所需选项的整形数或结构，而optlen则为整形数或结构的长度。</li>
<li><strong>optlen(选项长度):</strong> optval 的大小</li>
</ul>
<h2 id="二、Socket-端口复用-SO-REUSEADDR"><a href="#二、Socket-端口复用-SO-REUSEADDR" class="headerlink" title="二、Socket 端口复用(SO_REUSEADDR)"></a>二、Socket 端口复用(SO_REUSEADDR)</h2><blockquote>
<p>一个网络应用程序只能绑定一个端口( 一个套接字只能绑定一个端口 )。</p>
</blockquote>
<ol>
<li><em>端口复用允许在一个应用程序可以把 n 个套接字绑在一个端口上而不出错。</em></li>
<li><em>端口复用真正的用处主要在于服务器编程：当服务器需要重启时，经常会碰到端口尚未完全关闭的情况，这时如果不设置端口复用，则无法完成绑定，因为端口还处于被别的套接口绑定的状态之中。</em></li>
</ol>
<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><blockquote>
<p><strong>SO_REUSEADDR可以用在以下四种情况下。 (摘自《Unix网络编程》卷一，即UNPv1)</strong></p>
</blockquote>
<ol>
<li>当有一个有相同本地地址和端口的socket1处于TIME_WAIT状态时，而你启动的程序的socket2要占用该地址和端口，你的程序就要用到该选项。</li>
<li>SO_REUSEADDR允许同一port上启动同一服务器的多个实例(多个进程)。但每个实例绑定的IP地址是不能相同的。在有多块网卡或用IP Alias技术的机器可以测试这种情况。</li>
<li>SO_REUSEADDR允许单个进程绑定相同的端口到多个socket上，但每个socket绑定的ip地址不同。这和2很相似，区别请看UNPv1。</li>
<li>SO_REUSEADDR允许完全相同的地址和端口的重复绑定。但这只用于UDP的多播，不用于TCP。</li>
</ol>
<h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><pre class=" language-C"><code class="language-C">int opt = 1;
// sockfd为需要端口复用的套接字
setsockopt(sockfd, SOL_SOCKET, SO_REUSEADDR, (const void *)&opt, sizeof(opt));</code></pre>
<h2 id="三、Socket-超时设置-SO-SNDTIMO-SO-RCVTIMEO"><a href="#三、Socket-超时设置-SO-SNDTIMO-SO-RCVTIMEO" class="headerlink" title="三、Socket 超时设置(SO_SNDTIMO/SO_RCVTIMEO)"></a>三、Socket 超时设置(SO_SNDTIMO/SO_RCVTIMEO)</h2><p><strong>SO_SNDTIMO :</strong> 用于设置发送和连接超时<br><strong>SO_RCVTIMEO:</strong> 用于设置接收超时<br><strong>例 子</strong></p>
<pre class=" language-C"><code class="language-C">//3s超时设置
struct timeval timeout = &#123;3, 0&#125;;
//socket设置发送超时
setsockopt(socket，SOL_SOCKET,SO_SNDTIMEO，(char *)&timeout,sizeof(struct timeval));

//socket设置接收超时
setsockopt(socket，SOL_SOCKET,SO_RCVTIMEO，(char *)&timeout,sizeof(struct timeval));

//socket设置连接超时
setsockopt(fd, SOL_SOCKET, SO_SNDTIMEO, &timeo, len);
addr.sin_family = AF_INET;
addr.sin_addr.s_addr = inet_addr(argv[1]);
addr.sin_port = htons(atoi(argv[2]));
if (connect(fd, (struct sockaddr*)&addr, sizeof(addr)) == -1) &#123;
    if (errno == EINPROGRESS) &#123;
            fprintf(stderr, "timeout/n");
            return -1;
    &#125;
    perror("connect");
    return 0;
&#125;</code></pre>
<h2 id="四、Socket-心跳设置-SO-KEEPALIVE"><a href="#四、Socket-心跳设置-SO-KEEPALIVE" class="headerlink" title="四、Socket 心跳设置(SO_KEEPALIVE)"></a>四、Socket 心跳设置(SO_KEEPALIVE)</h2><blockquote>
<p>在《UNIX网络编程第1卷》中也有详细的阐述：<br>SO_KEEPALIVE 保持连接检测对方主机是否崩溃，避免（服务器）永远阻塞于TCP连接的输入。设置该选项后，如果2小时内在此套接口的任一方向都没有数据交换，TCP就自 动给对方 发一个保持存活探测分节(keepalive probe)。这是一个对方必须响应的TCP分节.它会导致以下三种情况：对方接收一切正常：以期望的ACK响应。2小时后，TCP将发出另一个探测分 节。对方已崩溃且已重新启动：以RST响应。套接口的待处理错误被置为ECONNRESET，套接 口本身则被关闭。对方无任何响应：源自berkeley的TCP发送另外8个探测分节，相隔75秒一个，试图得到一个响应。在发出第一个探测分节11分钟 15秒后若仍无响应就放弃。套接口的待处理错误被置为ETIMEOUT，套接口本身则被关闭。如ICMP错误是“host unreachable(主机不可达)”，说明对方主机并没有崩溃，但是不可达，这种情况下待处理错误被置为 EHOSTUNREACH。</p>
</blockquote>
<p><strong>简单来说</strong><br><em>TCP_KEEPALIVE</em>选项只是一个开关，Linux中默认的Keepalive的选项如下：</p>
<pre class=" language-shell"><code class="language-shell">$sudo sysctl -a | grep keepalive
net.ipv4.tcp_keepalive_time = 7200
net.ipv4.tcp_keepalive_probes = 9
net.ipv4.tcp_keepalive_intvl = 75</code></pre>
<p>上文中的keepalive选项表示如果一个连接上7200s后没有任何数据发送，则设置了这个选项的本端向对端发送keepalive保活报文，它会有如下三种结果：</p>
<ul>
<li>对端回复ACK。则本端TCP认为该连接依然存活。继续等7200s后再发送keepalive报文。</li>
<li>对端回复RESET。说明对端进程已经重启，本端的应用程序应该关闭该连接。</li>
<li>没有对端的任何回复。则本端做重试，如果重试9次（前后重试间隔为75秒）仍然不可达，则向应用程序返回错误信息，ETIMEOUT（无任何应答）或EHOST</li>
</ul>
<h3 id="开启keepalive机制"><a href="#开启keepalive机制" class="headerlink" title="开启keepalive机制"></a>开启keepalive机制</h3><pre><code>keepAlive = 1;
Setsockopt(listenfd, SOL_SOCKET, SO_KEEPALIVE, (void*)&amp;keepAlive, sizeof(keepAlive));</code></pre>
<h3 id="修改过keepalive-时间"><a href="#修改过keepalive-时间" class="headerlink" title="修改过keepalive 时间"></a>修改过keepalive 时间</h3><p>如果我们不能接受如此之长的等待时间，从TCP-Keepalive-HOWTO上可以知道一共有两种方式可以设置，<br>一种是修改内核关于网络方面的 配置参数；<br>另外一种就是SOL_TCP字段的TCP_KEEPIDLE， TCP_KEEPINTVL， TCP_KEEPCNT三个选项。</p>
<ul>
<li>TCP_KEEPIDLE : 多长时间不活跃，就开始发探测包</li>
<li>TCP_KEEPINTVL: 两个探测包之间的间隔</li>
<li>TCP_KEEPCNT  : 发多少次探测包后没响应认为是断开</li>
</ul>
<p><strong>例子</strong></p>
<pre class=" language-C"><code class="language-C">//连接上之后100s内没发送数据，则发探测包，每个探测包间隔10s,连续10次没收到响应认为断开
int                 keepIdle = 100;
int                 keepInterval = 10;
int                 keepCount = 10;
Setsockopt(listenfd, SOL_TCP, TCP_KEEPIDLE, (void *)&keepIdle, sizeof(keepIdle));
Setsockopt(listenfd, SOL_TCP, TCP_KEEPINTVL, (void *)&keepInterval, sizeof(keepInterval));
Setsockopt(listenfd, SOL_TCP, TCP_KEEPCNT, (void *)&keepCount, sizeof(keepCount));</code></pre>
<h2 id="五、Socket-其他选项名"><a href="#五、Socket-其他选项名" class="headerlink" title="五、Socket 其他选项名"></a>五、Socket 其他选项名</h2><ul>
<li>SO_RCVBUF             : int型  设置接收缓冲区的保留大小。</li>
<li>SO_SNDBUF             : int型  设置发送缓冲区的保留大小。</li>
<li>TCP_NODELAY           : bool型 设置是否开启Nagle算法。</li>
<li>SO_EXCLUSIVEADDRUSE   : bool型 同一个端口不能别的进程使用.</li>
</ul>
<h2 id="六、常识"><a href="#六、常识" class="headerlink" title="六、常识"></a>六、常识</h2><ul>
<li>每个套接口都有一个发送缓冲区和一个接收缓冲区。</li>
<li>接收缓冲区被TCP和UDP用来将接收到的数据一直保存到由应用进程来读。</li>
<li>TCP：TCP通告另一端的窗口大小。</li>
<li>TCP套接口接收缓冲区不可能溢出，因为对方不允许发出超过所通告窗口大小的数据。这就是TCP的流量控制，如果对方无视窗口大小而发出了超过宙口大小的数据，则接 收方TCP将丢弃它。</li>
<li>UDP：当接收到的数据报装不进套接口接收缓冲区时，此数据报就被丢弃。UDP是没有 流量控制的；快的发送者可以很容易地就淹没慢的接收者，导致接收方的UDP丢弃数据报。</li>
</ul>
<p>每个套接口都有一个接收低潮限度和一个发送低潮限度。<br>它们是函数selectt使用的，接收低潮限度是让select返回“可读”而在套接口接收缓冲区中必须有的数据总量。 对于一个TCP或UDP套接口，此值缺省为1。发送低潮限度是让select返回“可写” 而在套接口发送缓冲区中必须有的可用空间。对于TCP套接口，此值常缺省为2048。 对于UDP使用低潮限度， 由于其发送缓冲区中可用空间的字节数是从不变化的，只要 UDP套接口发送缓冲区大小大于套接口的低潮限度，这样的UDP套接口就总是可写的。 UDP没有发送缓冲区，只有发送缓冲区的大小。</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之errno表</title>
    <url>/2017/06/07/d8f4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="errno-错误表"><a href="#errno-错误表" class="headerlink" title="errno 错误表"></a>errno 错误表</h1><blockquote>
<p>errno 是记录系统的最后一次<a href="http://baike.baidu.com/item/%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81">错误代码</a>。代码是一个int型的值，在errno.h中定义</p>
</blockquote>
<p><strong>注意：</strong>只有当一个<a href="http://baike.baidu.com/item/%E5%BA%93%E5%87%BD%E6%95%B0">库函数</a>失败时，errno才会被设置。当函数成功运行时，errno的值不会被修改。这意味着我们不能通过测试errno的值来判断是否有错误存在。反之，只有当被调用的函数提示有错误发生时检查errno的值才有意义。</p>
<a id="more"></a>
<h2 id="错误表"><a href="#错误表" class="headerlink" title="错误表"></a>错误表</h2><table>
<thead>
<tr>
<th align="center">错误数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">errno0</td>
<td>Success</td>
</tr>
<tr>
<td align="center">errno1</td>
<td>Operation not permitted</td>
</tr>
<tr>
<td align="center">errno2</td>
<td>No such file or directory</td>
</tr>
<tr>
<td align="center">errno3</td>
<td>No such process</td>
</tr>
<tr>
<td align="center">errno4</td>
<td>Interrupted system call</td>
</tr>
<tr>
<td align="center">errno5</td>
<td>Input/output error</td>
</tr>
<tr>
<td align="center">errno6</td>
<td>No such device or address</td>
</tr>
<tr>
<td align="center">errno7</td>
<td>Argument list too long</td>
</tr>
<tr>
<td align="center">errno8</td>
<td>Exec format error</td>
</tr>
<tr>
<td align="center">errno9</td>
<td>Bad file descriptor</td>
</tr>
<tr>
<td align="center">errno10</td>
<td>No child processe</td>
</tr>
<tr>
<td align="center">errno11</td>
<td>Resource temporarily unavailable</td>
</tr>
<tr>
<td align="center">errno12</td>
<td>Cannot allocate memory</td>
</tr>
<tr>
<td align="center">errno13</td>
<td>Permission denied</td>
</tr>
<tr>
<td align="center">errno14</td>
<td>Bad address</td>
</tr>
<tr>
<td align="center">errno15</td>
<td>Block device required</td>
</tr>
<tr>
<td align="center">errno16</td>
<td>Device or resource busy</td>
</tr>
<tr>
<td align="center">errno17</td>
<td>File exists</td>
</tr>
<tr>
<td align="center">errno18</td>
<td>Invalid cross-device link</td>
</tr>
<tr>
<td align="center">errno19</td>
<td>No such device</td>
</tr>
<tr>
<td align="center">errno20</td>
<td>Not a directory</td>
</tr>
<tr>
<td align="center">errno21</td>
<td>Is a directory</td>
</tr>
<tr>
<td align="center">errno22</td>
<td>Invalid argument</td>
</tr>
<tr>
<td align="center">errno23</td>
<td>Too many open files in system</td>
</tr>
<tr>
<td align="center">errno24</td>
<td>Too many open files</td>
</tr>
<tr>
<td align="center">errno25</td>
<td>Inappropriate ioctl for device</td>
</tr>
<tr>
<td align="center">errno26</td>
<td>Text file busy</td>
</tr>
<tr>
<td align="center">errno27</td>
<td>File too large</td>
</tr>
<tr>
<td align="center">errno28</td>
<td>No space left on device</td>
</tr>
<tr>
<td align="center">errno29</td>
<td>Illegal seek</td>
</tr>
<tr>
<td align="center">errno30</td>
<td>Read-only file system</td>
</tr>
<tr>
<td align="center">errno31</td>
<td>Too many links</td>
</tr>
<tr>
<td align="center">errno32</td>
<td>Broken pipe</td>
</tr>
<tr>
<td align="center">errno33</td>
<td>Numerical argument out of domain</td>
</tr>
<tr>
<td align="center">errno34</td>
<td>Numerical result out of range</td>
</tr>
<tr>
<td align="center">errno35</td>
<td>Resource deadlock avoided</td>
</tr>
<tr>
<td align="center">errno36</td>
<td>File name too long</td>
</tr>
<tr>
<td align="center">errno37</td>
<td>No locks available</td>
</tr>
<tr>
<td align="center">errno38</td>
<td>Function not implemented</td>
</tr>
<tr>
<td align="center">errno39</td>
<td>Directory not empty</td>
</tr>
<tr>
<td align="center">errno40</td>
<td>Too many levels of symbolic links</td>
</tr>
<tr>
<td align="center">errno41</td>
<td>Unknown error 41</td>
</tr>
<tr>
<td align="center">errno42</td>
<td>No message of desired type</td>
</tr>
<tr>
<td align="center">errno43</td>
<td>Identifier removed</td>
</tr>
<tr>
<td align="center">errno44</td>
<td>Channel number out of range</td>
</tr>
<tr>
<td align="center">errno45</td>
<td>Level 2 not synchronized</td>
</tr>
<tr>
<td align="center">errno46</td>
<td>Level 3 halted</td>
</tr>
<tr>
<td align="center">errno47</td>
<td>Level 3 reset</td>
</tr>
<tr>
<td align="center">errno48</td>
<td>Link number out of range</td>
</tr>
<tr>
<td align="center">errno49</td>
<td>Protocol driver not attached</td>
</tr>
<tr>
<td align="center">errno50</td>
<td>No CSI structure available</td>
</tr>
<tr>
<td align="center">errno51</td>
<td>Level 2 halted</td>
</tr>
<tr>
<td align="center">errno52</td>
<td>Invalid exchange</td>
</tr>
<tr>
<td align="center">errno53</td>
<td>Invalid request descriptor</td>
</tr>
<tr>
<td align="center">errno54</td>
<td>Exchange full</td>
</tr>
<tr>
<td align="center">errno55</td>
<td>No anode</td>
</tr>
<tr>
<td align="center">errno56</td>
<td>Invalid request code</td>
</tr>
<tr>
<td align="center">errno57</td>
<td>Invalid slot</td>
</tr>
<tr>
<td align="center">errno58</td>
<td>Unknown error 58</td>
</tr>
<tr>
<td align="center">errno59</td>
<td>Bad font file format</td>
</tr>
<tr>
<td align="center">errno60</td>
<td>Device not a stream</td>
</tr>
<tr>
<td align="center">errno61</td>
<td>No data available</td>
</tr>
<tr>
<td align="center">errno62</td>
<td>Timer expired</td>
</tr>
<tr>
<td align="center">errno63</td>
<td>Out of streams resources</td>
</tr>
<tr>
<td align="center">errno64</td>
<td>Machine is not on the network</td>
</tr>
<tr>
<td align="center">errno65</td>
<td>Package not installed</td>
</tr>
<tr>
<td align="center">errno66</td>
<td>Object is remote</td>
</tr>
<tr>
<td align="center">errno67</td>
<td>Link has been severed</td>
</tr>
<tr>
<td align="center">errno68</td>
<td>Advertise error</td>
</tr>
<tr>
<td align="center">errno69</td>
<td>Srmount error</td>
</tr>
<tr>
<td align="center">errno70</td>
<td>Communication error on send</td>
</tr>
<tr>
<td align="center">errno71</td>
<td>Protocol error</td>
</tr>
<tr>
<td align="center">errno72</td>
<td>Multihop attempted</td>
</tr>
<tr>
<td align="center">errno73</td>
<td>RFS specific error</td>
</tr>
<tr>
<td align="center">errno74</td>
<td>Bad message</td>
</tr>
<tr>
<td align="center">errno75</td>
<td>Value too large for defined datatype</td>
</tr>
<tr>
<td align="center">errno76</td>
<td>Name not unique on network</td>
</tr>
<tr>
<td align="center">errno77</td>
<td>File descriptor in bad state</td>
</tr>
<tr>
<td align="center">errno78</td>
<td>Remote address changed</td>
</tr>
<tr>
<td align="center">errno79</td>
<td>Can not access a needed sharedlibrary</td>
</tr>
<tr>
<td align="center">errno80</td>
<td>Accessing a corrupted sharedlibrary</td>
</tr>
<tr>
<td align="center">errno81</td>
<td>.lib section in a.out corrupted</td>
</tr>
<tr>
<td align="center">errno82</td>
<td>Attempting to link in too manyshared libraries</td>
</tr>
<tr>
<td align="center">errno83</td>
<td>Cannot exec a shared librarydirectly</td>
</tr>
<tr>
<td align="center">errno84</td>
<td>Invalid or incomplete multibyte orwide character</td>
</tr>
<tr>
<td align="center">errno85</td>
<td>Interrupted system call should berestarted</td>
</tr>
<tr>
<td align="center">errno86</td>
<td>Streams pipe error</td>
</tr>
<tr>
<td align="center">errno87</td>
<td>Too many users</td>
</tr>
<tr>
<td align="center">errno88</td>
<td>Socket operation on non-socket</td>
</tr>
<tr>
<td align="center">errno89</td>
<td>Destinationaddress required</td>
</tr>
<tr>
<td align="center">errno90</td>
<td>Message too long</td>
</tr>
<tr>
<td align="center">errno91</td>
<td>Protocol wrong type for socket</td>
</tr>
<tr>
<td align="center">errno92</td>
<td>Protocol not available</td>
</tr>
<tr>
<td align="center">errno93</td>
<td>Protocol not supported</td>
</tr>
<tr>
<td align="center">errno94</td>
<td>Socket type not supported</td>
</tr>
<tr>
<td align="center">errno95</td>
<td>Operation not supported</td>
</tr>
<tr>
<td align="center">errno96</td>
<td>Protocol family not supported</td>
</tr>
<tr>
<td align="center">errno97</td>
<td>Address family not supported byprotocol</td>
</tr>
<tr>
<td align="center">errno98</td>
<td>Address already in use</td>
</tr>
<tr>
<td align="center">errno99</td>
<td>Cannot assign requested address</td>
</tr>
<tr>
<td align="center">errno100</td>
<td>Network is down</td>
</tr>
<tr>
<td align="center">errno101</td>
<td>Network is unreachable</td>
</tr>
<tr>
<td align="center">errno102</td>
<td>Network dropped connection onreset</td>
</tr>
<tr>
<td align="center">errno103</td>
<td>Software caused connection abort</td>
</tr>
<tr>
<td align="center">errno104</td>
<td>Connection reset by peer</td>
</tr>
<tr>
<td align="center">errno105</td>
<td>No buffer space available</td>
</tr>
<tr>
<td align="center">errno106</td>
<td>Transport endpoint is alreadyconnected</td>
</tr>
<tr>
<td align="center">errno107</td>
<td>Transport endpoint is notconnected</td>
</tr>
<tr>
<td align="center">errno108</td>
<td>Cannot send after transportendpoint shutdown</td>
</tr>
<tr>
<td align="center">errno109</td>
<td>Too many references: cannot splice</td>
</tr>
<tr>
<td align="center">errno110</td>
<td>Connection timed out</td>
</tr>
<tr>
<td align="center">errno111</td>
<td>Connection refused</td>
</tr>
<tr>
<td align="center">errno112</td>
<td>Host is down</td>
</tr>
<tr>
<td align="center">errno113</td>
<td>No route to host</td>
</tr>
<tr>
<td align="center">errno114</td>
<td>Operation already in progress</td>
</tr>
<tr>
<td align="center">errno115</td>
<td>Operation now in progress</td>
</tr>
<tr>
<td align="center">errno116</td>
<td>Stale NFS file handle</td>
</tr>
<tr>
<td align="center">errno117</td>
<td>Structure needs cleaning</td>
</tr>
<tr>
<td align="center">errno118</td>
<td>Not a XENIX named type file</td>
</tr>
<tr>
<td align="center">errno119</td>
<td>No XENIX semaphores available</td>
</tr>
<tr>
<td align="center">errno120</td>
<td>Is a named type file</td>
</tr>
<tr>
<td align="center">errno121</td>
<td>Remote I/O error</td>
</tr>
<tr>
<td align="center">errno122</td>
<td>Disk quota exceeded</td>
</tr>
<tr>
<td align="center">errno123</td>
<td>No medium found</td>
</tr>
<tr>
<td align="center">errno124</td>
<td>Wrong medium type</td>
</tr>
<tr>
<td align="center">errno125</td>
<td>Operation canceled</td>
</tr>
<tr>
<td align="center">errno126</td>
<td>Required key not available</td>
</tr>
<tr>
<td align="center">errno127</td>
<td>Key has expired</td>
</tr>
<tr>
<td align="center">errno128</td>
<td>Key has been revoked</td>
</tr>
<tr>
<td align="center">errno129</td>
<td>Key was rejected by service</td>
</tr>
<tr>
<td align="center">errno130</td>
<td>Owner died</td>
</tr>
<tr>
<td align="center">errno131</td>
<td>State not recoverable</td>
</tr>
<tr>
<td align="center">errno132</td>
<td>Operation not possible due toRF-kill</td>
</tr>
<tr>
<td align="center">errno133</td>
<td>Unknown error 133</td>
</tr>
<tr>
<td align="center">errno134</td>
<td>Unknown error 134</td>
</tr>
<tr>
<td align="center">errno135</td>
<td>Unknown error 135</td>
</tr>
<tr>
<td align="center">errno136</td>
<td>Unknown error 136</td>
</tr>
<tr>
<td align="center">errno137</td>
<td>Unknown error 137</td>
</tr>
<tr>
<td align="center">errno138</td>
<td>Unknown error 138</td>
</tr>
<tr>
<td align="center">errno139</td>
<td>Unknown error 139</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Lua之 loadfile ,dofile, loadstring，require</title>
    <url>/2017/03/26/4bf8.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h3 id="loadfile——只编译，不运行"><a href="#loadfile——只编译，不运行" class="headerlink" title="loadfile——只编译，不运行"></a>loadfile——只编译，不运行</h3><p>    1.功能：载入文件但不执行代码块，对于相同的文件每次都会执行。只是编译代码，然后将编译结果作为一个函数返回<br>    2.调用：loadfile(“filename”)<br>    3.错误处理：不引发错误，只返回错误值但不处理错误,即返回nil和错误消息<br>    4.优点：调用一次之后可以多次调用返回的结果（即函数），<br>      即“多次调用”只需编译一次（注：这里的多次调用   是指多次调用返回的函数，而不是多次调用loadfile）</p>
<a id="more"></a>

<p><strong>dofile可如下定义：</strong></p>
<pre class=" language-lua"><code class="language-lua">    <span class="token keyword">function</span> <span class="token function">dofile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
    　　<span class="token keyword">local</span> f <span class="token operator">=</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">loadfile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">--调用loadfile（的返回结果）并可处理错误</span>
    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">end</span></code></pre>
<p><code>注：加载了程序块并没有定义其中的函数。在Lua中，函数定义是一种赋值操作，是在运行时才完成的操作。 例如：一个文件test.lua中有一个函数 function foo(x) print(x) end ,执行如下代码： 　　　f = loadfile(test.lua) --加载程序块，此时还没有定义函数foo 　　　f() --运行加载的程序块，此时就定义了函数foo      foo(&quot;hello lua&quot;) --&gt;hello lua --经过上面的步骤才能调用foo    </code></p>
<h3 id="dofile——执行"><a href="#dofile——执行" class="headerlink" title="dofile——执行"></a>dofile——执行</h3><pre><code>1.功能：载入文件并执行代码块，对于相同的文件每次都会执行
2.调用：dofile(&quot;filename&quot;)
3.错误处理：如果代码块中有错误则会引发错误
4.优点：对简单任务而言，非常便捷
5.缺点：每次载入文件时都会执行程序块</code></pre>
<p>    6.定位：内置操作，辅助函数</p>
<h3 id="require——我只执行一次"><a href="#require——我只执行一次" class="headerlink" title="require——我只执行一次"></a>require——我只执行一次</h3><pre><code>require和dofile有点像，不过又很不一样，require在第一次加载文件的时候，会执行里面的代码。
但是，第二次之后，再次加载文件，则不会重复执行了。换句话说，它会保存已经加载过的文件，不会重复加载。</code></pre>
<h3 id="loadstring"><a href="#loadstring" class="headerlink" title="loadstring"></a>loadstring</h3><pre><code>1.特点：功能强大，但开销大；
2.典型用处：执行外部代码，如：用户的输入
3.错误错里：代码中如果有语法错误就会返回nil
4.理解：f = loadstring(&quot;i = i+1&quot;)  可理解为（但不完全是）f = function()  i = i+1  end 
(注：这里的变量&quot;i&quot;是全局变量，不是指局部变量，如果没有定义全局变量&quot;i&quot;,调用f()则会报错！，即loadstring   不涉及词法域)</code></pre>
]]></content>
      <tags>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言之奇门遁甲术</title>
    <url>/2019/01/09/b2a3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="C语言位操作与计算"><a href="#C语言位操作与计算" class="headerlink" title="C语言位操作与计算"></a>C语言位操作与计算</h2><hr>
<blockquote>
<p><strong>C语言中位取反是~，逻辑取反是</strong></p>
</blockquote>
<h3 id="布尔位运算符"><a href="#布尔位运算符" class="headerlink" title="布尔位运算符"></a>布尔位运算符</h3><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">意义</th>
<th align="left">示例</th>
<th align="left">对于每个位位置的结果（1=设定，0=清除）</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;</td>
<td align="left">位 AND</td>
<td align="left">x&amp;y</td>
<td align="left">如果 x 和 y 都为 1，则得到 1；如果 x 或 y 任何一个为 0，或都为0，则得到 0</td>
</tr>
<tr>
<td align="left">I</td>
<td align="left">位 OR</td>
<td align="left">xIy</td>
<td align="left">如果 x 或 y 为 1，或都为 1，则得到 1；如果 x 和 y 都为 0，则得到 0</td>
</tr>
<tr>
<td align="left">^</td>
<td align="left">位 XOR</td>
<td align="left">x^y</td>
<td align="left">如果 x 或 y 的值不同，则得到 1；如果两个值相同，则得到 0</td>
</tr>
<tr>
<td align="left">~</td>
<td align="left">位 NOT</td>
<td align="left">（I的补码）~x</td>
<td align="left">如果 x 为 0，则得到 1，如果 x 是 1，则得到 0</td>
</tr>
</tbody></table>
<a id="more"></a>

<h3 id="对某一位操作"><a href="#对某一位操作" class="headerlink" title="对某一位操作"></a>对某一位操作</h3><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> set_bit(m,n)       m|=(1&lt;&lt;n)               </span><span class="token comment" spellcheck="true">//对某一位置一</span>
<span class="token macro property">#<span class="token directive keyword">define</span> reset_bit(m,n)     m &amp;= ~( 1&lt;&lt;n )          </span><span class="token comment" spellcheck="true">//对某一位置零</span>
<span class="token macro property">#<span class="token directive keyword">define</span> get_bit( m,n )     ((m) >> (n)&amp;1)          </span><span class="token comment" spellcheck="true">//获取的某一位的值</span>
<span class="token macro property">#<span class="token directive keyword">define</span> reversebit(m,n)    m^=(1&lt;&lt;n)               </span><span class="token comment" spellcheck="true">//对某一位取反</span></code></pre>
<h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><h4 id="1-如果乘上一个2的倍数数值，可以改用左移运算-Left-Shift-加速-300"><a href="#1-如果乘上一个2的倍数数值，可以改用左移运算-Left-Shift-加速-300" class="headerlink" title="1. 如果乘上一个2的倍数数值，可以改用左移运算(Left Shift) 加速 300%"></a>1. 如果乘上一个2的倍数数值，可以改用左移运算(Left Shift) 加速 300%</h4><pre class=" language-c"><code class="language-c">x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">64</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//改为:</span>
x <span class="token operator">=</span> x <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 == 2</span>
x <span class="token operator">=</span> x <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 64 == 2*2*2*2*2*2</span></code></pre>
<h4 id="2-如果除上一个-2-的倍数数值，可以改用右移运算加速-350"><a href="#2-如果除上一个-2-的倍数数值，可以改用右移运算加速-350" class="headerlink" title="2. 如果除上一个 2 的倍数数值，可以改用右移运算加速 350%"></a>2. 如果除上一个 2 的倍数数值，可以改用右移运算加速 350%</h4><pre class=" language-c"><code class="language-c">x <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">64</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//改为:</span>
x <span class="token operator">=</span> x <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2 == 2</span>
x <span class="token operator">=</span> x <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 64 == 2*2*2*2*2*2</span></code></pre>
<h4 id="3-数值转整数加速-10"><a href="#3-数值转整数加速-10" class="headerlink" title="3. 数值转整数加速 10%"></a>3. 数值转整数加速 10%</h4><pre class=" language-c"><code class="language-c">x <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">1.232</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">//改为:</span>
x <span class="token operator">=</span> <span class="token number">1.232</span> <span class="token operator">>></span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre>
<h4 id="4-交换两个数值-swap-，使用-XOR-可以加速20"><a href="#4-交换两个数值-swap-，使用-XOR-可以加速20" class="headerlink" title="4. 交换两个数值(swap)，使用 XOR 可以加速20%"></a>4. 交换两个数值(swap)，使用 XOR 可以加速20%</h4><pre class=" language-c"><code class="language-c">var t<span class="token punctuation">:</span><span class="token keyword">int</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>
a <span class="token operator">=</span> b<span class="token punctuation">;</span>
b <span class="token operator">=</span> t<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//equals:</span>
a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>
b <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>
a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span></code></pre>
<h4 id="5-正负号转换，可以加入-300"><a href="#5-正负号转换，可以加入-300" class="headerlink" title="5. 正负号转换，可以加入 300%"></a>5. 正负号转换，可以加入 300%</h4><pre class=" language-c"><code class="language-c">i <span class="token operator">=</span> <span class="token operator">-</span>i<span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//改为</span>
i <span class="token operator">=</span> <span class="token operator">~</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// NOT 写法</span>
<span class="token comment" spellcheck="true">//或</span>
i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">^</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// XOR 写法</span></code></pre>
<h4 id="6-取余数，如果除数为-2-的倍数，可利用-AND-运算加速-600"><a href="#6-取余数，如果除数为-2-的倍数，可利用-AND-运算加速-600" class="headerlink" title="6. 取余数，如果除数为 2 的倍数，可利用 AND 运算加速 600%"></a>6. 取余数，如果除数为 2 的倍数，可利用 AND 运算加速 600%</h4><pre class=" language-c"><code class="language-c">x <span class="token operator">=</span> <span class="token number">131</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//equals:</span>
x <span class="token operator">=</span> <span class="token number">131</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="7-利用-AND-运算检查整数是否为-2-的倍数，可以加速-600"><a href="#7-利用-AND-运算检查整数是否为-2-的倍数，可以加速-600" class="headerlink" title="7. 利用 AND 运算检查整数是否为 2 的倍数，可以加速 600%"></a>7. 利用 AND 运算检查整数是否为 2 的倍数，可以加速 600%</h4><pre class=" language-c"><code class="language-c">isEven <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//equals:</span>
isEven <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre>
<h4 id="8-加速-Math-abs-600-的写法1，写法2-又比写法1加速-20"><a href="#8-加速-Math-abs-600-的写法1，写法2-又比写法1加速-20" class="headerlink" title="8. 加速 Math.abs 600% 的写法1，写法2 又比写法1加速 20%"></a>8. 加速 Math.abs 600% 的写法1，写法2 又比写法1加速 20%</h4><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">//写法1</span>
i <span class="token operator">=</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>x <span class="token punctuation">:</span> x<span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//写法2</span>

i <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">^</span> <span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//写法3</span>

i<span class="token operator">=</span>x<span class="token operator">^</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>x<span class="token operator">>></span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="9-比较两数值相乘之后是否拥有相同的符号，加速-35"><a href="#9-比较两数值相乘之后是否拥有相同的符号，加速-35" class="headerlink" title="9. 比较两数值相乘之后是否拥有相同的符号，加速 35%"></a>9. 比较两数值相乘之后是否拥有相同的符号，加速 35%</h4><pre class=" language-c"><code class="language-c">eqSign <span class="token operator">=</span> a <span class="token operator">*</span> b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//equals:</span>
eqSign <span class="token operator">=</span> a <span class="token operator">^</span> b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDonw语法</title>
    <url>/2017/06/07/9530.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>MarkDonw语法</p>
<p>[TOC] 生成目录</p>
<h2 id="生成目录"><a href="#生成目录" class="headerlink" title="生成目录"></a>生成目录</h2><pre><code> [TOC]     生成目录</code></pre>
<h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><p>-+*可循环使用，但符号之后的空格不能少，符号之前的空格也不能少</p>
<pre><code>- 嵌套列表1
 + 嵌套列表2
 + 嵌套列表3
  - 嵌套列表4
   * 嵌套列表5
- 嵌套列表6</code></pre>
<ul>
<li>嵌套列表1</li>
</ul>
<ul>
<li>嵌套列表2</li>
<li>嵌套列表3</li>
</ul>
<ul>
<li>嵌套列表4</li>
</ul>
<ul>
<li>嵌套列表5</li>
</ul>
<ul>
<li>嵌套列表6</li>
</ul>
<h2 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h2><pre><code>![GitHub Mark](http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png &quot;GitHub Mark&quot;)</code></pre>
<p><img src="http://github.global.ssl.fastly.net/images/modules/logos_page/GitHub-Mark.png" alt="GitHub Mark" title="GitHub Mark"></p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><pre><code>\\ 反斜杠

\` 反引号

\* 星号

\_ 下划线

\&#123;\&#125; 大括号

\[\] 中括号

\(\) 小括号

\# 井号

\+ 加号

\- 减号

\. 英文句号

\! 感叹号</code></pre>
<p>\ 反斜杠</p>
<p>` 反引号</p>
<p>* 星号</p>
<p>_ 下划线</p>
<p>{} 大括号</p>
<p>[] 中括号</p>
<p>() 小括号</p>
<p># 井号</p>
<p>+ 加号</p>
<p>- 减号</p>
<p>. 英文句号</p>
<p>! 感叹号</p>
<h2 id="段落缩进（空格）"><a href="#段落缩进（空格）" class="headerlink" title="段落缩进（空格）"></a>段落缩进（空格）</h2><pre><code>半方大的空白&amp;ensp;或&amp;#8194;看，飞碟
全方大的空白&amp;emsp;或&amp;#8195;看，飞碟
不断行的空白格&amp;nbsp;或&amp;#160;看，飞碟
&amp;emsp;&amp;emsp;段落从此开始。</code></pre>
<h2 id="字体、字号、颜色"><a href="#字体、字号、颜色" class="headerlink" title="字体、字号、颜色"></a>字体、字号、颜色</h2><pre><code>&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;
&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;
&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;
&lt;font color=#0099ff size=12 face=&quot;黑体&quot;&gt;黑体&lt;/font&gt;
&lt;font color=#00ffff size=3&gt;null&lt;/font&gt;
&lt;font color=gray size=5&gt;gray&lt;/font&gt;</code></pre>
<h2 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h2><pre><code>快捷键 `Ctrl + D` 来收藏本页</code></pre>
<p>快捷键 <code>Ctrl + D</code> 来收藏本页</p>
<h2 id="数学公式支持"><a href="#数学公式支持" class="headerlink" title="数学公式支持"></a>数学公式支持</h2><p><code>next</code>主题为例子</p>
<ul>
<li>打开根目录下<code>_config.yml</code> , 添加<code>mathjax: true</code>;</li>
<li>在主题目录下<code>_config.yml</code> , 打开使能<pre><code># MathJax Support
mathjax:
enable: true
per_page: true
cdn: //cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML</code></pre>
</li>
<li>在需要数学公式的文章头部添加支持<code>mathjax: true</code><pre><code></code></pre>
</li>
</ul>
<hr>
<p>title: 基本算法之二叉树<br>date: 2018-03-25 15:06:11<br>tags: [算法,二叉树]<br>categories: [算法]<br>mathjax: true<br>Author: AlexLin</p>
<hr>
<pre><code>
#### $ 表示行内公式：

质能守恒方程可以用一个很简洁的方程式 `$E=mc^2$` 来表达：$E=mc^2$。

#### $$ 表示整行公式：

`$$\sum_&#123;i=1&#125;^n a_i=0$$`
$$\sum_&#123;i=1&#125;^n a_i=0$$

`$$f(x_1,x_2,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2$$`
$$f(x_1,x_2,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2$$
`$$\cos 2\theta = \cos^2 \theta - \sin^2 \theta = 2 \cos^2 \theta - 1$$`
$$\cos 2\theta = \cos^2 \theta - \sin^2 \theta = 2 \cos^2 \theta - 1$$
</code></pre>
<p>$$ i\hbar\frac{\partial \psi}{\partial t}= \frac{-\hbar^2}{2m}\left(\frac{\partial^2}{\partial x^2}+ \frac{\partial^2}{\partial y^2}+ \frac{\partial^2}{\partial z^2}\right) \psi + V \psi.$$</p>
<p>```<br>$$ i\hbar\frac{\partial \psi}{\partial t}= \frac{-\hbar^2}{2m}\left(\frac{\partial^2}{\partial x^2}+ \frac{\partial^2}{\partial y^2}+ \frac{\partial^2}{\partial z^2}\right) \psi + V \psi.$$</p>
<p>更多语法:<a href="https://www.mathjax.org/">https://www.mathjax.org/</a>、<a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference</a></p>
<h2 id="Html-Color"><a href="#Html-Color" class="headerlink" title="Html Color"></a>Html Color</h2><p>[COLOR][1]</p>
<div align=center>
![color][2]
</div>
[1]: https://html-color-codes.info/
[2]: https://upload-images.jianshu.io/upload_images/1736256-b729fdf4393a7989.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240 (color)]]></content>
      <tags>
        <tag>工具</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>COAP系列-入门介绍</title>
    <url>/2017/10/18/fb1f.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p><a href="http://coap.technology/">http://coap.technology/</a><br>WiKi<br><a href="https://en.wikipedia.org/wiki/Constrained_Application_Protocol">https://en.wikipedia.org/wiki/Constrained_Application_Protocol</a><br>开源库<br><a href="https://github.com/miri64/libcoap">https://github.com/miri64/libcoap</a></p>
<h2 id="1-COAP-架构"><a href="#1-COAP-架构" class="headerlink" title="1. COAP 架构"></a>1. COAP 架构</h2><p>COAP运行于UDP协议之上,架构如下图</p>
<p> <img src="http://upload-images.jianshu.io/upload_images/1736256-55f00669c46bccfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="COAP 架构图"></p>
<a id="more"></a>

<h3 id="2-消息类型"><a href="#2-消息类型" class="headerlink" title="2. 消息类型"></a>2. 消息类型</h3><p>CoAP协议共有4中不同的消息类型。</p>
<ul>
<li>CON——需要被确认的请求，如果CON请求被发送，那么对方必须做出响应。</li>
<li>NON——不需要被确认的请求，如果NON请求被发送，那么对方不必做出回应。</li>
<li>ACK——应答消息，接受到CON消息的响应。</li>
<li>RST——复位消息，当接收者接受到的消息包含一个错误，接收者解析消息或者不再关心发送者发送的内容，那么复位消息将会被发送。</li>
</ul>
<h3 id="3-COAP-消息格式"><a href="#3-COAP-消息格式" class="headerlink" title="3. COAP 消息格式"></a>3. COAP 消息格式</h3><ul>
<li>一个COAP消息最小为4个字节；</li>
<li>CoAP协议总是以“头”的形式出现在负载之前，而负载和CoAP头之间使用单字节0xFF分离；</li>
<li>具体格式如下图<br><img src="http://upload-images.jianshu.io/upload_images/1736256-34c6ef619d17ae78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="COAP 消息格式"></li>
</ul>
<table>
<thead>
<tr>
<th align="left">字段</th>
<th align="left">长度</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ver</td>
<td align="left">2bit</td>
<td align="left">版本号</td>
</tr>
<tr>
<td align="left">Type</td>
<td align="left">2bit</td>
<td align="left">消息类型:CON/NON/ACK/RST</td>
</tr>
<tr>
<td align="left">TKL(TokenLength)</td>
<td align="left">4bit</td>
<td align="left">标识符长度CoAP协议中具有两种功能相似的标识符，一种为MessageID(报文编号)，一种为Token(标识符)。其中每个报文均包含消息编号，但是标识符对于报文来说是<strong>非必须</strong>的</td>
</tr>
<tr>
<td align="left">Code</td>
<td align="left">8bit</td>
<td align="left">功能码/响应码:前3位一部分，后5位一部分;为了方便描述它被写成了c.dd结构。其中0.XX表示CoAP请求的某种方法，而2.XX、4.XX或5.XX则表示CoAP响应的某种具体表现(具体Code见下面👇)。</td>
</tr>
<tr>
<td align="left">Message ID</td>
<td align="left">16bit</td>
<td align="left">报文编号,用于重复消息检测，匹配消息类型等</td>
</tr>
<tr>
<td align="left">Token</td>
<td align="left">nBit</td>
<td align="left">标识符具体内容，通过TKL指定Token长度</td>
</tr>
<tr>
<td align="left">Option</td>
<td align="left">nBit</td>
<td align="left">报文选项，通过报文选项可设定CoAP主机，CoAP URI，CoAP请求参数和负载媒体类型等等。</td>
</tr>
</tbody></table>
<h4 id="3-1-COAP-Code-字段"><a href="#3-1-COAP-Code-字段" class="headerlink" title="3.1 COAP Code 字段"></a>3.1 COAP Code 字段</h4><p>请求字段</p>
<ul>
<li>Req:0.xx</li>
</ul>
<hr>
<p>响应字段</p>
<ul>
<li>Success : 2.xx</li>
<li>Client Error : 4.xx</li>
<li>Server Error : 5.xx</li>
</ul>
<hr>
<h5 id="3-1-1-请求消息类型"><a href="#3-1-1-请求消息类型" class="headerlink" title="3.1.1 请求消息类型 "></a>3.1.1 请求消息类型 </h5><table>
<thead>
<tr>
<th align="left">Code码</th>
<th align="left">方法</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0.01</td>
<td align="left">GET</td>
<td align="left">用于获得某资源</td>
</tr>
<tr>
<td align="left">0.02</td>
<td align="left">POST</td>
<td align="left">用于创建某资源</td>
</tr>
<tr>
<td align="left">0.03</td>
<td align="left">PUT</td>
<td align="left">用于更新某资源</td>
</tr>
<tr>
<td align="left">0.04</td>
<td align="left">DELETE</td>
<td align="left">用于删除某资源</td>
</tr>
</tbody></table>
<h5 id="3-1-2-响应消息类型"><a href="#3-1-2-响应消息类型" class="headerlink" title="3.1.2 响应消息类型  "></a>3.1.2 响应消息类型  </h5><ul>
<li><strong>Success 2.xx</strong></li>
</ul>
<table>
<thead>
<tr>
<th align="left">Code码</th>
<th align="left">方法</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">2.01</td>
<td align="left">Created</td>
<td align="left">回复POST或者PUT。</td>
</tr>
<tr>
<td align="left">2.02</td>
<td align="left">Deleted</td>
<td align="left">回复DELETE，有些情况下的POST。</td>
</tr>
<tr>
<td align="left">2.03</td>
<td align="left">Valid</td>
<td align="left">表示响应是有效的所以，Response必须带ETag Option。</td>
</tr>
<tr>
<td align="left">2.04</td>
<td align="left">Changed</td>
<td align="left">回复POST和PUT。</td>
</tr>
<tr>
<td align="left">2.05</td>
<td align="left">Content</td>
<td align="left">回复GET。</td>
</tr>
</tbody></table>
<ul>
<li><strong>Client Error 4.xx</strong></li>
</ul>
<table>
<thead>
<tr>
<th align="left">Code码</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">4.00</td>
<td align="left">Bad Resuest.</td>
</tr>
<tr>
<td align="left">4.01</td>
<td align="left">Unauthorized</td>
</tr>
<tr>
<td align="left">4.02</td>
<td align="left">Bad Option</td>
</tr>
<tr>
<td align="left">4.03</td>
<td align="left">Forbidden</td>
</tr>
<tr>
<td align="left">4.04</td>
<td align="left">Not Found</td>
</tr>
<tr>
<td align="left">4.05</td>
<td align="left">Method Not Allowed</td>
</tr>
<tr>
<td align="left">4.06</td>
<td align="left">Not Acceptable</td>
</tr>
<tr>
<td align="left">4.12</td>
<td align="left">Precondition Failed</td>
</tr>
<tr>
<td align="left">4.13</td>
<td align="left">Request Entity Too Large</td>
</tr>
<tr>
<td align="left">4.15</td>
<td align="left">Unsupported Content-Format</td>
</tr>
</tbody></table>
<ul>
<li><strong>Server Error 5.xx</strong></li>
</ul>
<table>
<thead>
<tr>
<th align="left">Code码</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">5.00</td>
<td align="left">Internal Server Error</td>
</tr>
<tr>
<td align="left">5.01</td>
<td align="left">Not Implemented</td>
</tr>
<tr>
<td align="left">5.02</td>
<td align="left">Bad Gateway</td>
</tr>
<tr>
<td align="left">5.03</td>
<td align="left">Service Unavailable</td>
</tr>
<tr>
<td align="left">5.04</td>
<td align="left">Gateway Timeout</td>
</tr>
<tr>
<td align="left">5.05</td>
<td align="left">Proxying Not Supported</td>
</tr>
</tbody></table>
<h4 id="3-2-COAP-Option-字段"><a href="#3-2-COAP-Option-字段" class="headerlink" title="3.2 COAP Option 字段"></a>3.2 COAP Option 字段</h4><p>每个Optoin由以下三部分组成</p>
<ul>
<li><strong>OptionDelta :</strong> 表示Option的增量，当前的Option的具体编号等于之前所有Option Delta的总和。</li>
<li><strong>OptionLength :</strong>  表示Option Value的具体长度</li>
<li><strong>OptionValue :</strong> 表示Option具体内容</li>
</ul>
<p><strong>Opton的数据可以跟随多个，每个的格式都一致</strong><br><strong>例子:</strong></p>
<ul>
<li>第一个Option Delta=11，表示该Option表示Uri-Path(11)</li>
<li>第二个Option Delta=1，表示该Option=1+11，表示Content-Format(12)</li>
<li>第三个Option Delta=3，表示该Option=3+1+11，表示Uri-Query(15)<br>CoAP采用这样的方式表示多个Option，而每种Option都可以在HTTP协议中找到对应项。</li>
</ul>
<h5 id="3-2-1-Option-格式"><a href="#3-2-1-Option-格式" class="headerlink" title="3.2.1 Option 格式"></a>3.2.1 Option 格式</h5><p><img src="http://upload-images.jianshu.io/upload_images/1736256-de231b37e70545d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Option 格式图"></p>
<p>CoAP中所有的Option都采用编号的方式，这些Option及编号的定义如下图所示<br><img src="http://upload-images.jianshu.io/upload_images/1736256-2c26b5c2d652ef37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><strong>Option之中的各个字段的含义如下：</strong></p>
<p><strong>【Option Delta】</strong></p>
<ul>
<li>Option Delta：4-bit无符号整型。值0-12代表option delta。其它3个值作为特殊情况保留：</li>
<li>当值为<strong>13</strong>：有一个8-bit无符号整型（extended）跟随在第一个字节之后，本option的实际delta是这个8-bit值加13。</li>
<li>当值为<strong>14</strong>：有一个16-bit无符号整型（网络字节序）（extended）跟随在第一个字节之后，本option的实际delta是这个16-bit值加269。</li>
<li>当值为<strong>15</strong>：为payload标识符而保留。如果这个字段被设置为值15，但这个字节不是payload标识符，那么必须当作消息格式错误来处理。</li>
</ul>
<p><strong>【Option Length】</strong></p>
<ul>
<li>Option Length：4-bit无符号整数。值0-12代表这个option值的长度，单位是字节。其它3个值是特殊保留的：</li>
<li>当值为13：有一个8-bit无符号整型跟随在第一个字节之后，本option的实际长度是这个8-bit值加13。</li>
<li>当值为14：一个16-bit无符号整型（网络字节序）跟随在第一个字节之后，本option的实际长度是这个16-bit值加269。</li>
<li>当值为15：保留为将来使用。如果这个字段被设置为值15，必须当作消息格式错误来处理。</li>
</ul>
<p><strong>【Option value】</strong></p>
<ul>
<li>Option Value：共option Length个字节。option Value字段的长度和格式取决于具体的option，有可能定义变长的值。</li>
</ul>
<p><strong>【Option value的格式】</strong></p>
<ul>
<li>Empty：长度为0。</li>
<li>Opaque：一个（用户自定义的）字节序列。</li>
<li>Uint：一个非负的整数，以网络字节序表现，由option Length字段指定其长度。<br>option有可能指定字节数的范围。如果有选择的话，发送者应该用尽可能少的字节数表示这个整数，如省略开头为的0的字节。例如，数字0用空的option值来表示（0长度字节序列），数字1用一个单字节表示，MSB first（高位优先）下为0b00000001。接收端必须能够处理0开头的值。<br>实现注意：在一些高受限的、模板化的实现（比如由硬件实现）下，允许发送者使用固定长度的option。</li>
<li>String：Unicode字符串，使用UTF-8<a href="http://tools.ietf.org/pdf/rfc3629.pdf">[RFC3629]</a>编码，使用Net-Unicode格式<a href="http://tools.ietf.org/pdf/rfc5198">[RFC5198]</a>。</li>
</ul>
<p><strong>注意 :</strong> 在CoAP协议中，所有使用UTF-8编码的字符串可以不需要经过标准化转换而被直接使用，或者作为用户自定义的字节序列比较，除非该Unicode字符串是从CoAP协议之外的资源中引入的。注意，所有的ASCII（不作为特殊控制字符使用）字符都是合法的UTF-8 Net-Unicode字符串。</p>
<h3 id="4-COAP-观察者模式"><a href="#4-COAP-观察者模式" class="headerlink" title="4. COAP 观察者模式"></a>4. COAP 观察者模式</h3><hr>
<p>当你需要去监控某个传感器例如温度或湿度等。在这种情况下，CoAP客户端并不需要不停的查询CoAP服务器端的数据变化情况。<br>CoAP客户端可以发送一个观察请求到服务器端。从该时间点开始计算，服务器便会记住客户端的连接信息，一旦温度发生变化，服务器将会把新结果发送给客户端。<br>如果客户端不在希望获得温度检测结果，那么客户端将会发送一个RST复位请求，此时服务器便会清除与客户端的连接信息。</p>
<h3 id="5-CoAP块传输"><a href="#5-CoAP块传输" class="headerlink" title="5. CoAP块传输"></a>5. CoAP块传输</h3><hr>
<p>CoAP协议的特点是传输的内容小巧精简，但是在某些情况下不得不传输较大的数据。在这种情况下可以使用CoAP协议中的某个选项设定分块传输的大小，那么无论是服务器或客户端可完成分片和组装这两个动作。</p>
<h2 id="COAP-总结"><a href="#COAP-总结" class="headerlink" title="COAP 总结"></a>COAP 总结</h2><hr>
<h3 id="适合运行于小设备"><a href="#适合运行于小设备" class="headerlink" title="适合运行于小设备"></a>适合运行于小设备</h3><ul>
<li><strong>小设备：</strong>256KB Flash 32KB RAM 20MHz主频….的设备</li>
</ul>
<h3 id="特点总结"><a href="#特点总结" class="headerlink" title="特点总结"></a>特点总结</h3><ol>
<li>满足资源受限的网络需求。</li>
<li>无状态HTTP映射，可以通过HTTP代理实现访问CoAP资源，或者在CoAP智商构建HTTP接口。</li>
<li>使用UDP实现可靠IP单播和最大努力IP多播。</li>
<li>异步消息交换</li>
<li>很小的消息头载荷及解析复杂度。</li>
<li>支持URI和内容类型(Content-type).</li>
<li>支持代理和缓存.</li>
<li>内建资源发现.</li>
<li>可以使用DTLS作为安全加密层。</li>
<li>资源消耗低，所需RAM和ROM资源均小于10KB。</li>
<li>其双层(事务层，请求/响应层)处理方式可支持异步通信.</li>
<li>支持观察模式。</li>
<li>支持块传输</li>
</ol>
]]></content>
      <categories>
        <category>协议</category>
      </categories>
      <tags>
        <tag>COAP</tag>
        <tag>协议</tag>
      </tags>
  </entry>
  <entry>
    <title>ESP8266系列-连接OLED模块</title>
    <url>/2020/04/09/8529.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="OLED-屏幕介绍"><a href="#OLED-屏幕介绍" class="headerlink" title="OLED 屏幕介绍"></a>OLED 屏幕介绍</h2><ul>
<li>芯片型号 <a href="https://wenku.baidu.com/view/6d6497a53d1ec5da50e2524de518964bce84d233.html">SSD1306</a></li>
<li>分辨率 128*64</li>
<li>供电范围 直流 3.3-5v</li>
<li>体积 27<em>27</em>2mm</li>
<li>尺寸 <img src="/images/pasted-10.png" alt="upload successful"></li>
<li>SPI 4线接法 <img src="/images/pasted-11.png" alt="upload successful"></li>
<li>IIC 接法 <img src="/images/pasted-12.png" alt="upload successful"></li>
</ul>
<h3 id="OLED与ESP8266-4线SPI接线"><a href="#OLED与ESP8266-4线SPI接线" class="headerlink" title="OLED与ESP8266 4线SPI接线"></a>OLED与ESP8266 4线SPI接线</h3><table>
<thead>
<tr>
<th align="left">ESP8266</th>
<th align="left">OLED</th>
</tr>
</thead>
<tbody><tr>
<td align="left">IO_12</td>
<td align="left">DC</td>
</tr>
<tr>
<td align="left">IO_13</td>
<td align="left">DIN(MOSI)</td>
</tr>
<tr>
<td align="left">IO_14</td>
<td align="left">CLK</td>
</tr>
<tr>
<td align="left">IO_15</td>
<td align="left">RST</td>
</tr>
<tr>
<td align="left">GND</td>
<td align="left">CS</td>
</tr>
</tbody></table>
<h2 id="ESP8266-SPI"><a href="#ESP8266-SPI" class="headerlink" title="ESP8266 SPI"></a>ESP8266 SPI</h2><p><img src="/images/pasted-17.png" alt="upload successful"></p>
<h2 id="U8g2库"><a href="#U8g2库" class="headerlink" title="U8g2库"></a>U8g2库</h2><p><a href="https://github.com/olikraus/u8g2/wiki/u8g2reference">官方api说明</a></p>
<ul>
<li>u8g2_SetFontMode<br>```c<br>/*<br>set one of:<br>  U8G2_FONT_MODE_TRANSPARENT<br>  U8G2_FONT_MODE_SOLID<br>  U8G2_FONT_MODE_NONE<br>This has been changed for the new font procedures  </li>
</ul>
<p>*/<br>void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)</p>
<pre><code>**说明:**定义字形和字符串绘制函数是否写入背景色（模式0 / solid，is_transparent = 0）或不写入背景颜色（模式1 /透明，is_transparent = 1）。 默认模式为0（字符的背景颜色被覆盖）。

- u8g2_SetFontDirection</code></pre>
<p>void u8g2_SetFontDirection(u8g2_t *u8g2, uint8_t dir)</p>
<p>```</p>
<h2 id="取模软件"><a href="#取模软件" class="headerlink" title="取模软件"></a>取模软件</h2><ul>
<li><a href="https://tools.clz.me/">https://tools.clz.me/</a></li>
<li><a href="https://github.com/coloz/image-to-bitmap-array">https://github.com/coloz/image-to-bitmap-array</a></li>
</ul>
<h2 id="天气获取API"><a href="#天气获取API" class="headerlink" title="天气获取API"></a>天气获取API</h2><p><a href="http://wthrcdn.etouch.cn/WeatherApi?city=%E5%B9%BF%E5%B7%9E">http://wthrcdn.etouch.cn/WeatherApi?city=%E5%B9%BF%E5%B7%9E</a></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><ul>
<li><a href="https://www.jianshu.com/p/404907770c90">https://www.jianshu.com/p/404907770c90</a></li>
<li><a href="https://www.cnblogs.com/huan-huan/p/8528307.html">https://www.cnblogs.com/huan-huan/p/8528307.html</a></li>
<li><a href="https://mbb.eet-china.com/forum/topic/74077_1_1.html">https://mbb.eet-china.com/forum/topic/74077_1_1.html</a></li>
<li><a href="https://blog.csdn.net/dpjcn1990/article/details/92831760">https://blog.csdn.net/dpjcn1990/article/details/92831760</a></li>
<li><a href="https://blog.csdn.net/notMine/article/details/79317782">https://blog.csdn.net/notMine/article/details/79317782</a></li>
<li><a href="http://www.mculover666.cn/posts/3603126757/">http://www.mculover666.cn/posts/3603126757/</a>   (RT-Thread Oled)</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>PC小技巧</title>
    <url>/2017/07/01/56f1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Win7-开热点"><a href="#Win7-开热点" class="headerlink" title="Win7 开热点"></a>Win7 开热点</h2><ol>
<li>输入命令：<code>netsh wlan set hostednetwork mode=allow ssid=livdran2012 key=100100100</code> 。<br><code>mode:</code>是否启用虚拟WiFi网卡，改为disallow则为禁止。<br><code>ssid:</code>无线网名称，推荐最好用英文。（此处以livdran2012为例，可自由设置）<br><code>key:</code>无线网密码，限定八个以上字符。（此处以100100100为例，可自由设置）</li>
</ol>
<a id="more"></a>

<ol start="2">
<li>运行成功后，打开网络和共享中心，点击左侧更改适配器设置。</li>
<li>进入适配器设置就会发现多出了一个网卡为“Microsoft Virtual WiFi Miniport Adapter”的无线网络连接2。若没有，则尝试更新无线网卡驱动。<br>为方便起见，可将无线网络连接2重命名为**”VirtualWiFi”**。</li>
<li>在网络连接里， 右键单击已连接到Internet的网络连接，选择“属性”→“共享”，勾上“允许其他网络用户通过此计算机的Internet连接来连接(N)”并选择“虚拟WiFi”。<br>确定之后，提供共享的网卡图标旁会出现“共享的”字样，表示“宽带连接”已共享至**”VirtualWiFi”**<br><img src="http://static.zybuluo.com/AlexLin/7tftyoeqj79obckwcylz4ret/image.png" alt="网络共享"><br><img src="http://static.zybuluo.com/AlexLin/e0ca3mszpdbqmzp7vhvut012/image.png" alt="共享标志"></li>
<li>继续命令行输入:<code>netsh wlan start hostednetwork</code>，按回车键运行。<br>最后，虚拟WiFi的红叉消失，WiFi基站已组建好并启动，用支持WiFi的设备搜索到自己建立的无线网络（如例中livdran2012）,输入自己设置的密码（如例中100100100），即可共享上网了。</li>
</ol>
<h2 id="Win7-启动项设置"><a href="#Win7-启动项设置" class="headerlink" title="Win7 启动项设置"></a>Win7 启动项设置</h2><ol>
<li>在开始的搜索框里面输入 **<code>msconfig 命令</code>**，回车打开</li>
<li>在弹出来的窗口选<strong>有选择的启动</strong><br><img src="http://upload-images.jianshu.io/upload_images/1736256-39a2ce5363e6346e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动项"></li>
<li>要启动的打钩，不需要的不打钩<br><img src="http://upload-images.jianshu.io/upload_images/1736256-f35ab7cd8ddb24a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动项"></li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>PC工具</tag>
      </tags>
  </entry>
  <entry>
    <title>OneNet OTA 操作笔记</title>
    <url>/2020/09/15/91bc.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="OneNet-OTA-M5311-笔记"><a href="#OneNet-OTA-M5311-笔记" class="headerlink" title="OneNet OTA M5311 笔记"></a>OneNet OTA M5311 笔记</h2><ul>
<li>地址: <a href="https://open.iot.10086.cn/">https://open.iot.10086.cn/</a></li>
</ul>
<h3 id="OneNet平台OTA设置"><a href="#OneNet平台OTA设置" class="headerlink" title="OneNet平台OTA设置"></a>OneNet平台OTA设置</h3><p>进入FOTA界面，选择添加FOTA群组,操作流程如下图:<br>第一步，创建FOTA群组；<br><img src="/images/pasted-82.png" alt="upload successful"></p>
<a id="more"></a>
<p><img src="/images/pasted-83.png" alt="upload successful"><br>第二步，添加关联设备<br><img src="/images/pasted-84.png" alt="upload successful"><br><img src="/images/pasted-85.png" alt="upload successful"></p>
<p>第三步，添加当前设备固件包<br><img src="/images/pasted-93.png" alt="upload successful"><br><img src="/images/pasted-94.png" alt="upload successful"></p>
<p>第四步，上传新的固件包，步骤同第三步；</p>
<blockquote>
<p>这里以上传<code>04030004</code>版本为例子<br><img src="/images/pasted-95.png" alt="upload successful"></p>
</blockquote>
<p>第五步，创建在线差分包<br><img src="/images/pasted-96.png" alt="upload successful"><br><img src="/images/pasted-97.png" alt="upload successful"><br><img src="/images/pasted-98.png" alt="upload successful"><br><strong>可以看到从04030003到04030004的差分包固生产成功了</strong><br><img src="/images/pasted-99.png" alt="upload successful"><br>第六步，固件测试验证<br><img src="/images/pasted-100.png" alt="upload successful"><br><img src="/images/pasted-101.png" alt="upload successful"><br><img src="/images/pasted-102.png" alt="upload successful"></p>
<p>到此，平台端操作完成，关联的设备上电就会查询是否有升级包，若检测到升级包则能看到设备升级；</p>
<h3 id="OTA时设备端关键日志"><a href="#OTA时设备端关键日志" class="headerlink" title="OTA时设备端关键日志"></a>OTA时设备端关键日志</h3><p><img src="/images/pasted-103.png" alt="upload successful"><br><img src="/images/pasted-104.png" alt="upload successful"><br>OneNet平台也可以看到一些OTA数据统计<br><img src="/images/pasted-105.png" alt="upload successful"></p>
<h3 id="设备端M5311固件生产"><a href="#设备端M5311固件生产" class="headerlink" title="设备端M5311固件生产"></a>设备端M5311固件生产</h3>]]></content>
  </entry>
  <entry>
    <title>NB-IoT 记录</title>
    <url>/2020/07/09/26e6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="NB状态"><a href="#NB状态" class="headerlink" title="NB状态"></a>NB状态</h2><ul>
<li>DRX：Discontinuous Reception（不连续接收），为模块 Modem 的工作模式</li>
<li>eDRX：extended DRX（扩展不连续接收），为模块 Modem 的工作模式。</li>
<li>PSM：Power Saving Mode（省电模式），为模块 Modem 的工作模式。</li>
</ul>
<h2 id="PSM-模式状态转化"><a href="#PSM-模式状态转化" class="headerlink" title="PSM 模式状态转化"></a>PSM 模式状态转化</h2><p><img src="/images/pasted-59.png" alt="upload successful"></p>
<blockquote>
<p>在 PSM 模式下，终端不再监听寻呼，但终端还是注册在网络中；因此，要发送数据时不需要重新连接或建立 PDN 连接。在模块 Modem 进入 PSM 模式后，仍然可以主动发送上行数据到平台。</p>
</blockquote>
<h2 id="eDRX-模式状态转化"><a href="#eDRX-模式状态转化" class="headerlink" title="eDRX 模式状态转化"></a>eDRX 模式状态转化</h2><p><img src="/images/pasted-60.png" alt="upload successful"></p>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p><img src="/images/pasted-61.png" alt="upload successful"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/93913704">https://zhuanlan.zhihu.com/p/93913704</a></li>
</ul>
<h2 id="T3324-和-T3412-设置"><a href="#T3324-和-T3412-设置" class="headerlink" title="T3324 和 T3412 设置"></a>T3324 和 T3412 设置</h2><p>从M5311模组说明手册查到说明如下:<br></p>
<h3 id="T3324"><a href="#T3324" class="headerlink" title="T3324"></a>T3324</h3><p>T3324的设置和 <strong>GPRS Timer 2<br>IE in 3GPP TS 24.008 Table 10.5.163/3GPP TS 24.008. See also 3GPP TS 23.682, 3GPP TS<br>23.060 and 3GPP TS 23.401. The default value, if available, is manufacturer specific</strong>有关<br></p>
<p>Timer value (octet 2)<br><br>Bits 5 to 1 represent the binary coded timer value.<br><br>Bits 6 to 8 defines the timer value unit for the GPRS<br><br>Bits<br></p>
<p>|8|7|6|说明|<br>|:–|:–|:–|<br>|0 |0 |0 |value is incremented in multiples of 2 seconds<br>|0 |0 |1 |value is incremented in multiples of 1 minute<br>|0 |1 |0 |value is incremented in multiples of decihours<br>|1 |1 |1 |value indicates that the timer is deactivated.</p>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><blockquote>
<p>“00100100” = 4 minutes</p>
</blockquote>
<h3 id="T3412-TAU"><a href="#T3412-TAU" class="headerlink" title="T3412 (TAU)"></a>T3412 (TAU)</h3><p>T3412(<strong>TAU</strong>)的设置和<strong>GPRS Timer 3 IE in 3GPP TS 24.008 Table<br>10.5.163a/3GPP TS 24.008. See also 3GPP TS 23.682 and 3GPP TS 23.401. The default<br>value, if available, is manufacturer specific.</strong> 有关;<br>摘录重要点如下:<br></p>
<p>GPRS Timer 3 value (octet 3)<br><br>Bits 5 to 1 represent the binary coded timer value.<br><br>Bits 6 to 8 defines the timer value unit for the GPRS timer as follows:<br><br>Bits<br></p>
<p>|8|7|6|说明|<br>|:–|:–|:–|<br>|0 |0 |0 |value is incremented in multiples of 10 minutes|<br>|0 |0 |1 |value is incremented in multiples of 1 hour|<br>|0 |1 |0 |value is incremented in multiples of 10 hours|<br>|0 |1 |1 |value is incremented in multiples of 2 seconds|<br>|1 |0 |0 |value is incremented in multiples of 30 seconds|<br>|1 |0 |1 |value is incremented in multiples of 1 minute|<br>|1 |1 |0 |value is incremented in multiples of 320 hours (NOTE)|<br>|1 |1 |1 |value indicates that the timer is deactivated.|<br><strong>NOTE:</strong> This timer value unit is only applicable to the T3312 extended value IE<br>and T3412 extended value IE (see 3GPP TS 24.301 [120]). If it is<br>received in an integrity protected message, value shall be interpreted as<br>multiples of 320 hours. Otherwise value shall be interpreted as multiples of 1 hour.</p>
<h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><blockquote>
<p>“01000111” = 70 hours</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>SI4432</title>
    <url>/2017/03/26/760b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h3 id="SPI方面"><a href="#SPI方面" class="headerlink" title="SPI方面"></a>SPI方面</h3><hr>
<p><strong>1. 速率不要太高，SI4432手册上说不要大于10MHZ</strong>        <br><strong>2. MOSI、MOSO、SCK三个引脚配置为复用功能推挽输出</strong><br><strong>3.SPI的时钟极性配置为：同步时钟的空闲状态为 低电平</strong><br><strong>4.SPI的时钟的第2个跳变沿数据被采样。（SPI_CPHA）</strong><br><strong>5.片选信号软件控制自己定义一个IO空控制片选吧，方便.</strong></p>
<a id="more"></a>

<h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><hr>
<p><strong>1. SI4432有3个GPIO，一般自己是不用的，但是依然要配置，因为这个和模块相关</strong><br><strong>2. 建议还是不要把SDN直接接地，毕竟发现异常后还可以将SDN拉高在置低来实现硬件复位 <em>(重要)</em></strong><br><strong>3. SI4432的SDN引脚，为高时：芯片停止工作。为低时：芯片允许工作。</strong></p>
<h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><hr>
<p><strong>1. SPI配置好以后，向SI4432写数据注意地址最高位置1。 如：SPI1_ReadWriteByte(addr|0x80)</strong><br><strong>2.SI4432主要三个状态：接收状态、发送状态、挂起状态。发送和接收之间可以相互转换、但是转换之前需要先进入挂起状态然后至少15ms之后再进入发送或者接收状态。程序while（1）之前最好开始就配置为挂起状态：SI4432_WriteReg(0x07, 0x01);</strong><br><strong>3. 软件复位内部寄存器，不能立刻写入寄存器</strong><br><strong>4.某些寄存器写完之后，必须延时一段时间，才能继续写其他的寄存器，否则死机</strong></p>
]]></content>
      <tags>
        <tag>SI4432</tag>
        <tag>433MHZ</tag>
      </tags>
  </entry>
  <entry>
    <title>SPI协议</title>
    <url>/2017/08/17/1d58.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-一点基础介绍"><a href="#1-一点基础介绍" class="headerlink" title="1. 一点基础介绍"></a>1. 一点基础介绍</h2><blockquote>
<p>SPI的通信原理很简单，它以主从方式工作，这种模式通常有一个主设备和一个或多个从设备，需要至少4根线，事实上3根也可以（单向传输时）。也是所有基于SPI的设备共有的，它们是MISO（数据输入），MOSI（数据输出），SCK（时钟），CS（片选）。</p>
</blockquote>
<h2 id="2-引脚说明"><a href="#2-引脚说明" class="headerlink" title="2. 引脚说明"></a>2. 引脚说明</h2><table>
<thead>
<tr>
<th align="center">引脚</th>
<th align="left">解说</th>
</tr>
</thead>
<tbody><tr>
<td align="center">MOSI</td>
<td align="left">主设备数据输出，从设备数据输入</td>
</tr>
<tr>
<td align="center">MISO</td>
<td align="left">主设备数据输入，从设备数据输出</td>
</tr>
<tr>
<td align="center">SCLK</td>
<td align="left">时钟信号，由主设备产生</td>
</tr>
<tr>
<td align="center">CS</td>
<td align="left">从设备使能信号，由主设备控制(<strong>一般是低电平选中</strong>)</td>
</tr>
</tbody></table>
<a id="more"></a>


<h2 id="3-SPI-时序操作"><a href="#3-SPI-时序操作" class="headerlink" title="3. SPI 时序操作"></a>3. SPI 时序操作</h2><ol>
<li><strong>数据输出:</strong> 通过 MISO线，数据在时钟上升沿或下降沿时改变，在紧接着的下降沿或上升沿被读取。这样，在至少8次时钟信号的改变（上沿和下沿为一次），就可以完成8位数据的传输</li>
<li><strong>一个SPI时钟周期内，会完成如下操作：</strong><ol>
<li>上升沿发送、下降沿接收、高位先发送</li>
<li>上升沿到来的时候，MOSI上的电平将被发送到从设备的寄存器中</li>
<li>下降沿到来的时候，MISO上的电平将被接收到主设备的寄存器中</li>
</ol>
</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/1736256-8f4f1153773536fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SPI 主从传输"></p>
<h2 id="4-SPI-一主机对多从机图"><a href="#4-SPI-一主机对多从机图" class="headerlink" title="4. SPI 一主机对多从机图"></a>4. SPI 一主机对多从机图</h2><p><img src="http://upload-images.jianshu.io/upload_images/1736256-8f77dada3eba45a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一对多"></p>
<h2 id="4-SPI总线四种工作方式"><a href="#4-SPI总线四种工作方式" class="headerlink" title="4. SPI总线四种工作方式"></a>4. SPI总线四种工作方式</h2><blockquote>
<p>SPI 模块为了和外设进行数据交换，根据外设工作要求，其输出串行同步时钟极性(CPOL)和相位(CPHA)可以进行配置，时钟极性（CPOL）对传输协议没有重大的影响。</p>
</blockquote>
<ol>
<li><strong>CPOL是用来决定SCK时钟信号空闲时的电平</strong><ol>
<li>CPOL = 0，空闲电平为低电平;</li>
<li>CPOL = 1，空闲电平为高电平;</li>
</ol>
</li>
<li><strong>CPHA是用来决定采样时刻</strong><ol>
<li>CPHA = 0，在每个周期的第一个时钟沿采样;</li>
<li>CPHA = 1，在每个周期的第二个时钟沿采样;<blockquote>
<p><strong>SPI主模块和与之通信的外设备时钟相位和极性应该一致。</strong></p>
</blockquote>
</li>
</ol>
</li>
</ol>
<p><img src="http://www.byteparadigm.com/pictures/figure3.jpg" alt="CPHA &amp; CPOL"></p>
<h2 id="5-协议心得体会"><a href="#5-协议心得体会" class="headerlink" title="5. 协议心得体会"></a>5. 协议心得体会</h2><h3 id="SPI接口时钟配置心得："><a href="#SPI接口时钟配置心得：" class="headerlink" title="SPI接口时钟配置心得："></a>SPI接口时钟配置心得：</h3><ol>
<li>主设备这边的时钟极性和相位都是以从设备为基准的。因此在时钟极性的配置上一定要搞清楚从设备是在时钟的上升沿还是下降沿接收数据，是在时钟的下降沿还是上升沿输出数据。</li>
<li>主设备这边SPI时钟极性的配置（即SDO的配置）跟从设备的SDI接收数据的极性是相反的，跟从设备SDO发送数据的极性是相同的。</li>
</ol>
<p>下面这段话是Sychip Wlan8100 Module Spec上说的，充分说明了时钟极性是如何配置的：<br><strong>The 81xx module will always input data bits at the rising edge of the clock, and the host will always output data bits on the falling edge of the clock.</strong><br>意思是：主设备在时钟的下降沿发送数据，从设备在时钟的上升沿接收数据。因此主设备这边SPI时钟极性应该配置为下降沿有效。<br>又如，下面这段话是摘自LCD Driver IC SSD1289：<br><strong>SDI is shifted into 8-bit shift register on every rising edge of SCK in the order of data bit 7, data bit 6 …… data bit 0.</strong><br>意思是：从设备SSD1289在时钟的上升沿接收数据，而且是按照从高位到地位的顺序接收数据的。因此主设备的SPI时钟极性同样应该配置为下降沿有效。<br>时钟极性和相位配置正确后，数据才能够被准确的发送和接收, 因此应该对照从设备的SPI接口时序或者Spec文档说明来正确配置主设备的时钟。</p>
]]></content>
      <categories>
        <category>协议</category>
      </categories>
      <tags>
        <tag>SPI</tag>
      </tags>
  </entry>
  <entry>
    <title>SSL握手过程</title>
    <url>/2018/03/26/b45f.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div align="center">
![hand][1]
</div>

<a id="more"></a>

<h2 id="SSL-握手目的"><a href="#SSL-握手目的" class="headerlink" title="SSL 握手目的"></a>SSL 握手目的</h2><ol>
<li>客户端与服务器需要就一组用于保护数据的算法达成一致；</li>
<li>它们需要确立一组由那些算法所使用的加密密钥；</li>
<li>握手还可以选择对客户端进行认证(单向/双向 认证)。</li>
</ol>
<h2 id="SSL-四次握手过程"><a href="#SSL-四次握手过程" class="headerlink" title="SSL 四次握手过程"></a>SSL 四次握手过程</h2><p>1、客户端请求建立SSL链接，并向服务端发送一个随机数–Client random和客户端支持的加密方法，比如RSA公钥加密，此时是明文传输。<br>2、服务端回复一种客户端支持的加密方法、一个随机数–Server random、授信的服务器证书和非对称加密的公钥。<br>3、客户端收到服务端的回复后利用服务端的公钥，加上新的随机数–Premaster secret 通过服务端下发的公钥及加密方法进行加密，发送给服务器。<br>4、服务端收到客户端的回复，利用已知的加解密方式进行解密，同时利用Client random、Server random和Premaster secret通过一定的算法生成HTTP链接数据传输的对称加密key – session key</p>
<p><strong>此后通讯基于 sessionkey 对称加密进行</strong></p>
<p>参考:</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html">http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html</a></li>
<li><a href="https://blog.csdn.net/zxk364961978/article/details/54809008">https://blog.csdn.net/zxk364961978/article/details/54809008</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>ssl</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32 命名规则</title>
    <url>/2017/03/26/eaab.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>以stm32f103c8t7xx为例子</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1736256-7d5b4a61ad2948ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="命名规范"></p>
<a id="more"></a>

<p>| Device |  description |<br>| ————- |<br>| STM32 |基于ARM?的32位微控制器产品类型。 |<br>| F |通用类型产品子系列 |<br>|Device subfamily|101 = 基本型 102 = USB基本型 103 = 增强型 105/107 = 互联型|<br>|Pin count| T=36 C=48 R=64 V=100 Z=144|<br>|Flash Size|6=32 8=64 B=128 C=256 D=384 E=512 |<br>|Package|H = BGA T = LQFP U = VFQFPN Y = WLCSP64|</p>
<h2 id="STM32-产品类型和启动文件的选择"><a href="#STM32-产品类型和启动文件的选择" class="headerlink" title="STM32 产品类型和启动文件的选择"></a>STM32 产品类型和启动文件的选择</h2><pre><code>- startup_stm32f10x_ld_vl.s: for STM32 Low density Value line devices
- startup_stm32f10x_ld.s: for STM32 Low density devices
- startup_stm32f10x_md_vl.s: for STM32 Medium density Value line devices
- startup_stm32f10x_md.s: for STM32 Medium density devices
- startup_stm32f10x_hd.s: for STM32 High density devices
- startup_stm32f10x_xl.s: for STM32 XL density devices
- startup_stm32f10x_cl.s: for STM32 Connectivity line devices
cl：互联型产品，stm32f105/107系列
vl：超值型产品，stm32f100系列
xl：超高密度产品，stm32f101/103系列
ld：低密度产品，FLASH小于64K
md：中等密度产品，FLASH=64 or 128
hd：高密度产品，FLASH大于128</code></pre>
<h2 id="STM32-Flash-页面大小划分"><a href="#STM32-Flash-页面大小划分" class="headerlink" title="STM32 Flash 页面大小划分"></a>STM32 Flash 页面大小划分</h2><p>STM32有4种Flash module organization，分别是：</p>
<ul>
<li>low-density devices(32KB，1KB/page)</li>
<li>medium-density devices(128KB，1KB/page)</li>
<li>high-density devices(512KB，2KB/page)</li>
<li>connectivity line devices(256KB，2KB/page)</li>
<li>XL-density(devices(1M，2KB/page)</li>
</ul>
]]></content>
      <tags>
        <tag>ST</tag>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32---ADC</title>
    <url>/2017/03/26/b2f4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="引脚"><a href="#引脚" class="headerlink" title="引脚"></a>引脚</h2><p><img src="http://upload-images.jianshu.io/upload_images/1736256-98eeb51f671b5b77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="STM32 ADC 引脚"></p>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><ol>
<li><strong>ADC通常要与DMA一起使用 这里只是简单的用库配置ADC 不断扫描来实现ADC的应用。</strong></li>
</ol>
<p>** 首先配置GPIO与ADC的时钟：**</p>
<a id="more"></a>

<pre><code>ADC_InitTypeDef  ADC_InitStructure; 
GPIO_InitTypeDef GPIO_InitStructure;
RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1,ENABLE); 
RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
GPIO_InitStructure.GPIO_Pin  =GPIO_Pin_1; 
GPIO_InitStructure.GPIO_Mode =GPIO_Mode_AIN; 
GPIO_Init(GPIOB,&amp;GPIO_InitStructure); //默认速度为两兆</code></pre>
<p>2 .<strong>配置ADC的运行：</strong></p>
<pre><code>ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;  //独立模式 
ADC_InitStructure.ADC_ScanConvMode      =DISABLE;      //连续多通道模式 
ADC_InitStructure.ADC_ContinuousConvMode =ENABLE;      //连续转换 
ADC_InitStructure.ADC_ExternalTrigConv  = ADC_ExternalTrigConv_None; //转换不受外界决定
 ADC_InitStructure.ADC_DataAlign         =ADC_DataAlign_Right;   //右对齐 
ADC_InitStructure.ADC_NbrOfChannel      =1;       //扫描通道数
 ADC_Init(ADC1,&amp;ADC_InitStructure);
 ADC_RegularChannelConfig(ADC1,ADC_Channel_9, 1,ADC_SampleTime_1Cycles5); //通道X,采样时间为1.5周期,1代表规则通道第1个这个1是啥意思我不太清楚只有是1的时候我的ADC才正常。
 ADC_Cmd  (ADC1,ENABLE);         //使能或者失能指定的ADC
 ADC_SoftwareStartConvCmd(ADC1,ENABLE); //使能或者失能指定的ADC的软件转换启动功能</code></pre>
<p><strong>注意：为了能够正确地配置每一个ADC通道，用户在调用ADC_Init()之后，必须调用ADC_ChannelConfig()来配置每个所使用通道的转换次序和采样时间。</strong><br><strong>然后就是不停的读；</strong></p>
<pre><code>u16 TestAdc(void) 
&#123; 
u16 adc; 
while(ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)==RESET); //检查制定ADC标志位置1与否 ADC_FLAG_EOC 转换结束标志位 
adc=ADC_GetConversionValue(ADC1);
returnadc;//返回最近一次ADCx规则组的转换结果
 &#125;</code></pre>
]]></content>
      <tags>
        <tag>ST</tag>
        <tag>STM32</tag>
        <tag>ADC</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之服务安装</title>
    <url>/2017/06/06/9372.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="ssh-server-安装"><a href="#ssh-server-安装" class="headerlink" title="ssh-server 安装"></a>ssh-server 安装</h1><p><strong>SSH分客户端</strong></p>
<pre><code>openssh-client</code></pre>
<p><strong>服务端</strong></p>
<pre><code>openssh-server</code></pre>
<a id="more"></a>
<p>如果你只是想登陆别的机器的SSH只需要安装<strong>openssh-client</strong>__(Ubutntu有默认安装，如果没有则 <strong>sudo apt-get install openssh-client</strong>)__，如果要使本机开放SSH服务就需要安装<strong>openssh-server</strong>。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我这里使用命令安装服务端SSH。</p>
<pre><code>sudo apt-get install openssh-server</code></pre>
<h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><p>然后使用命令确认sshserver是否启动了：</p>
<pre><code>ps -e |grep ssh</code></pre>
<p>如果看到sshd那说明ssh-server已经启动了。</p>
<pre><code>alex@ubuntu:~$ ps -e | grep ssh
 2284 ?        00:00:00 ssh-agent
 8743 ?        00:00:00 sshd</code></pre>
<p>如果没有则可以这样启动：</p>
<pre><code>sudo /etc/init.d/ssh start
#或者
service ssh start</code></pre>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>配置文件位于**/etc/ssh/sshd_config**，在这里可以定义SSH的服务端口，默认端口是22。<br>然后重启SSH服务：</p>
<pre><code>sudo /etc/init.d/ssh stop
sudo /etc/init.d/ssh start</code></pre>
<h2 id="开机自启动配置"><a href="#开机自启动配置" class="headerlink" title="开机自启动配置"></a>开机自启动配置</h2><p>设置开机自动启动ssh服务：<br>Ubuntu中配置openssh-server开机自动启动打开/etc/rc.local文件，添加如下语句：</p>
<pre><code>/etc/init.d/ssh start</code></pre>
<h2 id="ssh-文件传输"><a href="#ssh-文件传输" class="headerlink" title="ssh 文件传输"></a>ssh 文件传输</h2><ul>
<li><p>上传</p>
<pre><code>scp /path/file（这部分为本地的路径） user（远端目标用户名）@host（远端目标IP）:/pathorfile（文件存储路径）</code></pre>
</li>
<li><p>下载</p>
</li>
<li><ul>
<li>下载单独文件</li>
</ul>
</li>
</ul>
<pre><code>scp user（远端用户名）@host（远端IP）:/path/file（下载文件在远端的路径） localpathorfile（本地文件存放路径）</code></pre>
<ul>
<li><ul>
<li>下载整个文件夹</li>
</ul>
</li>
</ul>
<pre><code>scp -P 2233 -r root@xxx.xxx.xxx.xxx:/data/gagent/log_gagent/00BSJ26M_0403000A_20190610170053  .</code></pre>
<ul>
<li>查看目录或文件</li>
</ul>
<pre><code>ssh user@host command ls &quot;/path/*.tgz&quot;</code></pre>
<h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><p><img src="https://upload-images.jianshu.io/upload_images/1736256-5f5382792923eb5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ssh"></p>
<p>如上图，实现Company下的PC 通过ssh 访问到Home(A) 里的PC.实际上是在公网上一台主机Server(B)做SSH转发，在A上做SSH方向代理实现；</p>
<p>A服务器用户名: <em><em>gagent</em></em><br>B服务器用户名: <em><em>ubuntu</em></em></p>
<h3 id="反向代理第一步-ssh-参数解析"><a href="#反向代理第一步-ssh-参数解析" class="headerlink" title="反向代理第一步:ssh 参数解析"></a>反向代理第一步:ssh 参数解析</h3><pre><code>-f 后台执行ssh指令
-C 允许压缩数据
-N 不执行远程指令
-R 将远程主机(服务器)的某个端口转发到本地端指定机器的指定端口
-L 将本地机(客户机)的某个端口转发到远端指定机器的指定端口
-p 指定远程主机的端口</code></pre>
<ul>
<li><p>反向代理</p>
<pre><code>ssh -fCNR</code></pre>
</li>
<li><p>正向代理</p>
<pre><code>ssh -fCNL</code></pre>
</li>
</ul>
<h3 id="反向代理第二步-服务配置"><a href="#反向代理第二步-服务配置" class="headerlink" title="反向代理第二步:服务配置"></a>反向代理第二步:服务配置</h3><ul>
<li><p>首先，在A上面搭建A到B的反向代理配置 指令为:</p>
<pre><code>ssh -fCNR [B机器IP或省略]:[B机器端口]:[A机器的IP]:[A机器端口] [登陆B机器的用户名@服务器IP]</code></pre>
<p>  在这里我使用了B机器的7280端口，用来月A通讯。以及A机器的22端口，用来与B通讯，( [B机器端口]&lt;&lt;====&gt;&gt;[A机器端口] )按照上面的指令就是这样子的操作<br>  实例</p>
<pre><code>ssh -fCNR 7280:localhost:22 ubuntu@123.123.123.123</code></pre>
<p>  在A检验是否已经启动了可以使用ps aux | grep ssh指令来查看：<br>  <img src="https://upload-images.jianshu.io/upload_images/1736256-338f78770105f37a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ssh f"><br>  在B上检测反向代理是否生效，看到7280端口启动则表明生效</p>
<pre><code>ubuntu@VM-133-112-ubuntu:~$ netstat -tnl | grep 127.0.0.1
tcp        0      0 127.0.0.1:7280          0.0.0.0:*               LISTEN</code></pre>
<p>  以上都成功则可以可从公网服务器B反向登录回家庭服务器A了</p>
<pre><code>ssh gagent@127.0.0.1 -p 7280</code></pre>
</li>
<li><p>第二，在B机器上搭建正向代理到A的配置，用来在B上转发数据到A 指令为:</p>
<pre><code>ssh -fCNL [A机器IP或省略]:[A机器端口]:[B机器的IP]:[B机器端口] [登陆B机器的用户名@B机器的IP]</code></pre>
<p>  按照第一步那里输入的指令，这里的B机器的端口和上面的B机器的端口是一致的，端口1234的也是B机器的。<br>  实例</p>
<pre><code>ssh -fCNL *:1234:localhost:7280 localhost</code></pre>
<p>  *<em>解释:**在此1234端口为本地转发端口，负责和外网进行通信，并将数据转发的7280这个端口，实现了可以从其他机器访问的功能。同时，</em>号表示可以接受任何IP的访问。</p>
</li>
<li><p>第三，在C机器上ssh到A机器</p>
<pre><code>ssh -p1234 gagent@123.123.123.123</code></pre>
<p>  **解释:**在此-p参数为指定登陆的IP，我们在上面指定了__1234__端口为转发端口，故用__1234__端口登陆，然后__gagent__是内网A机器的用户名，__123.123.123.123__为外网B机器的IP地址。</p>
</li>
</ul>
<hr>
<h3 id="反向代理第三步-稳定性加强"><a href="#反向代理第三步-稳定性加强" class="headerlink" title="反向代理第三步:稳定性加强"></a>反向代理第三步:稳定性加强</h3><ul>
<li><p>ssh每次重连都需要键入密码，故在此首先设置免密码登陆到内网A<br>在内网的机器A上面执行：</p>
<ul>
<li>1 生产 ssh-keygen(如果已经有了key 可以跳过此步骤)</li>
</ul>
<pre><code>  gagent@ubuntu:~$ ssh-keygen
  Generating public/private rsa key pair.
  Enter file in which to save the key (/home/gagent/.ssh/id_rsa):
  Enter passphrase (empty for no passphrase):
  Enter same passphrase again:
  Your identification has been saved in /home/gagent/.ssh/id_rsa.
  Your public key has been saved in /home/gagent/.ssh/id_rsa.pub.
  The key fingerprint is:
  **:**:**:**:**:**:**:**:**:**:**:**:**:**:**:** gagent@ubuntu
  The key&#39;s randomart image is:
  +--[ RSA 2048]----+
  |           . ... |
  |      + . . . .. |
  |     o o .       |
  |      . .        |
  |     ..   a      |
  | . ..      d     |
  |  o.+o =  d      |
  |   ..+  .        |
  |    o.           |
  +-----------------+</code></pre>
<ul>
<li>2 复制ssh-keygen到 B</li>
</ul>
<pre><code># ssh-copy-id 外网用户名@外网IP
ssh-copy-id ubuntu@123.123.123.123</code></pre>
<blockquote>
<p>然后提醒你可以直接登录服务器B了，不用输入密码，效果如下:</p>
</blockquote>
<pre><code>  gagent@ubuntu:~$ ssh-copy-id   ubuntu@123.123.123.123
  /usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
  /usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
  ubuntu@123.123.123.123&#39;s password:

  Number of key(s) added: 1

  Now try logging into the machine, with:   &quot;ssh &#39;ubuntu@123.123.123.123&#39;&quot;
  and check to make sure that only the key(s) you wanted were added.

  gagent@ubuntu:~$ ssh ubuntu@123.123.123.123
  Welcome to Ubuntu 16.04.1 LTS (GNU/Linux 4.4.0-91-generic x86_64)</code></pre>
</li>
<li><p>用autossh建立稳定隧道<br>由于A和B不稳定，容易发生断开事件，所以需要工具在断开之后自动ssh到B机器，于是就用到了<strong>autossh</strong>;</p>
<ul>
<li><p>1 工具安装说明</p>
<pre><code># 安装
sudo apt-get install autossh</code></pre>
<p>用法如下:</p>
<pre><code>gagent@ubuntu:~$ autossh --help
/usr/lib/autossh/autossh: invalid option -- &#39;-&#39;
usage: autossh [-V] [-M monitor_port[:echo_port]] [-f] [SSH_OPTIONS]

    -M specifies monitor port. Overrides the environment
       variable AUTOSSH_PORT. 0 turns monitoring loop off.
       Alternatively, a port for an echo service on the remote
       machine may be specified. (Normally port 7.)
    -f run in background (autossh handles this, and does not
       pass it to ssh.)
    -V print autossh version and exit.

Environment variables are:
    AUTOSSH_GATETIME    - how long must an ssh session be established
                          before we decide it really was established
                          (in seconds). Default is 30 seconds; use of -f
                          flag sets this to 0.
    AUTOSSH_LOGFILE     - file to log to (default is to use the syslog
                          facility)
    AUTOSSH_LOGLEVEL    - level of log verbosity
    AUTOSSH_MAXLIFETIME - set the maximum time to live (seconds)
    AUTOSSH_MAXSTART    - max times to restart (default is no limit)
    AUTOSSH_MESSAGE     - message to append to echo string (max 64 bytes)
    AUTOSSH_PATH        - path to ssh if not default
    AUTOSSH_PIDFILE     - write pid to this file
    AUTOSSH_POLL        - how often to check the connection (seconds)
    AUTOSSH_FIRST_POLL  - time before first connection check (seconds)
    AUTOSSH_PORT        - port to use for monitor connection
    AUTOSSH_DEBUG       - turn logging to maximum verbosity and log to
                          stderr</code></pre>
<ul>
<li>2 实际操作<pre><code>autossh -M 7281 -fCNR 7280:localhost:22 root@123.123.123.123</code></pre>
解释:<blockquote>
<p>_<em>autossh</em>_的参数与ssh的参数是一致的，但是不同的是，在隧道断开的时候，autossh会自动重新连接而ssh不会。另外不同的是我们需要指出的-M参数，这个参数指定一个端口，这个端口是外网的B机器用来接收内网A机器的信息，如果隧道不正常而返回给A机器让他实现重新连接</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>设置A机器启动的时候自动ssh到B</p>
</li>
</ul>
<p>修改启动文件</p>
<pre><code>vi /etc/rc.d/rc.local</code></pre>
<p>添加内容:</p>
<pre><code>autossh -M 7281 -fCNR 7280:localhost:22 root@123.123.123.123</code></pre>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>STM8 命名规则</title>
    <url>/2017/03/26/3ec7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p><strong>STM8命名规则示列：STM8S005K6T6Cxxx</strong>代表的意义为： 超值型 STM8内核（可以理解为8位51增强型内核）MCU,LQFP-32封装，32KB FLASH容量，温度范围-40℃-85℃；（工业级）<br><strong>具体分解如下：</strong></p>
<a id="more"></a>

<p>|<strong>STM8</strong>|<strong>S</strong>|<strong>005</strong>|<strong>K</strong>|<strong>6</strong>|<strong>T</strong>|<strong>6</strong>|<strong>C</strong>|<strong>XXX</strong>|<br>|-|-|<br>|1|2|3|4|5|6|7|8|9</p>
<p><strong>1.产品系列:</strong><br>STM8单片机包括以下几个系列：<br>STM8： 8位MCU； STM8A：8位自动MCU； STM8T：8位触摸感应MCU； STM8TL：8位触摸感应低电压MCU；<br><strong>2.产品类型:</strong><br>S：标准型； L：低电压型；<br><strong>3.产品子系列：</strong><br>005：超值型STM8S005X，速度16MHz； 051：超低压ULTRA串口； 052：带LCD； 007：ARM3超值型，速度24 MHz； 00x：超值型； 003：子系列； 105：基本型STM8S1005X； 10X：基本型； 103：子系列； 207：中间层的外围设定; 208：所有层的外围设定; 903：903子系列; 151：超低压ULTRA串口; 152：超低压ULTRA串口带LCD; 101：子系列；<br><strong>4.管脚数</strong><br>F：20PIN；G：28PIN；K：32PIN；S：44PIN；C：48PIN；R：64PIN；M：80PIN；<br><strong>5.Flash存存容量</strong><br>1：2KB flash；（小容量）; 2：4KB flash；（小容量）; 3：8KB flash；（小容量）; 4：16KB flash；（小容量）; 6：32KB flash；（小容量）; 8：64KB flash；（中容量）; B：128KB flash；（中容量）; C：256KB flash；（大容量）; D：384KB flash；（大容量）; E：512KB flash；（大容量）; F：768KB flash；（大容量）; G：1MKB flash；（大容量）<br><strong>6.封装</strong><br>T：LQFP； P：TSSOP； U：UFQFPN； B：SDIP； M：SO； Y：WLCSP；<br><strong>7.温度范围</strong><br>3：-40℃-125℃；（工业级）; 6：-40℃-85℃；（工业级）; 7：-40℃-105℃；（工业级）<br><strong>8.包装尺寸</strong><br>无特性：0.5mm；C：0.8mm; A：0.55mm的UFQFPN；Blank：0.5mm或0.65mm;<br>低压101系列的A：COMP_REF可变；Blank：COMP_REF不可变;<br>低压162系列的D：VDD的范围为1.8V-3.6V，且BOR使能； Blank：VDD的范围为1.8V-3.6V，且BOR不使能;<br><strong>9.包装方式：</strong><br>TR：带卷；无特性：盘装；</p>
<hr>
<p><img src="http://upload-images.jianshu.io/upload_images/1736256-f177ef8447b808f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="STM8 MCU 选型列表"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1736256-d448c89177176b7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="STM8L101F3P6"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1736256-37063209962e156c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原理图"></p>
]]></content>
      <tags>
        <tag>ST</tag>
        <tag>STM8</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之shell&amp;Makefile</title>
    <url>/2018/11/04/b0e7.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="最简单的shell"><a href="#最简单的shell" class="headerlink" title="最简单的shell"></a>最简单的shell</h2><pre class=" language-sh"><code class="language-sh">#!/bin/bash
echo "Hello World"</code></pre>
<h2 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title="Shell 变量"></a>Shell 变量</h2><blockquote>
<p><strong>注意:</strong> 变量的“=”前后不能有空格</p>
</blockquote>
<pre class=" language-sh"><code class="language-sh">#!/bin/bash
myStr="hello world"
myNum=100</code></pre>
<a id="more"></a>

<h3 id="访问变量"><a href="#访问变量" class="headerlink" title="访问变量"></a>访问变量</h3><blockquote>
<p>当想要访问变量的时候，需要使用$，否则输出的将是纯文本内容</p>
</blockquote>
<pre class=" language-sh"><code class="language-sh">#!/bin/bash
myStr="hello world"
myNum=100
echo $myStr
echo myNum</code></pre>
<h2 id="shell-运算"><a href="#shell-运算" class="headerlink" title="shell 运算"></a>shell 运算</h2><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>expr命令为Linux中的命令，一般用于整数值计算，但也可用于字符串操作。</p>
<ul>
<li>格式<ul>
<li>expr argument operator argument</li>
</ul>
</li>
<li>参数说明<ul>
<li>argument：为第一个参数</li>
<li>operator：为操作运算符</li>
<li>argument：为第二个参数</li>
</ul>
</li>
</ul>
<h3 id="运算符号"><a href="#运算符号" class="headerlink" title="运算符号"></a>运算符号</h3><table>
<thead>
<tr>
<th align="left">运算符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">+</td>
<td align="left">加法运算</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">减法运算</td>
</tr>
<tr>
<td align="left">*</td>
<td align="left">乘法运算</td>
</tr>
<tr>
<td align="left">/</td>
<td align="left">除法运算</td>
</tr>
<tr>
<td align="left">%</td>
<td align="left">求余</td>
</tr>
<tr>
<td align="left">==</td>
<td align="left">相等</td>
</tr>
<tr>
<td align="left">=</td>
<td align="left">赋值</td>
</tr>
<tr>
<td align="left">!=</td>
<td align="left">不相等</td>
</tr>
<tr>
<td align="left">-a</td>
<td align="left">与</td>
</tr>
<tr>
<td align="left">-o</td>
<td align="left">或</td>
</tr>
<tr>
<td align="left">!</td>
<td align="left">非</td>
</tr>
<tr>
<td align="left">-eq</td>
<td align="left">两个数相等返回true</td>
</tr>
<tr>
<td align="left">-ne</td>
<td align="left">两个数不相等返回true</td>
</tr>
<tr>
<td align="left">-gt</td>
<td align="left">左侧数大于右侧数返回true</td>
</tr>
<tr>
<td align="left">-It</td>
<td align="left">左侧数小于右侧数返回true</td>
</tr>
<tr>
<td align="left">-ge</td>
<td align="left">左侧数大于等于右侧数返回true</td>
</tr>
<tr>
<td align="left">-le</td>
<td align="left">左侧数小于等于右侧数返回true</td>
</tr>
<tr>
<td align="left">=</td>
<td align="left">两个字符串相等返回true</td>
</tr>
<tr>
<td align="left">!=</td>
<td align="left">两个字符串不相等返回true</td>
</tr>
<tr>
<td align="left">-z</td>
<td align="left">字符串长度为0返回true</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">字符串长度不为0返回true</td>
</tr>
<tr>
<td align="left">-d file</td>
<td align="left">检测文件是否是目录，如果是，则返回 true</td>
</tr>
<tr>
<td align="left">-r file</td>
<td align="left">检测文件是否可读，如果是，则返回 true</td>
</tr>
<tr>
<td align="left">-w file</td>
<td align="left">检测文件是否可写，如果是，则返回 true</td>
</tr>
<tr>
<td align="left">-x file</td>
<td align="left">检测文件是否可执行，如果是，则返回 true</td>
</tr>
<tr>
<td align="left">-s file</td>
<td align="left">检测文件是否为空（文件大小是否大于0，不为空返回 true</td>
</tr>
<tr>
<td align="left">-e file</td>
<td align="left">检测文件（包括目录）是否存在，如果是，则返回 true</td>
</tr>
</tbody></table>
<h2 id="一些例子"><a href="#一些例子" class="headerlink" title="一些例子"></a>一些例子</h2><pre class=" language-sh"><code class="language-sh">#!/bin/sh
a=10
b=20
if [ $a -eq $b ]
then
   echo "true"
else
   echo "false"
fi

if [ $a -ne $b ]
then
   echo "true"
else
   echo "false"
fi

if [ $a -gt $b ]
then
   echo "true"
else
   echo "false"
fi

if [ $a -lt $b ]
then
   echo "true"
else
   echo "false"
fi

if [ $a -ge $b ]
then
   echo "true"
else
   echo "false"
fi

if [ $a -le $b ]
then
   echo "true"
else
   echo "false"
fi</code></pre>
<h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><pre class=" language-sh"><code class="language-sh">mtext3="hello world"
echo $&#123;#mtext3&#125;  #输出字符串长度
echo $&#123;mtext3:1:4&#125;  #截取字符串 1到4</code></pre>
<p>输出</p>
<pre class=" language-sh"><code class="language-sh">11
ello</code></pre>
<h3 id="变量计算"><a href="#变量计算" class="headerlink" title="变量计算"></a>变量计算</h3><pre class=" language-sh"><code class="language-sh">a=3
b=5
val=`expr $a / $b`
echo "Total value : $val"

val=`expr $a % $b`
echo "Total value : $val"

if [ $a == $b ]
then
   echo "a is equal to b"
fi
if [ $a != $b ]
then
   echo "a is not equal to b"
fi</code></pre>
<h3 id="数组计算"><a href="#数组计算" class="headerlink" title="数组计算"></a>数组计算</h3><pre class=" language-sh"><code class="language-sh">#!/bin/sh
array=(1 2 3 4 5)  #定义数组
array2=(aa bb cc dd ee)  #定义数组
value=$&#123;array[3]&#125;  #找到某一个下标的数，然后赋值
echo $value  #打印
value2=$&#123;array2[3]&#125;  #找到某一个下标的数，然后赋值
echo $value2  #打印
length=$&#123;#array[*]&#125;  #获取数组长度
echo $length</code></pre>
<h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><ul>
<li>if</li>
<li>if-else</li>
<li>if-elseif</li>
</ul>
<pre class=" language-sh"><code class="language-sh">#!/bin/sh
a=10
b=20
if [ $a == $b ]
then
   echo "true"
fi


if [ $a == $b ]
then
   echo "true"
else
   echo "false"
fi


if [ $a == $b ]
then
   echo "a is equal to b"
elif [ $a -gt $b ]
then
   echo "a is greater than b"
elif [ $a -lt $b ]
then
   echo "a is less than b"
else
   echo "None of the condition met"
fi</code></pre>
<p>判断两个变量的值是否相等:<code>test $[Val1] -eq $[Val]</code></p>
<pre class=" language-sh"><code class="language-sh">if test $[a] -eq $[b]
then
    echo "a 等于 b"
else
    echo "a 不等于 b"
fi</code></pre>
<h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><pre class=" language-sh"><code class="language-sh">#!/bin/sh

for i in &#123;1..5&#125;
do
    echo $i
done


for i in 5 6 7 8 9
do
    echo $i
done


for FILE in $HOME/.bash*
do
   echo $FILE
done</code></pre>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="没有返回值函数"><a href="#没有返回值函数" class="headerlink" title="没有返回值函数"></a>没有返回值函数</h3><pre class=" language-sh"><code class="language-sh">#!/bin/sh

sysout()&#123;
    echo "hello world"
&#125;

sysout</code></pre>
<h3 id="有返回值函数"><a href="#有返回值函数" class="headerlink" title="有返回值函数"></a>有返回值函数</h3><pre class=" language-sh"><code class="language-sh">test()&#123;

    aNum=3
    anotherNum=5
    return $(($aNum+$anotherNum))
&#125;
test
result=$?
echo $result</code></pre>
<h3 id="定义传递参数的函数"><a href="#定义传递参数的函数" class="headerlink" title="定义传递参数的函数"></a>定义传递参数的函数</h3><pre class=" language-sh"><code class="language-sh">#!/bin/sh

test()&#123;
    echo $1  #接收第一个参数
    echo $2  #接收第二个参数
    echo $3  #接收第三个参数
    echo $#  #接收到参数的个数
    echo $*  #接收到的所有参数
&#125;

test aa bb cc</code></pre>
<h2 id="shell-颜色输出"><a href="#shell-颜色输出" class="headerlink" title="shell 颜色输出"></a>shell 颜色输出</h2><p>利用echo 或者printf 可以输出带颜色的shell终端字体</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class=" language-sh"><code class="language-sh">echo -e "\033[43;35m  Hello World \033[0m \n" 

printf "\033[44;36m  Hello World \033[0m \n" 
</code></pre>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><pre><code>echo -e &quot;\003[背景颜色;文字颜色;显示方式m字符串\003[0m&quot;</code></pre>
<ul>
<li>-e 是命令 echo 的一个可选项，它用于激活特殊字符的解析器，可以转义反斜杠字符;</li>
<li><code>\033</code> 引导非常规字符序列;</li>
<li>m 意味着设置属性然后结束非常规字符序列，显示的字符串之前有一个 m ；</li>
</ul>
<h4 id="显示方式具体内容："><a href="#显示方式具体内容：" class="headerlink" title="显示方式具体内容："></a>显示方式具体内容：</h4><table>
<thead>
<tr>
<th align="left">显示方式</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">关闭所有属性</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">设置高亮</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">下划线</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">闪烁</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">反显</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">消隐</td>
</tr>
</tbody></table>
<h4 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h4><table>
<thead>
<tr>
<th align="left">文字颜色</th>
<th align="left">背景颜色</th>
<th align="left">颜色</th>
</tr>
</thead>
<tbody><tr>
<td align="left">30</td>
<td align="left">40</td>
<td align="left">黑色</td>
</tr>
<tr>
<td align="left">31</td>
<td align="left">41</td>
<td align="left">红色</td>
</tr>
<tr>
<td align="left">32</td>
<td align="left">42</td>
<td align="left">绿色</td>
</tr>
<tr>
<td align="left">33</td>
<td align="left">43</td>
<td align="left">黄色</td>
</tr>
<tr>
<td align="left">34</td>
<td align="left">44</td>
<td align="left">蓝色</td>
</tr>
<tr>
<td align="left">35</td>
<td align="left">45</td>
<td align="left">紫红色</td>
</tr>
<tr>
<td align="left">36</td>
<td align="left">46</td>
<td align="left">青蓝色</td>
</tr>
<tr>
<td align="left">37</td>
<td align="left">47</td>
<td align="left">白色</td>
</tr>
</tbody></table>
<h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2><h3 id="patsubst-替换通配符"><a href="#patsubst-替换通配符" class="headerlink" title="patsubst(替换通配符)"></a>patsubst(替换通配符)</h3><p><strong>原型:</strong> <br><br><code>$(patsubst 原模式， 目标模式， 文件列表)</code>或<code>$(patsubst  pattern, replacement,text)</code><br><br><strong>功能：<br></strong><br>查找<code>&lt;text&gt;</code>中的单词（单词以“空格”、“Tab”或“回车”“换行”分隔）是否符合模式<code>&lt;pattern&gt;</code>，如果匹配的话，则以<code>&lt;replacement&gt;</code>替换。这里，<code>&lt;pattern&gt;</code>可以包括通配符“%”，表示任意长度的字串。如果<code>&lt;replacement&gt;</code>中也包含“%”，那么，<code>&lt;replacement&gt;</code>中的这个“%”将是<code>&lt;pattern&gt;</code>中的那个“%”所代表的字串。（可以用“\”来转义，以“%”来表示真实含义的“%”字符）<br><br><strong>返回：<br>**函数返回被替换过后的字符串。<br><br>**例子：<br></strong></p>
<pre class=" language-Make"><code class="language-Make">(patsubst %.c,%.o,x.c.c bar.c)</code></pre>
<p>把字串“x.c.c bar.c”符合模式[%.c]的单词替换成[%.o]，返回结果是“x.c.o bar.o”</p>
<h4 id="拓展-变量替换引用"><a href="#拓展-变量替换引用" class="headerlink" title="拓展-变量替换引用"></a>拓展-变量替换引用</h4><p>对于一个已经定义的变量，可以使用“替换引用”将其值中的后缀字符（串）使用指定的字符（字符串）替换。格式为<code>$(VAR:A=B)</code>（或者<code>$&#123;VAR:A=B&#125;</code>），意思是，替换变量“VAR”中所有“A”字符结尾的字为“B”结尾的字。“结尾”的含义是空格之前（变量值多个字之间使用空格分开）。而对于变量其它部分的“A”字符不进行替换。例如：</p>
<pre><code>foo := a.o b.o c.o
bar := $(foo:.o=.c)</code></pre>
<p>在这个定义中，变量“bar”的值就为“a.c b.c c.c”。使用变量的替换引用将变量“foo”以空格分开的值中的所有的字的尾字符“o”替换为“c”，其他部分不变。如果在变量“foo”中如果存在“o.o”时，那么变量“bar”的值为“a.c b.c c.c o.c”而不是“a.c b.c c.c c.c”。</p>
<h3 id="wildcard-扩展通配符"><a href="#wildcard-扩展通配符" class="headerlink" title="wildcard(扩展通配符)"></a>wildcard(扩展通配符)</h3><p><strong>原型:</strong> <br><br><code>SRC = $(wildcard *.c ./foo/*.c)</code><br></p>
<p><strong>功能：<br></strong><br>搜索当前目录及./foo/下所有以.c结尾的文件，生成一个以空格间隔的文件名列表，并赋值给SRC.当前目录文件只有文件名，子目录下的文件名包含路径信息，比如./foor/bar.c。</p>
<h3 id="notdir-去除路径"><a href="#notdir-去除路径" class="headerlink" title="notdir(去除路径)"></a>notdir(去除路径)</h3><p><strong>原型:</strong> <br><br><code>SRC = $(notdir wildcard)</code><br><br><strong>功能：<br></strong><br>去除所有的目录信息，SRC里的文件名列表将只有文件名。</p>
<h3 id="addprefix-添加固定前缀"><a href="#addprefix-添加固定前缀" class="headerlink" title="addprefix(添加固定前缀)"></a>addprefix(添加固定前缀)</h3><p><strong>原型:</strong> <br><br><code>$(addprefix fixstring,string1 string2 ...)</code><br><br><strong>功能：<br></strong><br>其中，fixstring表示任意要添加的固定前缀，在逗号的后面可以是一个或多个要添加前缀的子字符串，多个子字符串之间用空格隔开,当然，你也可以用变量。</p>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p><strong>原型:</strong> <br><br><code>$(foreach &lt;var&gt;,&lt;list&gt;,&lt;text&gt;)</code><br><br><strong>功能：<br></strong><br>这个函数的意思是，把参数<code>&lt;list&gt;</code>;中的单词逐一取出放到参数<code>&lt;var&gt;</code>;所指定的变量中，然后再执行&lt; text&gt;;所包含的表达式。每一次<code>&lt;text&gt;</code>;会返回一个字符串，循环过程中，<code>&lt;text&gt;</code>;的所返回的每个字符串会以空格分隔，最后当整个循环结束时，<code>&lt;text&gt;</code>;所返回的每个字符串所组成的整个字符串（以空格分隔）将会是foreach函数的返回值。<br><br><strong>例子：<br></strong></p>
<pre><code>names := a b c d
files := $(foreach n,$(names),$(n).o)</code></pre>
<p>上面的例子中，$(name)中的单词会被挨个取出，并存到变量“n”中，“$(n).o”每次根据“$(n)”计算出一个值，这些值以空格分隔，最后作为foreach函数的返回，所以，$(files)的值是“a.o b.o c.o d.o”。</p>
<p><strong>注意</strong>，foreach中的<var>;参数是一个临时的局部变量，foreach函数执行完后，参数<var>;的变量将不在作用，其作用域只在foreach函数当中。</p>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux之实用技能</title>
    <url>/2017/06/06/ef18.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="查看机器是多少位"><a href="#查看机器是多少位" class="headerlink" title="查看机器是多少位"></a>查看机器是多少位</h2><hr>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class=" language-shell"><code class="language-shell">>>>$ getconf LONG_BIT
>>>$ 64</code></pre>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre class=" language-shell"><code class="language-shell">>>>$ uname -a
>>>$ Linux alex-virtual-machine 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:43:14 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
</code></pre>
<a id="more"></a>

<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><pre class=" language-shell"><code class="language-shell">>>>$ uname -p
>>>$ x86_64</code></pre>
<h2 id="实用命令"><a href="#实用命令" class="headerlink" title="实用命令"></a>实用命令</h2><table>
<thead>
<tr>
<th align="center">命令</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">wc</td>
<td>统计文本中行数、字数、字符数</td>
</tr>
<tr>
<td align="center">stat</td>
<td>显示指定文件的详细信息，比ls更详细</td>
</tr>
<tr>
<td align="center">who</td>
<td>显示在线登陆用户</td>
</tr>
<tr>
<td align="center">whoami</td>
<td>显示当前操作用户</td>
</tr>
<tr>
<td align="center">hostname</td>
<td>显示主机名</td>
</tr>
<tr>
<td align="center">uname</td>
<td>显示系统信息</td>
</tr>
<tr>
<td align="center">top</td>
<td>动态显示当前耗费资源最多进程信息</td>
</tr>
<tr>
<td align="center">ps</td>
<td>显示瞬间进程状态 ps -aux</td>
</tr>
<tr>
<td align="center">du</td>
<td>查看目录大小 du -h /home带有单位显示目录信息</td>
</tr>
<tr>
<td align="center">df</td>
<td>查看磁盘大小 df -h 带有单位显示磁盘信息</td>
</tr>
</tbody></table>
<h2 id="Linux-代码文件大小、行数、字节数统计"><a href="#Linux-代码文件大小、行数、字节数统计" class="headerlink" title="Linux 代码文件大小、行数、字节数统计"></a>Linux 代码文件大小、行数、字节数统计</h2><h3 id="命令解释"><a href="#命令解释" class="headerlink" title="命令解释"></a>命令解释</h3><p><strong><em>语法：wc [选项] 文件…</em></strong></p>
<blockquote>
<p>说明：该命令统计给定文件中的字节数、字数、行数。如果没有给出文件名，则从标准输入读取。wc同时也给出所有指定文件的总统计数。字是由空格字符区分开的最大字符串。</p>
</blockquote>
<p>该命令各选项含义如下：</p>
<ul>
<li>- c 统计字节数。</li>
<li>- l 统计行数。</li>
<li>- w 统计字数。</li>
</ul>
<p>这些选项可以组合使用。</p>
<p>输出列的顺序和数目不受选项的顺序和数目的影响。</p>
<p>总是按下述顺序显示并且每项最多一列。</p>
<p>行数、字数、字节数、文件名</p>
<p>如果命令行中没有文件名，则输出中不出现文件名。</p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h4 id="查看某个文件"><a href="#查看某个文件" class="headerlink" title="查看某个文件"></a>查看某个文件</h4><pre class=" language-shell"><code class="language-shell">Alex@alex:blog(master *)$wc -lcw package.json
      24      44     618 package.json</code></pre>
<h4 id="查看某目录下的所有文件-包括子目录"><a href="#查看某目录下的所有文件-包括子目录" class="headerlink" title="查看某目录下的所有文件(包括子目录)"></a>查看某目录下的所有文件(包括子目录)</h4><h5 id="查看blog-目录下命名后缀是html-文件所有的数量"><a href="#查看blog-目录下命名后缀是html-文件所有的数量" class="headerlink" title="查看blog 目录下命名后缀是html 文件所有的数量"></a>查看blog 目录下命名后缀是html 文件所有的数量</h5><pre class=" language-shell"><code class="language-shell">Alex@alex:blog$find blog/ -name "*.html"|wc -l
     199</code></pre>
<h4 id="目录下所有md文件代码行数"><a href="#目录下所有md文件代码行数" class="headerlink" title="目录下所有md文件代码行数"></a>目录下所有md文件代码行数</h4><pre><code>find blog/ -name &quot;*.md&quot; |xargs cat|wc -l</code></pre>
<p>或</p>
<pre><code> wc -l `find ./ -name &quot;*.md&quot;`|tail -n1</code></pre>
<h4 id="统计当前目录下文件个数"><a href="#统计当前目录下文件个数" class="headerlink" title="统计当前目录下文件个数"></a>统计当前目录下文件个数</h4><pre><code>ls -l |grep &quot;^-&quot;|wc -l</code></pre>
<h4 id="统计当前文件夹下目录的个数"><a href="#统计当前文件夹下目录的个数" class="headerlink" title="统计当前文件夹下目录的个数"></a>统计当前文件夹下目录的个数</h4><pre><code>ls -l |grep &quot;^d&quot;|wc -l</code></pre>
<h4 id="统计当前文件夹下文件的个数，包括子文件夹里的"><a href="#统计当前文件夹下文件的个数，包括子文件夹里的" class="headerlink" title="统计当前文件夹下文件的个数，包括子文件夹里的"></a>统计当前文件夹下文件的个数，包括子文件夹里的</h4><pre><code>ls -lR|grep &quot;^-&quot;|wc -l</code></pre>
<h4 id="统计文件夹下目录的个数，包括子文件夹里的"><a href="#统计文件夹下目录的个数，包括子文件夹里的" class="headerlink" title="统计文件夹下目录的个数，包括子文件夹里的"></a>统计文件夹下目录的个数，包括子文件夹里的</h4><pre><code>ls -lR|grep &quot;^d&quot;|wc -l</code></pre>
<h2 id="查看磁盘或文件夹大小"><a href="#查看磁盘或文件夹大小" class="headerlink" title="查看磁盘或文件夹大小"></a>查看磁盘或文件夹大小</h2><h3 id="显示磁盘分区上可以使用的磁盘空间"><a href="#显示磁盘分区上可以使用的磁盘空间" class="headerlink" title="显示磁盘分区上可以使用的磁盘空间"></a>显示磁盘分区上可以使用的磁盘空间</h3><pre class=" language-SH"><code class="language-SH">[root@QPDCCJK02 data]# df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vda1        20G  8.9G  9.9G  48% /
/dev/vdb1        20G  9.2G  9.4G  50% /data</code></pre>
<h3 id="查看当前目录大小"><a href="#查看当前目录大小" class="headerlink" title="查看当前目录大小"></a>查看当前目录大小</h3><pre><code>[root@QPDCCJK02 data]# du -sh 
9.2G    .</code></pre>
<h3 id="查看当前目录及其下级目录大小"><a href="#查看当前目录及其下级目录大小" class="headerlink" title="查看当前目录及其下级目录大小"></a>查看当前目录及其下级目录大小</h3><blockquote>
<p>du -lh –max-depth=<strong>x</strong>(x:值为1.2.3.4.5…表示显示多少级)</p>
</blockquote>
<pre><code>[root@QPDCCJK02 data]# du -lh --max-depth=1
536M    ./jac_workspace
3.3G    ./docker-bk
15M     ./deploy
44M     ./workspace
407M    ./test-lf-log-backup
1.5M    ./gagent_QA
45M     ./wwwroot
8.0K    ./gagent_Batch
4.9G    ./gagent
16K     ./lost+found
12M     ./gagent_Dev</code></pre>
<h3 id="查看指定目录大小"><a href="#查看指定目录大小" class="headerlink" title="查看指定目录大小"></a>查看指定目录大小</h3><pre><code>[root@QPDCCJK02 data]# du -sh gagent
4.9G    gagent</code></pre>
<h2 id="性能分析工具-TOP命令"><a href="#性能分析工具-TOP命令" class="headerlink" title="性能分析工具 TOP命令"></a>性能分析工具 TOP命令</h2><blockquote>
<p>TOP命令是Linux下常用的性能分析工具，能够实时显示系统中各个进程的资源占用状况</p>
</blockquote>
<p><strong>命令格式：</strong><br>top [-] [d] [p] [q] [c] [C] [S]    [n]</p>
<p><strong>查看某个用户下的所有进程</strong></p>
<pre><code>alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ top -u alex

PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
2763 alex      20   0 80420  16m  10m S   10  1.6   0:11.69 unity-panel-ser
2865 alex      20   0 62216 4160 3268 S    6  0.4   0:05.54 hud-service
2617 alex      20   0  4544 2144  632 S    4  0.2   0:05.30 dbus-daemon
2646 alex      20   0  134m  12m 9884 S    2  1.2   0:09.35 metacity
2667 alex      20   0  107m  22m  17m S    2  2.3   0:09.72 unity-2d-panel
2679 alex      20   0 49608 8884 6936 S    2  0.9   0:02.26 bamfdaemon
2681 alex      20   0  104m  13m  10m S    2  1.4   0:02.65 nm-apple</code></pre>
<p><strong>查看单独某个进程</strong></p>
<pre><code>alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ ps -a
  PID TTY          TIME CMD
 9463 pts/1    00:00:00 gizwits
 9471 pts/2    00:00:00 ps
alex@alex-virtual-machine:/mnt/hgfs/gagent/working/demo$ top -p 9463
PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
9463 alex      20   0 30424 1152  944 S    2  0.1   0:00.74 gizwits</code></pre>
<p><strong>说明</strong></p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">PID</td>
<td>进程的ID</td>
</tr>
<tr>
<td align="center">USER</td>
<td>进程所有者</td>
</tr>
<tr>
<td align="center">PR</td>
<td>进程的优先级别，越小越优先被执行</td>
</tr>
<tr>
<td align="center">NInice</td>
<td>值</td>
</tr>
<tr>
<td align="center">VIRT</td>
<td>进程占用的虚拟内存</td>
</tr>
<tr>
<td align="center">RES</td>
<td>进程占用的物理内存</td>
</tr>
<tr>
<td align="center">SHR</td>
<td>进程使用的共享内存</td>
</tr>
<tr>
<td align="center">S</td>
<td>进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数</td>
</tr>
<tr>
<td align="center">%CPU</td>
<td>进程占用CPU的使用率</td>
</tr>
<tr>
<td align="center">%MEM</td>
<td>进程使用的物理内存和总内存的百分比</td>
</tr>
<tr>
<td align="center">TIME+</td>
<td>该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。</td>
</tr>
<tr>
<td align="center">COMMAND</td>
<td>进程启动命令名称</td>
</tr>
</tbody></table>
<h2 id="运行日志输出到终端和保存起来"><a href="#运行日志输出到终端和保存起来" class="headerlink" title="运行日志输出到终端和保存起来"></a>运行日志输出到终端和保存起来</h2><hr>
<pre><code># 运行targe 目标，且同时把日志输出到终端和保存到文件log.txt
&gt;&gt;&gt;$ ./targe | tee log.txt</code></pre>
<h2 id="tree-命令"><a href="#tree-命令" class="headerlink" title="tree 命令"></a>tree 命令</h2><hr>
<p>此命令可以用树🌲形状显示目录结构；</p>
<h3 id="mac-下安装"><a href="#mac-下安装" class="headerlink" title="mac 下安装"></a>mac 下安装</h3><pre><code>brew install tree</code></pre>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>tree(选项)(参数)</code></pre>
<h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><pre><code>-a：显示所有文件和目录；
-A：使用ASNI绘图字符显示树状图而非以ASCII字符组合；
-C：在文件和目录清单加上色彩，便于区分各种类型；
-d：先是目录名称而非内容；
-D：列出文件或目录的更改时间；
-f：在每个文件或目录之前，显示完整的相对路径名称；
-F：在执行文件，目录，Socket，符号连接，管道名称名称，各自加上&quot;*&quot;，&quot;/&quot;，&quot;@&quot;，&quot;|&quot;号；
-g：列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码；
-i：不以阶梯状列出文件和目录名称；
-l：&lt;范本样式&gt; 不显示符号范本样式的文件或目录名称；
-l：如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录；
-n：不在文件和目录清单加上色彩；
-N：直接列出文件和目录名称，包括控制字符；
-p：列出权限标示；
-P：&lt;范本样式&gt; 只显示符合范本样式的文件和目录名称；
-q：用“？”号取代控制字符，列出文件和目录名称；
-s：列出文件和目录大小；
-t：用文件和目录的更改时间排序；
-u：列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码；
-x：将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该目录予以排除在寻找范围外。</code></pre>
<h2 id="查看socket-端口占用情况"><a href="#查看socket-端口占用情况" class="headerlink" title="查看socket 端口占用情况"></a>查看socket 端口占用情况</h2><p><strong><code>netstat -tunlp |grep 端口号</code></strong></p>
<p><strong>说明</strong></p>
<blockquote>
<p>-t (tcp) 仅显示tcp相关选项<br>                                 -u (udp)仅显示udp相关选项<br>                                 -n 拒绝显示别名，能显示数字的全部转化为数字<br>                                 -l 仅列出在Listen(监听)的服务状态<br>                                 -p 显示建立相关链接的程序名</p>
</blockquote>
<h2 id="显示命令执行时的参数"><a href="#显示命令执行时的参数" class="headerlink" title="显示命令执行时的参数"></a>显示命令执行时的参数</h2><pre><code>ps -aux | grep CMD</code></pre>
<h2 id="ubuntu-防火墙"><a href="#ubuntu-防火墙" class="headerlink" title="ubuntu 防火墙"></a>ubuntu 防火墙</h2><pre class=" language-sh"><code class="language-sh"># 查看状态
sudo ufw status  
# 开启
sudo ufw enable  
# 默认关闭外部访问
sudo ufw default deny 
# 新增端口
sudo ufw allow 8080  
# 删除端口
sudo ufw delete allow 8080
# 允许特定来源的ip地址访问
sudo ufw allow from 192.168.1.1</code></pre>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ul>
<li>删除目录下大小为0的文件</li>
</ul>
<pre class=" language-SH"><code class="language-SH"> find ./ -name "*" -type f -size 0c | xargs -n 1 rm -f</code></pre>
<ul>
<li>删除当前目录下面所有 test 文件夹下面的文件 </li>
</ul>
<pre class=" language-SH"><code class="language-SH"> find ./ -name "test" -type d -exec rm -rf &#123;&#125; ;</code></pre>
<ul>
<li>删除文件夹下面的所有的.py文件</li>
</ul>
<pre><code>find ./ -name &#39;.py&#39; -exec rm -rf &#123;&#125; ;</code></pre>
<ul>
<li>显示当前路径下，大于50M的文件</li>
</ul>
<pre><code>find ./ -size +50M</code></pre>
<ul>
<li>删除当前路径下，大于50M的文件</li>
</ul>
<pre><code>find ./ -size +50M -exec rm &#123;&#125; \;</code></pre>
<h2 id="Linux-下测试TCP-UDP-连通性"><a href="#Linux-下测试TCP-UDP-连通性" class="headerlink" title="Linux 下测试TCP/UDP 连通性"></a>Linux 下测试TCP/UDP 连通性</h2><p><strong>通过netcat软件实现</strong></p>
<ul>
<li>Ubuntu 安装 <code>apt install netcat</code></li>
<li>CentOS 安装 <code>yum install nc</code> </li>
</ul>
<p><strong>测试方法</strong></p>
<ul>
<li>服务器<pre class=" language-sh"><code class="language-sh"> ubuntu@VM-133-112-ubuntu:~$ nc -l -u 1885</code></pre>
</li>
<li>客户端<pre class=" language-sh"><code class="language-sh"> alexlin@DESKTOP-2Q06681:/mnt/e/work/gagent/GAgent_HFX30$ nc -u ubuntu.xxxxxx.com 1885</code></pre>
<img src="/images/nc.gif" alt="nc"></li>
</ul>
<p><strong>Help</strong></p>
<pre class=" language-sh"><code class="language-sh">ubuntu@VM-133-112-ubuntu:~$ nc -help
OpenBSD netcat (Debian patchlevel 1.187-1ubuntu0.1)
usage: nc [-46CDdFhklNnrStUuvZz] [-I length] [-i interval] [-M ttl]
          [-m minttl] [-O length] [-P proxy_username] [-p source_port]
          [-q seconds] [-s source] [-T keyword] [-V rtable] [-W recvlimit] [-w timeout]
          [-X proxy_protocol] [-x proxy_address[:port]]           [destination] [port]
        Command Summary:
                -4              Use IPv4
                -6              Use IPv6
                -b              Allow broadcast
                -C              Send CRLF as line-ending
                -D              Enable the debug socket option
                -d              Detach from stdin
                -F              Pass socket fd
                -h              This help text
                -I length       TCP receive buffer length
                -i interval     Delay interval for lines sent, ports scanned
                -k              Keep inbound sockets open for multiple connects
                -l              Listen mode, for inbound connects
                -M ttl          Outgoing TTL / Hop Limit
                -m minttl       Minimum incoming TTL / Hop Limit
                -N              Shutdown the network socket after EOF on stdin
                -n              Suppress name/port resolutions
                -O length       TCP send buffer length
                -P proxyuser    Username for proxy authentication
                -p port         Specify local port for remote connects
                -q secs         quit after EOF on stdin and delay of secs
                -r              Randomize remote ports
                -S              Enable the TCP MD5 signature option
                -s source       Local source address
                -T keyword      TOS value
                -t              Answer TELNET negotiation
                -U              Use UNIX domain socket
                -u              UDP mode
                -V rtable       Specify alternate routing table
                -v              Verbose
                -W recvlimit    Terminate after receiving a number of packets
                -w timeout      Timeout for connects and final net reads
                -X proto        Proxy protocol: "4", "5" (SOCKS) or "connect"
                -x addr[:port]  Specify proxy address and port
                -Z              DCCP mode
                -z              Zero-I/O mode [used for scanning]
        Port numbers can be individual or ranges: lo-hi [inclusive]</code></pre>
<h2 id="dos2unix批量转换方法"><a href="#dos2unix批量转换方法" class="headerlink" title="dos2unix批量转换方法"></a>dos2unix批量转换方法</h2><pre><code>find /apps/cws -name &quot;*.sh&quot; -exec dos2unix &#123;&#125; \;       （注意：一定要有&#123;&#125;，标示参数；以“\;”结尾； &#123;&#125; 和\之间一定要有一个空格）</code></pre>
<h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><h3 id="删除指定目录下10天前产生的文件"><a href="#删除指定目录下10天前产生的文件" class="headerlink" title="删除指定目录下10天前产生的文件"></a>删除指定目录下10天前产生的文件</h3><pre><code>find . -mtime +10 -name &quot;*.*&quot; -exec rm -rf &#123;&#125; \;</code></pre>
<p><strong>解释<br></strong><br>-mtime：标准语句写法<br><br>＋10：查找10天前的文件，这里用数字代表天数，＋30表示查找30天前的文件<br><br>“<em>.</em>“：希望查找的数据类型，”<em>.jpg”表示查找扩展名为jpg的所有文件，”</em>“表示查找所有文件<br><br>-exec：固定写法<br><br>rm -rf：强制删除文件，包括目录<br><br>{} ; ：固定写法，一对大括号+空格+\+;<br></p>
<h2 id="库文件查看工具"><a href="#库文件查看工具" class="headerlink" title="库文件查看工具"></a>库文件查看工具</h2><h3 id="linux下查看程序的动态库依赖-so"><a href="#linux下查看程序的动态库依赖-so" class="headerlink" title="linux下查看程序的动态库依赖(so)"></a>linux下查看程序的动态库依赖(so)</h3><pre><code>ldd xxx</code></pre>
<p>例子如下，左边是依赖库名称，右边是依赖库位置(若存在则为路径，不存在则输出<code>not found</code>)<br>    <img src="/images/pasted-106.png" alt="upload successful"></p>
<h3 id="查看库文件-a-包含的函数和变量"><a href="#查看库文件-a-包含的函数和变量" class="headerlink" title="查看库文件(.a)包含的函数和变量"></a>查看库文件(.a)包含的函数和变量</h3><pre class=" language-sh"><code class="language-sh">nm xxx.a</code></pre>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://www.comptechdoc.org/os/linux/programming/c/linux_pgc.html">http://www.comptechdoc.org/os/linux/programming/c/linux_pgc.html</a></li>
<li><a href="http://man.linuxde.net/">Linux在线man</a></li>
</ol>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础使用技巧</title>
    <url>/2020/04/08/b6de.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="依赖文件requirements生成和安装"><a href="#依赖文件requirements生成和安装" class="headerlink" title="依赖文件requirements生成和安装"></a>依赖文件requirements生成和安装</h2><ul>
<li>生成</li>
</ul>
<pre class=" language-py"><code class="language-py">pip freeze > requirements.txt</code></pre>
<ul>
<li>安装</li>
</ul>
<pre class=" language-py"><code class="language-py">pip install -r requirements.txt</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Git之技能记录</title>
    <url>/2018/02/11/3432.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一-Git-功能预览图"><a href="#一-Git-功能预览图" class="headerlink" title="一. Git 功能预览图"></a>一. Git 功能预览图</h2><p><img src="http://upload-images.jianshu.io/upload_images/1736256-510243b84e2d36f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Git"></p>
<a id="more"></a>

<h2 id="二-tag"><a href="#二-tag" class="headerlink" title="二. tag"></a>二. tag</h2><ul>
<li>列出所有tag</li>
</ul>
<pre><code>$ git tag -l</code></pre>
<ul>
<li>打tag</li>
</ul>
<pre><code>$ git tag &#39;tag&#39;</code></pre>
<ul>
<li>打tag 加注释</li>
</ul>
<pre><code>$ git tag -a [tag name] -m [message]</code></pre>
<ul>
<li>删除本地tag</li>
</ul>
<pre><code>$ git tag -d [tag]</code></pre>
<ul>
<li>删除远程tag</li>
</ul>
<pre><code>git push origin --delete tag &lt;tagname&gt;</code></pre>
<ul>
<li>查看tag信息</li>
</ul>
<pre><code>$ git show [tag]</code></pre>
<ul>
<li>提交指定tag</li>
</ul>
<pre><code>$ git push [remote] [tag]
</code></pre>
<p>例如，将v1.0标签推送到远程服务器上</p>
<pre><code>$ git push origin v1.0</code></pre>
<ul>
<li>提交所有tag</li>
</ul>
<pre><code>$ git push [remote] --tags</code></pre>
<h2 id="三-git-信息查询"><a href="#三-git-信息查询" class="headerlink" title="三. git 信息查询"></a>三. git 信息查询</h2><ul>
<li>查看远程仓库信息</li>
</ul>
<pre><code>$ git remote -v</code></pre>
<ul>
<li>查看分支</li>
</ul>
<pre><code>$ git branch -a</code></pre>
<ul>
<li>查看分支合并图</li>
</ul>
<pre><code>git log --graph</code></pre>
<h2 id="四-工程设置"><a href="#四-工程设置" class="headerlink" title="四. 工程设置"></a>四. 工程设置</h2><ul>
<li>更新远程仓库</li>
</ul>
<pre><code>git remote set-url origin git@gitlab.gizwits.com:********.git</code></pre>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2017/03/26/3eeb.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo自动备份教程</title>
    <url>/2017/08/01/5973.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://notes.wanghao.work/2015-07-06-%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html">连接</a></p>
]]></content>
  </entry>
  <entry>
    <title>STM32CubeIDE使用笔记</title>
    <url>/2020/08/07/e305.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="STM32时钟源-HSI-HSE-LSI-LSE-PLL"><a href="#STM32时钟源-HSI-HSE-LSI-LSE-PLL" class="headerlink" title="STM32时钟源(HSI/HSE/LSI/LSE/PLL)"></a>STM32时钟源(HSI/HSE/LSI/LSE/PLL)</h2><ol>
<li><strong>HSI</strong> 是高速内部时钟，RC振荡器，频率为8MHz;</li>
<li><strong>HSE</strong> 是高速外部时钟，可接石英/陶瓷谐振器，或者接外部时钟源，频率范围为4MHz~16MHz</li>
<li><strong>LSI</strong> 是低速内部时钟，RC振荡器，频率为40kHz;</li>
<li><strong>LSE</strong> 是低速外部时钟，接频率为32.768kHz的石英晶体;</li>
<li><strong>PLL</strong> 为锁相环倍频输出，其时钟输入源可选择为HSI/2、HSE或者HSE/2。倍频可选择为2~16倍，但是其输出频率最大不得超过72MHz。</li>
</ol>
<blockquote>
<p><strong>注意:</strong><br>其中40kHz的LSI(低速内部时钟)供独立看门狗IWDG使用，另外它还可以被选择为实时时钟RTC的时钟源。另外，实时时钟RTC的时钟源还可以选择LSE(低速外部时钟)，或者是HSE(高速外部时钟)的128分频。RTC的时钟源通过RTCSEL[1:0]来选择。</p>
</blockquote>
<h3 id="SYSCLK时钟"><a href="#SYSCLK时钟" class="headerlink" title="SYSCLK时钟"></a>SYSCLK时钟</h3><blockquote>
<p><strong>SYSCLK</strong>系统时钟最大频率为72MHz，它是供STM32中绝大部分部件工作的时钟源;</p>
</blockquote>
<ol>
<li>送给AHB总线、内核、内存和DMA使用的HCLK时钟；</li>
<li>分频后送给STM32芯片的系统定时器时钟（<code>Systick=Sysclk/8=9Mhz</code>），直接调用  <code>void sysTickTimerInit ( void )</code>  选择时钟源 <code>SysTick_CLKSourceConfig ( SysTick_CLKSource_HCLK_Div8 )</code>   即可使能；</li>
<li>直接送给Cortex的自由运行时钟(free running clock)FCLK。【<strong>注：</strong>FCLK 为处理器的自由振荡的处理器时钟，用来采样中断和为调试模块计时。在处理器休眠时，通过FCLK 保证可以采样到中断和跟踪休眠事件。 Cortex-M3内核的“自由运行时钟(free running clock)”FCLK。<strong>“自由”</strong>表现在它不来自系统时钟HCLK，因此在系统时钟停止时FCLK 也继续运行。FCLK和HCLK 互相同步。FCLK 是一个自由振荡的HCLK。FCLK 和HCLK 应该互相平衡，保证进入Cortex-M3 时的延迟相同。】；</li>
<li>送给APB1分频器。APB1分频器可选择1、2、4、8、16分频，其输出一路供APB1外设使用(PCLK1，最大频率36MHz)，另一路送给定时器(Timer)2、3、4倍频器使用。该倍频器可选择1或者2倍频，时钟输出供定时器2、3、4使用；</li>
<li>送给APB2分频器。APB2分频器可选择1、2、4、8、16分频， 其输出一路供APB2外设使用(PCLK2，最大频率72MHz)，另一路送给定时器(Timer)1倍频器使用。该倍频器可选择1或者2倍频，时钟输出 供定时器1使用。另外，APB2分频器还有一路输出供ADC分频器使用，分频后送给ADC模块使用。ADC分频器可选择为2、4、6、8分频；</li>
</ol>
<p><strong>备注:</strong></p>
<ul>
<li>FCLK为供给CPU内核的时钟信号，我们所说的cpu主频为XXXXMHz，就是指的这个时钟信号，相应的，1/Fclk即为cpu时钟周期</li>
<li>HCLK为优秀的高性能总线（AHB bus peripherals）供给时钟信号（AHB为advanced high-performance bus）；HCLK ：AHB总线时钟，由系统时钟SYSCLK 分频得到，一般不分频，等于系统时钟，HCLK是高速外设时钟，是<strong>给外部设备的，比如内存，flash</strong>。</li>
<li>PCLK为优秀的高性能外设总线（APB bus peripherals）供给时钟信号（其中APB为advanced peripherals bus）；</li>
</ul>
<h2 id="总线—APB和AHB"><a href="#总线—APB和AHB" class="headerlink" title="总线—APB和AHB"></a>总线—APB和AHB</h2><ul>
<li><strong>APB</strong> Advanced Peripheral Bus的缩写，这是一种外围总线；</li>
</ul>
<h3 id="APB1总线外设"><a href="#APB1总线外设" class="headerlink" title="APB1总线外设"></a>APB1总线外设</h3><ul>
<li>定时器TIM2到TIM7；</li>
<li>RTC；</li>
<li>WDT看门狗；</li>
<li>SPI2 、SPI3；</li>
<li>USART2、USART3；</li>
<li>UART4、UART5；</li>
<li>I2C1，I2C2；</li>
<li>USB./CAN共享的512字节SRAM；</li>
<li>bXCAN1、bXCAN2；</li>
<li>后备寄存器BKP；</li>
<li>电源控制PWR；</li>
<li>DAC</li>
</ul>
<h3 id="APB2总线外设"><a href="#APB2总线外设" class="headerlink" title="APB2总线外设"></a>APB2总线外设</h3><ul>
<li>USART1；</li>
<li>高级控制定时器TIM1和TIM8；</li>
<li>模数转换器ADC1、ADC2、ADC3；</li>
<li>SPI1；</li>
<li>外部中断EXTI；</li>
<li>复用IO，AFIO；</li>
<li>通用IO：GPIOA~G；</li>
</ul>
<h3 id="AHB外设"><a href="#AHB外设" class="headerlink" title="AHB外设"></a>AHB外设</h3><ul>
<li><p><strong>AHB</strong> Advanced High performance Bus的缩写，译作高级高性能总线，这是一种“系统总线”。</p>
</li>
<li><p>Flash 存储器；</p>
</li>
<li><p>DMA；</p>
</li>
<li><p>复位和时钟控制；</p>
</li>
<li><p>CRC;</p>
</li>
<li><p>以太网；</p>
</li>
<li><p>SDIO；</p>
</li>
</ul>
<h3 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h3><ul>
<li>USART1 串口模式</li>
</ul>
<table>
<thead>
<tr>
<th align="left">模式</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Sigle Wire(Half-Duplex)</td>
<td align="left">半双工</td>
</tr>
<tr>
<td align="left">Asynchronous</td>
<td align="left">异步</td>
</tr>
<tr>
<td align="left">synchronous</td>
<td align="left">同步</td>
</tr>
<tr>
<td align="left">SmartCard</td>
<td align="left">智能卡</td>
</tr>
<tr>
<td align="left">lrDA</td>
<td align="left">红外线数据协会) SIR ENDEC 规范</td>
</tr>
<tr>
<td align="left">LIN</td>
<td align="left">支持局域互连网络</td>
</tr>
<tr>
<td align="left">Multiprocessor Communication</td>
<td align="left">多机串口通信</td>
</tr>
</tbody></table>
<h2 id="CubeIDE-Debug设置"><a href="#CubeIDE-Debug设置" class="headerlink" title="CubeIDE Debug设置"></a>CubeIDE Debug设置</h2><ol>
<li>设置调试器(这里以ST-LINK为例子)<br><img src="/images/pasted-108.png" alt="upload successful"></li>
<li>出现以下提示，需要下载对应的ST-Link Server<br><img src="/images/pasted-109.png" alt="upload successful"></li>
<li>升级ST-Link 固件<br><img src="/images/pasted-110.png" alt="upload successful"><br><img src="/images/pasted-111.png" alt="upload successful"><br><img src="/images/pasted-112.png" alt="upload successful"></li>
<li>设置SW 调试引脚，不然不能在线调试(这个细节我被坑了┭┮﹏┭┮)<br><img src="/images/pasted-113.png" alt="upload successful"></li>
</ol>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.waveshare.net/study/article-629-1.html">https://www.waveshare.net/study/article-629-1.html</a></li>
</ul>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS小技能</title>
    <url>/2018/12/10/d7f9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h2><h3 id="iTerm2-SSH免密码远程连接服务器"><a href="#iTerm2-SSH免密码远程连接服务器" class="headerlink" title="iTerm2 SSH免密码远程连接服务器"></a>iTerm2 SSH免密码远程连接服务器</h3><pre class=" language-sh"><code class="language-sh">#!/usr/bin/expect

set timeout 30
spawn ssh -p [lindex $argv 0] [lindex $argv 1]@[lindex $argv 2]
expect &#123;
        "(yes/no)?"
        &#123;send "yes\n";exp_continue&#125;
        "password:"
        &#123;send "[lindex $argv 3]\n"&#125;
&#125;
expect "~"
send "clear\n"
interact</code></pre>
<a id="more"></a>
<p>解说<br>这里<code>[lindex argv0]</code>，<code>[lindexargv0]</code>，<code>[lindexargv 1]</code>， <code>[lindex argv2]</code>，<code>[lindexargv2]</code>，<code>[lindexargv 3]</code>分别代表着4个参数。分别是：端口号、用户名、服务器地址、密码。</p>
<h3 id="iTerm2-界面设置如下"><a href="#iTerm2-界面设置如下" class="headerlink" title="iTerm2 界面设置如下"></a>iTerm2 界面设置如下</h3><p><img src="https://upload-images.jianshu.io/upload_images/1736256-40764b317275b7a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iTerm2"></p>
<h3 id="SSH-免密登陆到服务器"><a href="#SSH-免密登陆到服务器" class="headerlink" title="SSH 免密登陆到服务器"></a>SSH 免密登陆到服务器</h3><ol>
<li>拷贝公钥到服务器<pre><code>scp -p ~/.ssh/id_rsa.pub ubuntu@10.10.10.10:/home/ubuntu/.ssh/authorized_keys</code></pre>
</li>
<li>ssh 配置文件设置<br><br> <code>/Users/alex/.ssh/config</code><br>设置如下<br><img src="/images/ssh_config.png" alt="ssh_config"></li>
</ol>
]]></content>
      <categories>
        <category>macOS</category>
      </categories>
      <tags>
        <tag>macOS</tag>
        <tag>uninx</tag>
      </tags>
  </entry>
  <entry>
    <title>Tool 记</title>
    <url>/2017/03/26/bff4.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="工具1–esptool"><a href="#工具1–esptool" class="headerlink" title="工具1–esptool"></a>工具1–esptool</h1><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法:"></a>安装方法:</h2><p>1.超级简单按照方法</p>
<pre class=" language-bash"><code class="language-bash"> $  pip <span class="token function">install</span> esptool</code></pre>
<p>2.源码安装方法.</p>
<pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true"># 下载源码</span>
 $ git@github.com:themadinventor/esptool.git
 <span class="token comment" spellcheck="true">#安装依赖</span>
 $ pip <span class="token function">install</span> pyserial, easy_install pyserial
 <span class="token comment" spellcheck="true">#或者 depending on your platform.</span>
 $ <span class="token function">apt-get</span> <span class="token function">install</span> python-serial</code></pre>
<a id="more"></a>

<h2 id="帮助说明"><a href="#帮助说明" class="headerlink" title="帮助说明"></a>帮助说明</h2><pre><code>esptool.py write_flash -h</code></pre>
<h2 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子:"></a>使用例子:</h2><pre><code>sudo python esptool.py --port /dev/ttyUSB0 --baud 1500000 \
write_flash -fm qio -fs 32m -ff 40m 0x3fc000 ../bin/0x3fc000.bin</code></pre>
<h2 id="几个文件一起烧录"><a href="#几个文件一起烧录" class="headerlink" title="几个文件一起烧录"></a>几个文件一起烧录</h2><pre><code>sudo esptool.py --port /dev/tty.usbserial-DA00H0QE \
--baud 1500000 write_flash -fm qio -fs 32m -ff 40m 0x00000 \
../boot_v1.6.bin 0x01000 user1.4096.new.6.bin 0x3fc000 \
../esp_init_data_default.bin 0x3fe000 ../blank.bin </code></pre>
<h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>|关键字| 解释|<br>|—-|<br>|<strong>port</strong>|                 指定串口号|<br>|<strong>baud</strong>|               指定下载波特率<br>|<strong>write_flash</strong>|      烧写二进制文件到指定位置<br>|<strong>-fm</strong>|                  SPI Flash mode( ‘qio’, ‘qout’, ‘dio’, ‘dout’)<br>|<strong>-ff</strong>|                    SPI Flash frequency(‘40m’, ‘26m’, ‘20m’, ‘80m’)<br>|<strong>-fs</strong>|                   SPI Flash size in Mbit(4m’, ‘2m’, ‘8m’, ‘16m’, ‘32m’, ‘16m-c1’, ‘32m-c1’, ‘32m-c2’, ‘64m’, ‘128m’)<br>|<strong>0x3fc000</strong>|         指定烧录地址<br>|<strong>0x3fc000.bin</strong>|   对应的烧录文件</p>
]]></content>
      <categories>
        <category>esp8266</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
        <tag>WiFi</tag>
        <tag>esptool</tag>
      </tags>
  </entry>
  <entry>
    <title>vscode配置</title>
    <url>/2019/08/26/fc74.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vscode终端Terminal显示zsh的字体设置"><a href="#Vscode终端Terminal显示zsh的字体设置" class="headerlink" title="Vscode终端Terminal显示zsh的字体设置"></a>Vscode终端Terminal显示zsh的字体设置</h2><ul>
<li><p>没有设置之前的效果<br><img src="/images/zsh01.png" alt="zsh2"></p>
</li>
<li><p>安装<a href="https://github.com/powerline/fonts/blob/master/Meslo%20Slashed/Meslo%20LG%20M%20Regular%20for%20Powerline.ttf">Meslo LG M for Powerline</a> 后，配置VsCode<br><br><img src="/images/Meslo.png" alt="Meslo"></p>
</li>
<li><p>安装后效果<br><img src="/images/zsh02.png" alt="zsh2"></p>
</li>
</ul>
<a id="more"></a>

<h2 id="vscode-配置同步"><a href="#vscode-配置同步" class="headerlink" title="vscode 配置同步"></a>vscode 配置同步</h2><ul>
<li><strong>安装插件 <code>sync</code></strong><br><img src="/images/pasted-2.png" alt="upload successful"></li>
<li><strong>登录<code>github</code>账号获取<code>token</code></strong><br><img src="/images/pasted-3.png" alt="upload successful"><br><img src="/images/pasted-4.png" alt="upload successful"></li>
<li><strong>上传配置</strong><br><br>快捷键: <code>shift+alt+u</code> 在弹出来的框里面填入<code>token</code>,然后再输出哪里能看到生成一个<code>GitHub Gist</code><br>用于另外一台机器下载配置；</li>
<li><strong>下载配置</strong> <br><br>填入gist id,如下图<br><img src="/images/pasted-6.png" alt="upload successful"><br><br>快捷键:<code>shift+alt+d</code> 下载配置<br><img src="/images/pasted-7.png" alt="upload successful"></li>
</ul>
<h2 id="头文件配置"><a href="#头文件配置" class="headerlink" title="头文件配置"></a>头文件配置</h2><ul>
<li><p>安装插件 : <code>C/C++ for Visual Studio Code</code><br><img src="/images/pasted-8.png" alt="upload successful"></p>
</li>
<li><p>配置 : <code>IntelliSense</code><br></p>
<blockquote>
<p>安装完成之后，打开你的包含c++的文件夹，将会生成一个.vscode文件夹，所有的配置将在这个文件夹中进行配置。</p>
</blockquote>
</li>
</ul>
<p>ctrl+shift+P打开Command Palette,运行C/Cpp: Edit configurations…生成c_cpp_properties.json：<br><br><strong>比如我的配置文件如下:</strong><br><img src="/images/pasted-9.png" alt="upload successful"></p>
]]></content>
      <tags>
        <tag>go</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>QT 笔记</title>
    <url>/2020/05/04/8182.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h2><ul>
<li> <a href="https://doc.qt.io/qt-5/index.html">官方文档</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>win10子系统wsl</title>
    <url>/2019/08/21/d9b0.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="子系统重启wsl"><a href="#子系统重启wsl" class="headerlink" title="子系统重启wsl"></a>子系统重启wsl</h2><p>管理员权限下:</p>
<pre class=" language-sh"><code class="language-sh">net stop LxssManager
net start LxssManager</code></pre>
<h2 id="子系统在win10的默认位置"><a href="#子系统在win10的默认位置" class="headerlink" title="子系统在win10的默认位置"></a>子系统在win10的默认位置</h2><pre class=" language-sh"><code class="language-sh">C:\Users\87832\AppData\Local\Packages\CanonicalGroupLimited.Ubuntu18.04onWindows_79rhkp1fndgsc\LocalState</code></pre>
<p><img src="/images/pasted-1.png" alt="upload successful"></p>
]]></content>
      <tags>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>golang之环境搭建</title>
    <url>/2019/09/08/b098.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h2 id="宿主机环境"><a href="#宿主机环境" class="headerlink" title="宿主机环境"></a>宿主机环境</h2><pre class=" language-SH"><code class="language-SH">Linux VM-133-112-ubuntu 4.15.0-54-generic #58-Ubuntu SMP Mon Jun 24 10:55:24 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux</code></pre>
<ul>
<li><a href="https://golang.org/dl/">安装包下载</a><pre class=" language-sh"><code class="language-sh">ubuntu@VM-133-112-ubuntu:~$ wget https://dl.google.com/go/go1.13.linux-amd64.tar.gz</code></pre>
</li>
<li>解压压缩包到指定目录: <code>/usr/local</code><pre class=" language-sh"><code class="language-sh"> ubuntu@VM-133-112-ubuntu:~/golang$ sudo tar -C /usr/local/ -xzf go1.13.linux-amd64.tar.gz </code></pre>
</li>
<li>设置环境变量<pre class=" language-sh"><code class="language-sh">export PATH=$PATH:/usr/local/go/bin</code></pre>
</li>
<li><strong>go env</strong> 命令正常输出即环境搭建成功；</li>
</ul>
<h3 id="项目结构组织"><a href="#项目结构组织" class="headerlink" title="项目结构组织"></a>项目结构组织</h3><ul>
<li>指定<code>GOPATH</code>,项目的构建基于此变量，此变量指定项目路径，多个项目用<code>;</code>分隔</li>
<li>Golang项目目录下一般有三个子目录：<ul>
<li>src存放源代码</li>
<li>pkg编译后生成的文件</li>
<li>bin编译后生成的可执行文件</li>
</ul>
</li>
</ul>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><pre class=" language-go"><code class="language-go"><span class="token operator">&lt;</span>proj<span class="token operator">></span>
   <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">&lt;</span>src<span class="token operator">></span>
       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">&lt;</span>a<span class="token operator">></span>
           <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">&lt;</span>a1<span class="token operator">></span>
               <span class="token operator">|</span><span class="token operator">--</span>al<span class="token punctuation">.</span><span class="token keyword">go</span>
           <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">&lt;</span>a2<span class="token operator">></span>
               <span class="token operator">|</span><span class="token operator">--</span>a2<span class="token punctuation">.</span><span class="token keyword">go</span>
       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">&lt;</span>b<span class="token operator">></span>
           <span class="token operator">|</span><span class="token operator">--</span>b1<span class="token punctuation">.</span><span class="token keyword">go</span>
           <span class="token operator">|</span><span class="token operator">--</span>b2<span class="token punctuation">.</span><span class="token keyword">go</span>
       <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">&lt;</span>c<span class="token operator">></span>
           <span class="token operator">|</span><span class="token operator">--</span>c<span class="token punctuation">.</span><span class="token keyword">go</span>
   <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">&lt;</span>pkg<span class="token operator">></span>
   <span class="token operator">|</span><span class="token operator">--</span><span class="token operator">&lt;</span>bin<span class="token operator">></span></code></pre>
<h2 id="关键字（-25个-）"><a href="#关键字（-25个-）" class="headerlink" title="关键字（_25个_）"></a>关键字（_25个_）</h2><table>
<thead>
<tr>
<th align="left">关键字</th>
<th align="left">关键字</th>
<th align="left">关键字</th>
<th align="left">关键字</th>
<th align="left">关键字</th>
</tr>
</thead>
<tbody><tr>
<td align="left">break</td>
<td align="left">default</td>
<td align="left">func</td>
<td align="left">interface</td>
<td align="left">select</td>
</tr>
<tr>
<td align="left">case</td>
<td align="left">defer</td>
<td align="left">go</td>
<td align="left">map</td>
<td align="left">struct</td>
</tr>
<tr>
<td align="left">chan</td>
<td align="left">else</td>
<td align="left">goto</td>
<td align="left">package</td>
<td align="left">switch</td>
</tr>
<tr>
<td align="left">const</td>
<td align="left">fallthrough</td>
<td align="left">if</td>
<td align="left">range</td>
<td align="left">type</td>
</tr>
<tr>
<td align="left">continue</td>
<td align="left">for</td>
<td align="left">import</td>
<td align="left">return</td>
<td align="left">var</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>linux 工具函数之网络工具函数</title>
    <url>/2017/03/26/7a56.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<p>**本地IP、子网掩码、网关、MAC地址 获取方法 **</p>
<a id="more"></a>

<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>      </span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;ifaddrs.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netinet/in.h></span> </span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span> </span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;net/if.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;linux/sockios.h></span></span>

<span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">getLocalIp</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>  
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
    <span class="token keyword">int</span> sock_get_ip<span class="token punctuation">;</span>  
    <span class="token keyword">char</span> ipaddr<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  

    <span class="token keyword">struct</span>   sockaddr_in <span class="token operator">*</span>sin<span class="token punctuation">;</span>  
    <span class="token keyword">struct</span>   ifreq ifr_ip<span class="token punctuation">;</span>     

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sock_get_ip<span class="token operator">=</span><span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
         <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket create failse...GetLocalIp!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
         <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  

    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifr_ip<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ifr_ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token comment" spellcheck="true">//指定网卡为 eth0 </span>
    <span class="token function">strncpy</span><span class="token punctuation">(</span>ifr_ip<span class="token punctuation">.</span>ifr_name<span class="token punctuation">,</span> <span class="token string">"eth0"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ifr_ip<span class="token punctuation">.</span>ifr_name<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     

    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">ioctl</span><span class="token punctuation">(</span> sock_get_ip<span class="token punctuation">,</span> SIOCGIFADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ifr_ip<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>     
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     
         <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>       
    sin <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr_in <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>ifr_ip<span class="token punctuation">.</span>ifr_addr<span class="token punctuation">;</span>     
    <span class="token function">strcpy</span><span class="token punctuation">(</span>ipaddr<span class="token punctuation">,</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>sin<span class="token operator">-></span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"local net adapter:[ %-5s ] ip_v4 [ %-20s ]\n"</span><span class="token punctuation">,</span> <span class="token string">"eth0"</span><span class="token punctuation">,</span> ipaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token function">close</span><span class="token punctuation">(</span> sock_get_ip <span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  
<span class="token keyword">void</span> <span class="token function">getlocalIp2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> ifaddrs <span class="token operator">*</span> ifAddrStruct<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>  
    <span class="token keyword">void</span> <span class="token operator">*</span> tmpAddrPtr<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>  

    <span class="token function">getifaddrs</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifAddrStruct<span class="token punctuation">)</span><span class="token punctuation">;</span>  

   <span class="token comment" spellcheck="true">//获取所有网卡的ip</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ifAddrStruct<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span>   
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ifAddrStruct<span class="token operator">-></span>ifa_addr<span class="token operator">-></span>sa_family<span class="token operator">==</span>AF_INET<span class="token punctuation">)</span>  
        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// check it is IP4  </span>
            <span class="token comment" spellcheck="true">// is a valid IP4 Address  </span>
            tmpAddrPtr <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr_in <span class="token operator">*</span><span class="token punctuation">)</span>ifAddrStruct<span class="token operator">-></span>ifa_addr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">;</span>  
            <span class="token keyword">char</span> addressBuffer<span class="token punctuation">[</span>INET_ADDRSTRLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>  
            <span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> tmpAddrPtr<span class="token punctuation">,</span> addressBuffer<span class="token punctuation">,</span> INET_ADDRSTRLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"local net adapter:[ %-5s ] ip_v4 [ %-20s ]\n"</span><span class="token punctuation">,</span> ifAddrStruct<span class="token operator">-></span>ifa_name<span class="token punctuation">,</span> addressBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ifAddrStruct<span class="token operator">-></span>ifa_addr<span class="token operator">-></span>sa_family<span class="token operator">==</span>AF_INET6<span class="token punctuation">)</span>  
        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// check it is IP6  </span>
            <span class="token comment" spellcheck="true">// is a valid IP6 Address  </span>
            tmpAddrPtr<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> sockaddr_in <span class="token operator">*</span><span class="token punctuation">)</span>ifAddrStruct<span class="token operator">-></span>ifa_addr<span class="token punctuation">)</span><span class="token operator">-></span>sin_addr<span class="token punctuation">;</span>  
            <span class="token keyword">char</span> addressBuffer<span class="token punctuation">[</span>INET6_ADDRSTRLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>  
            <span class="token function">inet_ntop</span><span class="token punctuation">(</span>AF_INET6<span class="token punctuation">,</span> tmpAddrPtr<span class="token punctuation">,</span> addressBuffer<span class="token punctuation">,</span> INET6_ADDRSTRLEN<span class="token punctuation">)</span><span class="token punctuation">;</span>  
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"local net adapter:[ %-5s ] ip_v6 [ %-20s ]\n"</span><span class="token punctuation">,</span> ifAddrStruct<span class="token operator">-></span>ifa_name<span class="token punctuation">,</span> addressBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   
        ifAddrStruct <span class="token operator">=</span> ifAddrStruct<span class="token operator">-></span>ifa_next<span class="token punctuation">;</span>  
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">SetLocalIp</span><span class="token punctuation">(</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ipaddr <span class="token punctuation">)</span>  
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  

    <span class="token keyword">int</span> sock_set_ip<span class="token punctuation">;</span>  

    <span class="token keyword">struct</span> sockaddr_in sin_set_ip<span class="token punctuation">;</span>  
    <span class="token keyword">struct</span> ifreq ifr_set_ip<span class="token punctuation">;</span>  

    <span class="token function">bzero</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>ifr_set_ip<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ifr_set_ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">if</span><span class="token punctuation">(</span> ipaddr <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token punctuation">)</span>  
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  

    <span class="token keyword">if</span><span class="token punctuation">(</span>sock_set_ip <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span> AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"socket create failse...SetLocalIp!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  

    <span class="token function">memset</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>sin_set_ip<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sin_set_ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token function">strncpy</span><span class="token punctuation">(</span>ifr_set_ip<span class="token punctuation">.</span>ifr_name<span class="token punctuation">,</span> <span class="token string">"eth0"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ifr_set_ip<span class="token punctuation">.</span>ifr_name<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     

    sin_set_ip<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>  
    sin_set_ip<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>ipaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token function">memcpy</span><span class="token punctuation">(</span> <span class="token operator">&amp;</span>ifr_set_ip<span class="token punctuation">.</span>ifr_addr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sin_set_ip<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sin_set_ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">ioctl</span><span class="token punctuation">(</span> sock_set_ip<span class="token punctuation">,</span> SIOCSIFADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ifr_set_ip<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>  
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
        <span class="token function">perror</span><span class="token punctuation">(</span> <span class="token string">"Not setup interface\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  

    <span class="token comment" spellcheck="true">//设置激活标志  </span>
    ifr_set_ip<span class="token punctuation">.</span>ifr_flags <span class="token operator">|</span><span class="token operator">=</span> IFF_UP <span class="token operator">|</span>IFF_RUNNING<span class="token punctuation">;</span>  

    <span class="token comment" spellcheck="true">//get the status of the device  </span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">ioctl</span><span class="token punctuation">(</span> sock_set_ip<span class="token punctuation">,</span> SIOCSIFFLAGS<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ifr_set_ip <span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>  
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
         <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"SIOCSIFFLAGS"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  

    <span class="token function">close</span><span class="token punctuation">(</span> sock_set_ip <span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  
<span class="token keyword">void</span> <span class="token function">getLocalNetMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
    <span class="token keyword">int</span> sock_netmask<span class="token punctuation">;</span>  
    <span class="token keyword">char</span> netmask_addr<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  

    <span class="token keyword">struct</span> ifreq ifr_mask<span class="token punctuation">;</span>  
    <span class="token keyword">struct</span> sockaddr_in <span class="token operator">*</span>net_mask<span class="token punctuation">;</span>  

    sock_netmask <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span> AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span><span class="token punctuation">(</span> sock_netmask <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"create socket failture...GetLocalNetMask\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token punctuation">;</span>  
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  

    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifr_mask<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ifr_mask<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    

    <span class="token comment" spellcheck="true">/* 获取指定网卡的子网掩码 */</span>
    <span class="token function">strncpy</span><span class="token punctuation">(</span>ifr_mask<span class="token punctuation">.</span>ifr_name<span class="token punctuation">,</span> <span class="token string">"eth0"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ifr_mask<span class="token punctuation">.</span>ifr_name <span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     

    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span> sock_netmask<span class="token punctuation">,</span> SIOCGIFNETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ifr_mask <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>   
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mac ioctl error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token punctuation">;</span>  
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  

    net_mask <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">struct</span> sockaddr_in <span class="token operator">*</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span> ifr_mask<span class="token punctuation">.</span>ifr_netmask <span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token function">strcpy</span><span class="token punctuation">(</span> netmask_addr<span class="token punctuation">,</span> <span class="token function">inet_ntoa</span><span class="token punctuation">(</span> net_mask <span class="token operator">-></span> sin_addr <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"local net adapter:[ %-5s ] mask  [ %-20s ]\n"</span><span class="token punctuation">,</span><span class="token string">"eth0"</span><span class="token punctuation">,</span>netmask_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>      

    <span class="token function">close</span><span class="token punctuation">(</span> sock_netmask <span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token punctuation">;</span>  
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">getLocalMac</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
    <span class="token keyword">int</span> sock_mac<span class="token punctuation">;</span>  

    <span class="token keyword">struct</span> ifreq ifr_mac<span class="token punctuation">;</span>  
    <span class="token keyword">char</span> mac_addr<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     

    sock_mac <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span> AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span><span class="token punctuation">(</span> sock_mac <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>  
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"create socket falise...mac\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token punctuation">;</span>  
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  

    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ifr_mac<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ifr_mac<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     
    <span class="token function">strncpy</span><span class="token punctuation">(</span>ifr_mac<span class="token punctuation">.</span>ifr_name<span class="token punctuation">,</span> <span class="token string">"eth0"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ifr_mac<span class="token punctuation">.</span>ifr_name<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     

    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">ioctl</span><span class="token punctuation">(</span> sock_mac<span class="token punctuation">,</span> SIOCGIFHWADDR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ifr_mac<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"mac ioctl error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token punctuation">;</span>  
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  

    <span class="token function">sprintf</span><span class="token punctuation">(</span>mac_addr<span class="token punctuation">,</span><span class="token string">"%02x%02x%02x%02x%02x%02x"</span><span class="token punctuation">,</span>  
            <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>ifr_mac<span class="token punctuation">.</span>ifr_hwaddr<span class="token punctuation">.</span>sa_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  
            <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>ifr_mac<span class="token punctuation">.</span>ifr_hwaddr<span class="token punctuation">.</span>sa_data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  
            <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>ifr_mac<span class="token punctuation">.</span>ifr_hwaddr<span class="token punctuation">.</span>sa_data<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  
            <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>ifr_mac<span class="token punctuation">.</span>ifr_hwaddr<span class="token punctuation">.</span>sa_data<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  
            <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>ifr_mac<span class="token punctuation">.</span>ifr_hwaddr<span class="token punctuation">.</span>sa_data<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  
            <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token punctuation">)</span>ifr_mac<span class="token punctuation">.</span>ifr_hwaddr<span class="token punctuation">.</span>sa_data<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"local net adapter:[ %-5s ] mac   [ %-20s ]\n"</span><span class="token punctuation">,</span><span class="token string">"eth0"</span><span class="token punctuation">,</span>mac_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>      

    <span class="token function">close</span><span class="token punctuation">(</span> sock_mac <span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">return</span> <span class="token punctuation">;</span>  
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>   
<span class="token keyword">void</span> <span class="token function">getGateWay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
    FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span>  
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
    <span class="token keyword">char</span> cmd<span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
    <span class="token keyword">char</span> gateway<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
    <span class="token keyword">char</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>  

    <span class="token function">strcpy</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"ip route"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    fp <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> fp<span class="token punctuation">)</span>  
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"popen error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token punctuation">;</span>  
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">,</span> fp<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  
        tmp <span class="token operator">=</span>buf<span class="token punctuation">;</span>  
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">*</span>tmp <span class="token operator">&amp;&amp;</span> <span class="token function">isspace</span><span class="token punctuation">(</span><span class="token operator">*</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>  
            <span class="token operator">++</span> tmp<span class="token punctuation">;</span>  
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> <span class="token string">"default"</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>  
            <span class="token keyword">break</span><span class="token punctuation">;</span>  
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  
    <span class="token function">sscanf</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token string">"%*s%*s%s"</span><span class="token punctuation">,</span> gateway<span class="token punctuation">)</span><span class="token punctuation">;</span>         
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"default gateway:%s\n"</span><span class="token punctuation">,</span> gateway<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token function">pclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>  

    <span class="token keyword">return</span> <span class="token punctuation">;</span>  
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">getLocalIp</span><span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span>
    <span class="token function">getlocalIp2</span><span class="token punctuation">(</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getLocalNetMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getLocalMac</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">getGateWay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p><strong>运行结果：</strong><br><img src="http://upload-images.jianshu.io/upload_images/1736256-22fbb52f340934b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="net.png"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>WireShark网络抓包</title>
    <url>/2017/07/01/dc5b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="WireShark入门"><a href="#WireShark入门" class="headerlink" title="WireShark入门"></a>WireShark入门</h2><h3 id="一、-打开WireShark"><a href="#一、-打开WireShark" class="headerlink" title="一、 打开WireShark"></a>一、 打开WireShark</h3><p><img src="http://static.zybuluo.com/AlexLin/4224884og6inde3h2q5wcw6a/image.png" alt="WireShark启动界面"></p>
<a id="more"></a>
<h3 id="二、界面分区"><a href="#二、界面分区" class="headerlink" title="二、界面分区"></a>二、界面分区</h3><p><img src="http://static.zybuluo.com/AlexLin/zrfd5f3v3q3o8bjdjay8oxc1/image.png" alt="WireShark界面划分"></p>
<h3 id="三、过滤规则语句"><a href="#三、过滤规则语句" class="headerlink" title="三、过滤规则语句"></a>三、过滤规则语句</h3><ul>
<li><p> IP 过滤</p>
<pre><code>ip.src eq 192.168.1.107 or ip.dst eq 192.168.1.107
#或者
ip.addr eq 192.168.1.107 // 都能显示来源IP和目标IP</code></pre>
</li>
<li><p> 过滤端口</p>
<pre><code>tcp.port eq 80 // 不管端口是来源的还是目标的都显示
tcp.port == 80
tcp.port eq 2722
tcp.port eq 80 or udp.port eq 80
tcp.dstport == 80 // 只显tcp协议的目标端口80
tcp.srcport == 80 // 只显tcp协议的来源端口80
#端口范围
tcp.port &gt;= 1 and tcp.port &lt;= 80</code></pre>
</li>
<li><p>协议过滤</p>
<pre><code>tcp、udp、arp、icmp、http、smtp、ftp、dns、msnms、ip、ssl、oicq、bootp #等等.
#排除
#排除arp包
!arp  或者  not arp</code></pre>
</li>
<li><p>mac 过滤</p>
<pre><code>eth.dst == A0:00:00:04:C5:84 //过滤目标mac
eth.src eq A0:00:00:04:C5:84 //过滤来源mac
eth.dst==A0:00:00:04:C5:84
eth.dst==A0-00-00-04-C5-84
eth.addr eq A0:00:00:04:C5:84 //过滤来源MAC和目标MAC都等于A0:00:00:04:C5:84的MAC</code></pre>
</li>
<li><p>数据包长度过滤</p>
<pre><code>udp.length == 26 #这个长度是指udp本身固定长度8加上udp下面那块数据包之和
tcp.len &gt;= 7  #指的是ip数据包(tcp下面那块数据),不包括tcp本身
ip.len == 94 #除了以太网头固定长度14,其它都算是ip.len,即从ip本身到最后
frame.len == 119 #整个数据包长度,从eth开始到最后
#数据包组成成员
eth ---&gt; ip or arp ---&gt; tcp or udp ---&gt; data</code></pre>
</li>
<li><p>http模式过滤</p>
<pre><code>http.request.method == &quot;GET&quot;
http.request.method == &quot;POST&quot;
http.request.uri == &quot;/img/logo-edu.gif&quot;
http contains &quot;GET&quot;
http contains &quot;HTTP/1.&quot;
</code></pre>
</li>
</ul>
<p>// GET包<br>http.request.method == “GET” &amp;&amp; http contains “Host: “<br>http.request.method == “GET” &amp;&amp; http contains “User-Agent: “<br>// POST包<br>http.request.method == “POST” &amp;&amp; http contains “Host: “<br>http.request.method == “POST” &amp;&amp; http contains “User-Agent: “<br>// 响应包<br>http contains “HTTP/1.1 200 OK” &amp;&amp; http contains “Content-Type: “<br>http contains “HTTP/1.0 200 OK” &amp;&amp; http contains “Content-Type: “</p>
<pre><code>- 两种条件成立过滤</code></pre>
<p>过滤两种条件时，使用and连接，<br>如过滤ip为192.168.101.8并且为http协议的，ip.src==192.168.101.8 and http。</p>
<pre><code>- 域名过滤</code></pre>
<p>http.host == “gizwits.com”</p>
<pre><code>### 四、TCP包分析

#### **一个TCP包由5部分组成分别是:**

1. Frame:   物理层的数据帧概况
2. Ethernet II: 数据链路层以太网帧头部信息
3. Internet Protocol Version 4: 互联网层IP包头部信息
4. Transmission Control Protocol:  传输层T的数据段头部信息，此处是mqtt
5. Hypertext Transfer Protocol/Data:  应用层的信息，此处是mqtt协议

#### **与之对应的网络七层协议图如下**
![tcp数据层][3]
#### OSI 参考模型与 TCP/IP分层模型
![OSI 参考模型与 TCP/IP分层模型][5]

#### **TCP 三次握手**
**图片版本**
![TCP三次握手][6]
#### **WireShark抓包分析图**
##### **第一次握手**
代表客户端请求建立连接</code></pre>
<p>SEQ=0<br>ACK=0<br>FLAGS = 0x0002 （SYN）</p>
<pre><code>**WireShark第一次TCP握手图**
![TCP 第一次握手][7]

##### **第二次握手：**
服务器发回确认包, 标志位为 SYN,ACK. 将确认序号(Acknowledgement Number)设置为客户的SEQ加1以.即ACK=SEQ+1</code></pre>
<p>SEQ = 0<br>ACK = SEQ+1<br>FLAGS = 0X0012（SYN +ACK）</p>
<pre><code>**WireShark第二次TCP握手图**
![TCP 第二次握手][8]

客户端再次发送确认包(ACK) SYN标志位为0,ACK标志位为1.并且把服务器发来ACK的序号字段+1,放确在SEQ字段中发送给对方.
</code></pre>
<p>SEQ =SEQ+1<br>ACK = 1;<br>FLAGS = 0X0001（ACK）</p>
<pre><code>![TCP 第三次握手][9]

#### **第四次挥手**
第一次、A机器向B机器发起断开请求，其中FIN置位,且seq=x;此时A进入FIN_WAIT_1状态；
第二次、B机器响应A的断开请求，ACK置位，且ACK值=x+1,且Seq=z;此时A进入FIN_WAIT_2状态(表示B同意A的断开请求)；
第三次、B机器向A发起断开请求，其中FIN置为，且Seq=y;(此时B进入LAST_WAIT)
第四次、A响应B的断开请求，ACK置位，ACK值位y+1;此时A进入TIME_WAIT，B收到ACK之后直接CLOSE；A在经过2MSL时间之后若没收到FIN信号则CLOSE;

![upload successful](/images/pasted-107.png)



### 五、WireShark 抓包异常情况分析

#### 1. **tcp out-of-order**（tcp有问题）
&gt;**原因:** 应该有很多原因。但是多半是网络拥塞，导致顺序包抵达时间不同，延时太长，或者包丢失，需要重新组合数据单元 因为他们可能是通过不同的路径到达你电脑上面的。

#### 2. **tcp segment of a reassembled PDU**
&gt;**原因:** 在连个连接建立的时候，SYN包里面会把彼此TCP最大的报文段长度，在局域网内一般都是**1460**.如果发送的包比最大的报文段长度长的话就要分片了，被分片出来的包，就会被标记了**“TCP segment of a reassembled PDU”**。TCP在发起连接的第一个报文的TCP头里通过MSS这个可选项告知对方本端能够接收的最大报文（当然，这个大小是TCP净荷的大小），以太网上这个值一般设置成1460，因为1460Byte净荷+20Byte TCP头+20Byte IP头 ＝ 1500字节，正好符合链路层最大报文的要求，被标记了的包的SEQ和ACK都和原来的包一致。
#### 3. **Tcp previous segment lost（tcp先前的分片丢失）**
&gt;一般是网络中的网络设备发生的拥塞了，触发了TCP的拥塞控制机制。它告诉发送方数据段丢失；
（1）、“TCP Previous segment lost” errors are not “fatal” errors. They simply indicate that the sequence number in the arriving packet is higher than the next-expected sequence number, indicating that at least one segment was dropped/lost. The receiving station remedies this situation by sending duplicate ACKs for each additional packet it receives until the sender retransmits the missing packet(s). TCP is designed to recover from this situation, which is why the image is downloaded correctly despite having a (briefly) missing packet.
If you are getting a large number of lost packets, then there is likely a communication problem between the sender and receiver. A common cause of this is un-matched duplex settings between the PC and the switch.
We (our lab) recently upgraded to Ethereal 0.10.14 with WinPCap 3.1.  If I remember correctly, we had previously been using 0.10.2 with WinPCap 3.0.  However, since the upgrade we have been noticing several issues.
The first issue is with “TCP Previous segment lost” and “TCP CHECKSUM INCORRECT” messages appearing in the Packet Listing window.  We do not remember seeing these in the previous version of Ethereal, or at least not nearly as many as we are seeing now.  For example, one task for the student instructional part of the lab involves visiting a website containing two images and observing the network activity.  After the two GET requests are sent for the images, it is not uncommon for one image to be returned with a typical 200 OK response packet, but the response packet for the other image will be displayed as “TCP Previous segment lost.”  However, both images are downloaded and displayed perfectly fine in the browser.  I would think that the segment lost error would mean the object wasn’t returned correctly and shouldn’t be able to be displayed, but apparently that is not the case.  (The cache had been cleared when this was performed, so it was not defaulting to a local copy of the image.)
Another problem we’ve been noticing is that some packets simply aren’t displayed in the Packet Listing window, even when they are obviously received.  Using the same example as above, after the two GET requests are sent for the images, it is not uncommon for one image to be returned with a typical 200 OK response, but the other response will not appear.  Yet both images are successfully displayed in the browser.  Is this a problem with Ethereal not detecting the packets?
I’m not sure how typical this is, but we seem to be experiencing these issues often with 0.10.14 while we never did with 0.10.2.  Could it also be an issue with WinPCap, and not necessarily Ethereal?  I’m just trying to find some answers as to why we are seeing a sudden abundance of TCP related errors and uncaptured packets.  Thanks.
（2）、I have a network client application that runs fine while I am debugging (no TCP errors),
but when I run the release version, it runs incredibly slow.  It runs as a series of
transactions, where each transaction is a separate connection to the server.  Wireshark
analysis has determined that about 50% of all transactions involve the series:
TCP Previous Segment Lost

#### 4. Tcpacked lost segment（tcp应答丢失）
#### 5. Tcp window update（tcp窗口更新）
#### 6. Tcp dup ack（tcp重复应答）
&gt;1)当收到tcp out-of-order 信号时，可能发送该信号， 这个相同应答的意图是让对端知道一个分片被收到的时候出现问题，并且告诉它希望得到的序列号。
2)由于TCP不知道重复的ACK是由丢失的段引起的还是仅仅是重新排序段，所以等待接收到少量的重复的ACK。 假设如果只有段的重新排序，则在重新排序的段被处理之前将只有一个或两个重复的ACK，然后将生成新的ACK。 如果在一行中接收到三个或更多个重复的ACK，则表明段已经丢失。 TCP然后执行似乎是丢失段的重传，而不等待重传定时器到期。

#### 7. **Tcp keep alive**（tcp保持活动）
&gt;在TCP中有一个Keep-alive的机制可以检测死连接，原理很简单，TCP会在空闲了一定时间后发送数据给对方：
 1.如果主机可达，对方就会响应ACK应答，就认为是存活的。
 2.如果可达，但应用程序退出，对方就发RST应答，发送TCP撤消连接。
 3.如果可达，但应用程序崩溃，对方就发FIN消息。
 4.如果对方主机不响应ack, rst，继续发送直到超时，就撤消连接。这个时间就是默认的二个小时。

#### 8. **Tcp retransmission**（tcp重传）
&gt;作为一个可靠的传输协议，传输控制协议（TCP）在发送主机需要从目标主机收到一个包时确认。If the sender does not receive that acknowledgment within a certain amount of time, it acts under the assumption that the packet did not reach its destination and retransmits the packet.如果发件人没有收到的时间内一定之金额，确认，它的行为假设下，该数据包没有到达其目的地，以及转发数据包。


## TCP 状态分析
TCP的状态 (SYN, FIN, ACK, PSH, RST, URG)
在TCP层，有个FLAGS字段，这个字段有以下几个标识：SYN, FIN, ACK, PSH, RST, URG.
它们的含义是：

 1. SYN(synchronous): 表示建立连接.
 2. FIN(finish): 表示关闭连接.
 3. ACK(acknowledgement): 表示响应.
 4. PSH(push): 表示有DATA数据传输.
 5. RST(reset): 表示连接重置.
 6. URG(urgent):紧急.
 7. SEQ(Sequence number):顺序号码

## TCP 三次握手流程
1. 主机A发送位码为syn＝1，随机产生seq number=1234567的数据包到服务器，主机B由SYN=1知道，A要求建立联机；
2. 主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=7654321的包；
3. 主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。

## 各种网络包头格式
### 以太网头</code></pre>
<p>// MAC地址长度<br>#define MAC_ADDRESS_LEN 6</p>
<p>// 常用的以太网帧类型<br>#define ETHERNET_FRAME_IP       0x0800              // IP帧<br>#define ETHERNET_FRAME_ARP      0x0806              // ARP帧<br>#define ETHERNET_FRAME_RARP     0x8035              // RARP帧<br>#define ETHERNET_FRAME_IPv6     0x86DD              // IP6帧</p>
<p>typedef struct _EthernetHeader      // 以太头<br>{<br>    UCHAR       DstMacAddr[MAC_ADDRESS_LEN];        // 目标MAC<br>    UCHAR       SrcMacAddr[MAC_ADDRESS_LEN];        // 源MAC<br>    USHORT      FrmType;                            // 类型<br>}EthernetHeader, *PEthernetHeader;</p>
<pre><code>### TCP 包格式</code></pre>
<h2 id="0-15-31"><a href="#0-15-31" class="headerlink" title="0                            15                              31"></a>0                            15                              31</h2><h2 id="source-port-destination-port"><a href="#source-port-destination-port" class="headerlink" title="|          source port          |       destination port        |"></a>|          source port          |       destination port        |</h2><table>
<thead>
<tr>
<th>sequence number</th>
</tr>
</thead>
<tbody><tr>
<td>acknowledgment number</td>
</tr>
</tbody></table>
<hr>
<h2 id="HL-rsvd-C-E-U-A-P-R-S-F-window-size"><a href="#HL-rsvd-C-E-U-A-P-R-S-F-window-size" class="headerlink" title="|  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |"></a>|  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |</h2><h2 id="TCP-checksum-urgent-pointer"><a href="#TCP-checksum-urgent-pointer" class="headerlink" title="|         TCP checksum          |       urgent pointer          |"></a>|         TCP checksum          |       urgent pointer          |</h2><table>
<thead>
<tr>
<th>Optional</th>
</tr>
</thead>
<tbody><tr>
<td>Data</td>
</tr>
</tbody></table>
<hr>
<p>// TCP头标志位掩码 OffFlag<br>#define TCP_HDR_LEN             0xF000              // TCP头长度&lt;双字的个数&gt;转化为字节数需要x4<br>#define TCP_URG_FLAG            0x0020              // URG标志<br>#define TCP_ACK_FLAG            0x0010              // ACK标志 应答1或请求0<br>#define TCP_PSH_FLAG            0x0008              // psh标志 以最快速度传输数据<br>#define TCP_RST_FLAG            0x0004              // RST标志 先断开连接,再重建连接<br>#define TCP_SYN_FLAG            0x0002              // SYN标志 用来建立连接<br>#define TCP_FIN_FLAG            0x0001              // FIN标志 发送方完成数据发送</p>
<p>typedef struct _TcpHeader           // TCP头 20 BYTES<br>{<br>    USHORT      SrcPort;                            // 源端口<br>    USHORT      DstPort;                            // 目的端口<br>    ULONG       SeqNum;                             // 序号<br>    ULONG       AckNum;                             // 确认号<br>    USHORT      OffFlag;                            // 首部长度&lt;首部双字的个数&gt;+保留位+标志位<br>    USHORT      WndSize;                            // 窗口大小&lt;实现流量控制&gt;<br>    USHORT      Checksum;                           // 效验和<br>    USHORT      UrgPointer;                         // 紧急指针<br>}TcpHeader, *PTcpHeader;</p>
<p>// OffFlag : 4位首部长度 + 6位保留位 + URG+ACK+PSH+RST+SYN+FIN</p>
<p>typedef struct _TCPPACKET           // TCP封包 &lt;当ip中没有附加数据时&gt;<br>{<br>    EthernetHeader  Ehhdr;<br>    IPHeader        Iphdr;<br>    TcpHeader       Tcphdr;<br>}TCPPACKET, *PTCPPACKET;</p>
<p>```</p>
<p>SYN和ACK可能同时为1，它表示的就是建立连接之后的响应，<br>如果只是单个的一个SYN，它表示的只是建立连接。</p>
<p>参考</p>
<hr>
<ul>
<li><a href="http://bbs.pediy.com/thread-147644.htm">http://bbs.pediy.com/thread-147644.htm</a></li>
<li><a href="http://www.yunsec.net/a/school/wlcs/agreement/2012/0317/10262.html">http://www.yunsec.net/a/school/wlcs/agreement/2012/0317/10262.html</a></li>
<li><a href="http://www.9upk.com/article/2537.html">http://www.9upk.com/article/2537.html</a> （抓包工具教程）</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>抓包工具</tag>
        <tag>wireShark</tag>
      </tags>
  </entry>
  <entry>
    <title>基本算法之算法图解Book</title>
    <url>/2018/05/05/d585.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="算法图解"><a href="#算法图解" class="headerlink" title="算法图解"></a>算法图解</h2><h3 id="内容简介-·-·-·-·-·-·"><a href="#内容简介-·-·-·-·-·-·" class="headerlink" title="内容简介  · · · · · ·"></a><font color=#115533>内容简介  · · · · · ·</font></h3><font color=#228B22>
本书示例丰富，图文并茂，以让人容易理解的方式阐释了算法，旨在帮助程序员在日常项目中更好地发挥算法的能量。书中的前三章将帮助你打下基础，带你学习二分查找、大O表示法、两种基本的数据结构以及递归等。余下的篇幅将主要介绍应用广泛的算法，具体内容包括：面对具体问题时的解决技巧，比如，何时采用贪婪算法或动态规划；散列表的应用；图算法；K最近邻算法。
</font>

<h3 id="作者简介-·-·-·-·-·-·"><a href="#作者简介-·-·-·-·-·-·" class="headerlink" title="作者简介  · · · · · ·"></a><font color=#115533>作者简介  · · · · · ·</font></h3><font color=#228B22>
Aditya Bhargava

<p>软件工程师，兼具计算机科学和美术方面的教育背景，在adit.io撰写编程方面的博客。<br></font></p>
<h3 id="豆瓣点评"><a href="#豆瓣点评" class="headerlink" title="豆瓣点评"></a><font color=#228B22><a href="https://book.douban.com/subject/26979890/">豆瓣点评</a></font></h3><a id="more"></a>

<h2 id="书本"><a href="#书本" class="headerlink" title="书本"></a>书本</h2><embed src="https://gitee.com/alexlin/algorithms/raw/master/doc/%E5%9B%BE%E8%A7%A3%E7%AE%97%E6%B3%95.pdf" width="100%" height="950" type="application/pdf" align=center >
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>图解算法</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSSL 笔记</title>
    <url>/2020/07/08/dfdf.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一些加密知识"><a href="#一些加密知识" class="headerlink" title="一些加密知识"></a>一些加密知识</h2><ul>
<li>摘要算法 : </li>
<li>公钥算法</li>
<li>数字签名</li>
</ul>
<p><a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html">http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html</a><br><a href="http://www.jinbuguo.com/linux/openssl_install.html">http://www.jinbuguo.com/linux/openssl_install.html</a><br><a href="https://blog.csdn.net/zzhongcy/article/details/21990859">https://blog.csdn.net/zzhongcy/article/details/21990859</a></p>
<a id="more"></a>

<h2 id="OpenSSL-官网"><a href="#OpenSSL-官网" class="headerlink" title="OpenSSL 官网"></a>OpenSSL 官网</h2><p><a href="https://www.openssl.org/">https://www.openssl.org/</a></p>
<h2 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h2><ul>
<li>安装包 : openssl-1.1.0f.tar.gz</li>
</ul>
<pre class=" language-sh"><code class="language-sh">tar -xzf openssl-1.1.0f.tar.gz
# 配置安装路径和生成makefile
./config --prefix=/home/gagent/alexLam/gizwis_sdk/openssl_alexLin_20200702
make
make install</code></pre>
<p><strong>备注：</strong>运行./config –prefix=/usr/local/openssl (更多选项用./config –help 来查看),可用的选项有： no-mdc2、 no-cast no-rc2、 no-rc5、 no-ripemd、 no-rc4 no-des 、 no-md2、 no-md4、 no-idea 、no-aes、 no-bf、 no-err、 no-dsa、 no-dh、 no-ec、 no-hw、 no-asm、 no-krb5、 no-dso 、 no-threads 、no-zlib、 -DOPENSSL_NO_HASH_COMP、 -DOPENSSL_NO_ERR、 -DOPENSSL_NO_HW 、-DOPENSSL_NO_OCSP、 -DOPENSSL_NO_SHA256 和-DOPENSSL_NO_SHA512 等。去掉不必要的内容可以减少生成库的大小。 若要生成 debug 版本的库和可执行程序加-g 或者-g3(openssl 中有很多宏，需要调试学习最好加上-g3)。</p>
<h2 id="OpenSSL-编程"><a href="#OpenSSL-编程" class="headerlink" title="OpenSSL 编程"></a>OpenSSL 编程</h2><h3 id="OpenSSL-服务端编写步骤"><a href="#OpenSSL-服务端编写步骤" class="headerlink" title="OpenSSL 服务端编写步骤"></a>OpenSSL 服务端编写步骤</h3><p><img src="/images/pasted-57.png" alt="upload successful"></p>
<blockquote>
<p><strong>绿色的胃普通socket 操作，其他的为ssl 操作。</strong></p>
</blockquote>
<h3 id="OpenSSL-客户端编写步骤"><a href="#OpenSSL-客户端编写步骤" class="headerlink" title="OpenSSL 客户端编写步骤"></a>OpenSSL 客户端编写步骤</h3><p><img src="/images/pasted-58.png" alt="upload successful"></p>
]]></content>
  </entry>
  <entry>
    <title>tcpDump</title>
    <url>/2017/07/01/154.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h2 id="Linux-混杂模式设置"><a href="#Linux-混杂模式设置" class="headerlink" title="Linux 混杂模式设置"></a>Linux 混杂模式设置</h2><p><strong>1. 查看网卡混杂模式状态</strong></p>
<pre class=" language-SH"><code class="language-SH">alex@ubuntu:~$ ifconfig eth0

eth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03
          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0
          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global
          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global
          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1735 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1780 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1451555 (1.4 MB)  TX bytes:193802 (193.8 KB)</code></pre>
<a id="more"></a>

<p><strong>2. 启动混杂模式</strong><br>主要是这个:<strong>PROMISC</strong></p>
<pre class=" language-yaml"><code class="language-yaml">alex@ubuntu<span class="token punctuation">:</span>~$ sudo ifconfig eth0 promisc
alex@ubuntu<span class="token punctuation">:</span>~$ ifconfig eth0
eth0      Link encap<span class="token punctuation">:</span>Ethernet  HWaddr 00<span class="token punctuation">:</span>0c<span class="token punctuation">:</span>29<span class="token punctuation">:</span><span class="token datetime number">01:02:03</span>
          inet addr<span class="token punctuation">:</span>10.211.55.3  Bcast<span class="token punctuation">:</span>10.211.55.255  Mask<span class="token punctuation">:</span>255.255.255.0
          inet6 addr<span class="token punctuation">:</span> fdb2<span class="token punctuation">:</span>2c26<span class="token punctuation">:</span>f4e4<span class="token punctuation">:</span>0<span class="token punctuation">:</span>49c8<span class="token punctuation">:</span>a8e5<span class="token punctuation">:</span>be6<span class="token punctuation">:</span>a7f9/64 Scope<span class="token punctuation">:</span>Global
          inet6 addr<span class="token punctuation">:</span> fdb2<span class="token punctuation">:</span>2c26<span class="token punctuation">:</span>f4e4<span class="token punctuation">:</span>0<span class="token punctuation">:</span>20c<span class="token punctuation">:</span>29ff<span class="token punctuation">:</span>fe01<span class="token punctuation">:</span>203/64 Scope<span class="token punctuation">:</span>Global
          inet6 addr<span class="token punctuation">:</span> fe80<span class="token punctuation">:</span><span class="token punctuation">:</span>20c<span class="token punctuation">:</span>29ff<span class="token punctuation">:</span>fe01<span class="token punctuation">:</span>203/64 Scope<span class="token punctuation">:</span>Link
          UP BROADCAST RUNNING PROMISC MULTICAST  MTU<span class="token punctuation">:</span>1500  Metric<span class="token punctuation">:</span><span class="token number">1</span>
          RX packets<span class="token punctuation">:</span>1742 errors<span class="token punctuation">:</span>0 dropped<span class="token punctuation">:</span>0 overruns<span class="token punctuation">:</span>0 frame<span class="token punctuation">:</span><span class="token number">0</span>
          TX packets<span class="token punctuation">:</span>1782 errors<span class="token punctuation">:</span>0 dropped<span class="token punctuation">:</span>0 overruns<span class="token punctuation">:</span>0 carrier<span class="token punctuation">:</span><span class="token number">0</span>
          collisions<span class="token punctuation">:</span>0 txqueuelen<span class="token punctuation">:</span><span class="token number">1000</span>
          RX bytes<span class="token punctuation">:</span>1452336 (1.4 MB)  TX bytes<span class="token punctuation">:</span>194198 (194.1 KB)</code></pre>
<p><strong>3. 关闭混杂模式</strong></p>
<pre class=" language-shell"><code class="language-shell">alex@ubuntu:~$ sudo ifconfig eth0 -promisc
alex@ubuntu:~$ ifconfig eth0
eth0      Link encap:Ethernet  HWaddr 00:0c:29:01:02:03
          inet addr:10.211.55.3  Bcast:10.211.55.255  Mask:255.255.255.0
          inet6 addr: fdb2:2c26:f4e4:0:49c8:a8e5:be6:a7f9/64 Scope:Global
          inet6 addr: fdb2:2c26:f4e4:0:20c:29ff:fe01:203/64 Scope:Global
          inet6 addr: fe80::20c:29ff:fe01:203/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:1766 errors:0 dropped:0 overruns:0 frame:0
          TX packets:1796 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000
          RX bytes:1455202 (1.4 MB)  TX bytes:195410 (195.4 KB)</code></pre>
<h2 id="TcpDump"><a href="#TcpDump" class="headerlink" title="TcpDump"></a>TcpDump</h2><blockquote>
<ul>
<li>tcpdump存在于基本的FreeBSD系统中，由于它需要将网络界面设置为混杂模式，普通用户不能正常执行，但具备root权限的用户可以直接执行它来获取网络上的信息。因此系统中存在网络分析工具主要不是对本机安全的威胁，而是对网络上的其他计算机的安全存在威胁。</li>
</ul>
</blockquote>
<ul>
<li>显然为了安全起见，不用作网络管理用途的计算机上不应该运行这一类的网络分析软件，为了屏蔽它们，可以屏蔽内核中的bpfilter伪设备。一般情况下网络硬件和TCP/IP堆栈不支持接收或发送与本计算机无关的数据包，为了接收这些数据包，就必须使用网卡的混杂模式，并绕过标准的TCP/IP堆栈才行。在FreeBSD下，这就需要内核支持伪设备bpfilter。因此，在内核中取消bpfilter支持，就能屏蔽tcpdump之类的网络分析工具。</li>
<li>并且当网卡被设置为混杂模式时，系统会在控制台和日志文件中留下记录，提醒管理员留意这台系统是否被用作攻击同网络的其他计算机的跳板。<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3></li>
</ul>
<p>tcpdump采用命令行方式，它的命令格式为：<br>    tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]<br>　　　　　　　　　　[ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]<br>　　　　　　　　　　[ -T 类型 ] [ -w 文件名 ] [表达式 ]
　　　　　　　　　　</p>
<h3 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h3><table>
<thead>
<tr>
<th align="left">命令字</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-a</td>
<td align="left">将网络地址和广播地址转变成名字；</td>
</tr>
<tr>
<td align="left">-d</td>
<td align="left">将匹配信息包的代码以人们能够理解的汇编格式给出；</td>
</tr>
<tr>
<td align="left">-dd</td>
<td align="left">将匹配信息包的代码以c语言程序段的格式给出；</td>
</tr>
<tr>
<td align="left">-ddd</td>
<td align="left">将匹配信息包的代码以十进制的形式给出；</td>
</tr>
<tr>
<td align="left">-e</td>
<td align="left">在输出行打印出数据链路层的头部信息；</td>
</tr>
<tr>
<td align="left">-f</td>
<td align="left">将外部的Internet地址以数字的形式打印出来；</td>
</tr>
<tr>
<td align="left">-l</td>
<td align="left">使标准输出变为缓冲行形式；</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">不把网络地址转换成名字；</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">在输出的每一行不打印时间戳；</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；</td>
</tr>
<tr>
<td align="left">-vv</td>
<td align="left">输出详细的报文信息；</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">在收到指定的包的数目后，tcpdump就会停止；</td>
</tr>
<tr>
<td align="left">-F</td>
<td align="left">从指定的文件中读取表达式,忽略其它的表达式；</td>
</tr>
<tr>
<td align="left">-i</td>
<td align="left">指定监听的网络接口；</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">从指定的文件中读取包(这些包一般通过-w选项产生)；</td>
</tr>
<tr>
<td align="left">-w</td>
<td align="left">直接将包写入文件中，并不分析和打印出来；</td>
</tr>
<tr>
<td align="left">-T</td>
<td align="left">将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程调用）和snmp（简单网络管理协议；）</td>
</tr>
<tr>
<td align="left">-x</td>
<td align="left">用 hex 显示报文的内容</td>
</tr>
<tr>
<td align="left">-X</td>
<td align="left">同时用 hex 和 ascii 显示报文的内容</td>
</tr>
<tr>
<td align="left">-XX</td>
<td align="left">同 -X，但同时显示以太网头部</td>
</tr>
<tr>
<td align="left">-A</td>
<td align="left">只使用 ascii 打印报文的全部数据，不要和 -X 一起使用</td>
</tr>
<tr>
<td align="left">port xxx</td>
<td align="left">指定端口xxx</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="tcpdump的表达式介绍"><a href="#tcpdump的表达式介绍" class="headerlink" title="tcpdump的表达式介绍"></a>tcpdump的表达式介绍</h3><blockquote>
<p>表达式是一个正则表达式，tcpdump利用它作为过滤报文的条件，如果一个报文满足表达式的条件，则这个报文将会被捕获。如果没有给出任何条件，则网络上所有的信息包将会被截获。在表达式中一般如下几种类型的关键字。</p>
</blockquote>
<h4 id="第一种是关于类型的关键字"><a href="#第一种是关于类型的关键字" class="headerlink" title="第一种是关于类型的关键字"></a>第一种是关于类型的关键字</h4><p>主要包括host，net，port, 例如 host 210.27.48.2，指明210.27.48.2是一台主机，net 202.0.0.0 指明 202.0.0.0是一个网络地址，port 23指明端口号是23。如果没有指定类型，缺省的类型是host.</p>
<h4 id="第二种是确定传输方向的关键字"><a href="#第二种是确定传输方向的关键字" class="headerlink" title="第二种是确定传输方向的关键字"></a>第二种是确定传输方向的关键字</h4><p>主要包括src , dst ,dst or src, dst and src,这些关键字指明了传输的方向。举例说明，src 210.27.48.2 ,指明ip包中源地址是210.27.48.2 , dst net202.0.0.0 指明目的网络地址是202.0.0.0 。如果没有指明方向关键字，则缺省是src or dst关键字。</p>
<h4 id="第三种是协议的关键字"><a href="#第三种是协议的关键字" class="headerlink" title="第三种是协议的关键字"></a>第三种是协议的关键字</h4><p>主要包括fddi,ip,arp,rarp,tcp,udp等类型。Fddi指明是在FDDI(分布式光纤数据接口网络)上的特定的网络协议，实际上它是”ether”的别名，fddi和ether具有类似的源地址和目的地址，所以可以将fddi协议包当作ether的包进行处理和分析。其他的几个关键字就是指明了监听的包的协议内容。如果没有指定任何协议，则tcpdump将会监听所有协议的信息包。</p>
<h4 id="其他关键字"><a href="#其他关键字" class="headerlink" title="其他关键字"></a>其他关键字</h4><p>除了这三种类型的关键字之外，其他重要的关键字如下：gateway,broadcast,less,greater,还有三种逻辑运算，取非运算是 ‘not ‘ ‘! ‘,与运算是’and’,’&amp;&amp;’;或运算 是’or’,’││’；这些关键字可以组合起来构成强大的组合条件来满足人们的需要，下面举几个例子来说明。</p>
<ul>
<li><p>A想要截获所有210.27.48.1 的主机收到的和发出的所有的数据包：</p>
<pre><code>#tcpdump host 210.27.48.1</code></pre>
</li>
<li><p>B想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：(在命令行中使用括号时，一定要添加’&#39;)</p>
<pre><code>#tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 \)</code></pre>
</li>
<li><p>C如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p>
<pre><code>#tcpdump ip host 210.27.48.1 and ! 210.27.48.2</code></pre>
</li>
<li><p>D如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：</p>
<pre><code>#tcpdump tcp port 23 host 210.27.48.1</code></pre>
</li>
<li><p>E 对本机的udp 123 端口进行监视 123 为ntp的服务端口</p>
<pre><code># tcpdump udp port 123</code></pre>
</li>
<li><p>F 系统将只对名为hostname的主机的通信数据包进行监视。主机名可以是本地主机，也可以是网络上的任何一台计算机。下面的命令可以读取主机hostname发送的所有数据：</p>
<pre><code>#tcpdump -i eth0 src host hostname</code></pre>
</li>
<li><p>G 下面的命令可以监视所有送到主机hostname的数据包：</p>
<pre><code>#tcpdump -i eth0 dst host hostname</code></pre>
</li>
<li><p>H 我们还可以监视通过指定网关的数据包：</p>
<pre><code>#tcpdump -i eth0 gateway Gatewayname</code></pre>
</li>
<li><p>I 如果你还想监视编址到指定端口的TCP或UDP数据包，那么执行以下命令：</p>
<pre><code>#tcpdump -i eth0 host hostname and port 80</code></pre>
</li>
<li><p>J 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p>
<pre><code>#tcpdump ip host 210.27.48.1 and ! 210.27.48.2</code></pre>
</li>
<li><p>K 想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：</p>
<pre><code>#tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 \)</code></pre>
</li>
<li><p>L 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：</p>
<pre><code>#tcpdump ip host 210.27.48.1 and ! 210.27.48.2</code></pre>
</li>
<li><p>M 如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：</p>
<pre><code>#tcpdump tcp port 23 host 210.27.48.1</code></pre>
</li>
</ul>
<h3 id="tcpdump的输出结果介绍"><a href="#tcpdump的输出结果介绍" class="headerlink" title="tcpdump的输出结果介绍"></a>tcpdump的输出结果介绍</h3><p>下面我们介绍几种典型的tcpdump命令的输出信息</p>
<ul>
<li><p>A,数据链路层头信息<br>使用命令:</p>
<pre><code>#tcpdump --e host ice</code></pre>
<p>ice 是一台装有linux的主机，她的MAC地址是0：90：27：58：AF：1A；<br>H219是一台装有SOLARIC的SUN工作站，它的MAC地址是8：0：20：79：5B：46；<br>上一条命令的输出结果如下所示：</p>
<pre><code>21:50:12.847509 eth0 &lt; 8:0:20:79:5b:46 0:90:27:58:af:1a ip 60: h219.33357 &gt; ice.telne
t 0:0(0) ack 22535 win 8760 (DF)</code></pre>
<p>  分析：21：50：12是显示的时间， 847509是ID号，eth0 &lt;表示从网络接口eth0 接受该数据包，eth0&gt;表示从网络接口设备发送数据包, 8:0:20:79:5b:46是主机H219的MAC地址,它表明是从源地址H219发来的数据包.0:90:27:58:af:1a是主机ICE的MAC地址,表示该数据包的目的地址是ICE . ip 是表明该数据包是IP数据包,60是数据包的长度, h219.33357 &gt; ice.telnet表明该数据包是从主机H219的33357端口发往主机ICE的TELNET(23)端口. ack 22535表明对序列号是222535的包进行响应. win 8760表明发送窗口的大小是8760.</p>
</li>
<li><p>B,ARP包的TCPDUMP输出信息</p>
</li>
</ul>
<p>使用命令:</p>
<pre><code>#tcpdump arp</code></pre>
<p>得到的输出结果是：</p>
<pre><code>22:32:42.802509 eth0 &gt; arp who-has route tell ice (0:90:27:58:af:1a)
22:32:42.802902 eth0 &lt; arp reply route is-at 0:90:27:12:10:66 (0:90:27:58:af:1a)</code></pre>
<pre><code>分析: 22:32:42是时间戳, 802509是ID号, eth0 &gt;表明从主机发出该数据包, arp表明是ARP请求包,who-has route tell ice表明是主机ICE请求主机ROUTE的MAC地址。0:90:27:58:af:1a是主机ICE的MAC地址。</code></pre>
<ul>
<li>C,TCP包的输出信息</li>
</ul>
<p>用TCPDUMP捕获的TCP包的一般输出信息是：</p>
<pre><code>src &gt; dst: flags data-seqno ack window urgent options</code></pre>
<pre><code>src&gt; dst:表明从源地址到目的地址, flags是TCP包中的标志信息,S 是SYN标志, F (FIN), P (PUSH) , R(RST) &quot;.&quot; (没有标记); data-seqno是数据包中的数据的顺序号, ack是下次期望的顺序号,window是接收缓存的窗口大小, urgent表明数据包中是否有紧急指针. Options是选项.</code></pre>
<ul>
<li>D,UDP包的输出信息</li>
</ul>
<p>用TCPDUMP捕获的UDP包的一般输出信息是：</p>
<pre><code>route.port1 &gt; ice.port2: udp lenth</code></pre>
<pre><code>UDP十分简单，上面的输出行表明从主机ROUTE的port1端口发出的一个UDP数据包到主机ICE的port2端口，类型是UDP， 包的长度是lenth</code></pre>
<h3 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h3><ul>
<li><p>想查看TCP或者UDP端口使用情况，使用</p>
<pre><code>#netstat -anp</code></pre>
</li>
<li><p>如果有些进程看不见，如只显示”-”，可以尝试</p>
<pre><code>#sudo netstat -anp</code></pre>
</li>
<li><p>如果想看某个端口的信息，使用lsof命令，如：</p>
<pre><code>#sudo lsof -i :631</code></pre>
</li>
</ul>
<pre><code>-bash-3.00# netstat -tln</code></pre>
<pre><code>netstat -tln #命令是用来查看linux的端口使用情况</code></pre>
<ul>
<li>启动ftp端口<pre><code># /xtc/init.d/vsftp start</code></pre>
</li>
</ul>
<p>看文件/etc/services<br>netstat</p>
<p>查看已经连接的服务端口（ESTABLISHED）</p>
<ul>
<li><p>查看所有的服务端口（LISTEN，ESTABLISHED）</p>
<pre><code>netstat -a</code></pre>
</li>
<li><p>查看所有 的服务端口并显示对应的服务程序名</p>
<pre><code>sudo netstat -ap</code></pre>
</li>
<li><p>nmap ＜扫描类型＞＜扫描参数＞<br>例如：</p>
<pre><code>#nmap localhost
#nmap -p 1024-65535 localhost
#nmap -PT 192.168.1.127-245</code></pre>
<p>当我们使用　netstat -apn　查看网络连接的时候，会发现很多类似下面的内容：</p>
<pre><code>Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name
</code></pre>
</li>
</ul>
<p>tcp 0 52 218.104.81.152：7710 211.100.39.250：29488 ESTABLISHED 6111/1</p>
<pre><code>
显示这台服务器开放了7710端口，那么 这个端口属于哪个程序呢？我们可以使用　</code></pre>
<p>lsof -i ：7710　</p>
<pre><code>
命令来查询：</code></pre>
<p>COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME</p>
<p>sshd 1990 root 3u IPv4 4836 TCP *：7710 （LISTEN）</p>
<pre><code>    这样，我们就知道了7710端口是属于sshd程序的。

- 运行tcpdump命令出现错误信息排除</code></pre>
<p>tcpdump: no suitable device found<br>tcpdump: no devices found /dev/bpf4: A file or directory in the path name does not exist.</p>
<pre><code>
解决方案 2种原因：
1.权限不够，一般不经过处理，只用root用户能使用tcpdump
2.缺省只能同时使用4个tcpdump，如用完，则报此类错。需要停掉多余的tcpdump

### Ubuntu系统日志配置 /var/log/messages
1. 问题描述
　　今天需要查看Ubuntu系统的日志文件，但却没有找到/var/log/messages这个文件。网上搜素资料，说是要配置/etc/syslog.conf。syslog采用可配置的、统一的系统登记程序，随时从系统各处接受log请求，然后根据/etc/syslog.conf中的预先设定把log信息写入相应文件中、邮寄给特 定用户或者直接以消息的方式发往控制台。

　　好吧，问题又来了。系统中依然没有/etc/syslog.conf，经过一番搜素，最后得到的结论是：在Ubuntu下对应的应该是/etc/rsyslog.conf和rsyslogd。

2. 解决方案
　　关于syslog.conf文件和syslog.d下文件功能解释可以参考下面这篇文章：
　　http://www.linuxidc.com/Linux/2012-03/56434.htm
　　通过查看rsyslog.conf文件，发现所有的配置文件都在/etc/rsyslog.d/文件夹下。
</code></pre>
<h1 id="etc-rsyslog-conf-Configuration-file-for-rsyslog"><a href="#etc-rsyslog-conf-Configuration-file-for-rsyslog" class="headerlink" title="/etc/rsyslog.conf Configuration file for rsyslog."></a>/etc/rsyslog.conf Configuration file for rsyslog.</h1><p>#</p>
<h1 id="For-more-information-see"><a href="#For-more-information-see" class="headerlink" title="For more information see"></a>For more information see</h1><h1 id="usr-share-doc-rsyslog-doc-html-rsyslog-conf-html"><a href="#usr-share-doc-rsyslog-doc-html-rsyslog-conf-html" class="headerlink" title="/usr/share/doc/rsyslog-doc/html/rsyslog_conf.html"></a>/usr/share/doc/rsyslog-doc/html/rsyslog_conf.html</h1><p>#</p>
<h1 id="Default-logging-rules-can-be-found-in-etc-rsyslog-d-50-default-conf"><a href="#Default-logging-rules-can-be-found-in-etc-rsyslog-d-50-default-conf" class="headerlink" title="Default logging rules can be found in /etc/rsyslog.d/50-default.conf"></a>Default logging rules can be found in /etc/rsyslog.d/50-default.conf</h1><p>… …<br>#</p>
<h1 id="Include-all-config-files-in-etc-rsyslog-d"><a href="#Include-all-config-files-in-etc-rsyslog-d" class="headerlink" title="Include all config files in /etc/rsyslog.d/"></a>Include all config files in /etc/rsyslog.d/</h1><p>#<br>$IncludeConfig /etc/rsyslog.d/*.conf</p>
<pre><code>
用vim打开/etc/rsyslog.d/50-default.conf文件增加一行内容如下：
</code></pre>
<p>*.info;mail.none;authpriv.none;cron.none /var/log/messages</p>
<p>```</p>
<p><a href="http://www.cnblogs.com/yc_sunniwell/archive/2010/07/05/1771563.html">原文</a></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>抓包工具</tag>
        <tag>tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>微信开发</title>
    <url>/2017/04/06/1051.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://iot.weixin.qq.com/wiki/new/index.html?page=2-1">微信硬件平台</a><br><a href="https://mp.weixin.qq.com/debug/wxadoc/introduction/index.html?t=2017118">小程序</a></p>
<p>蛋疼的一天</p>
]]></content>
      <tags>
        <tag>微信</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>哈夫曼树&amp;哈夫曼编码</title>
    <url>/2020/08/12/3729.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><blockquote>
<p>哈夫曼树也叫最优二叉树（哈夫曼树）</p>
</blockquote>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>  <a href="https://baike.baidu.com/item/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/2305769?fr=aladdin">给定N个权值作为N个叶子结点，构造一棵二叉树，若该树的带权路径长度达到最小，称这样的二叉树为最优二叉树，也称为哈夫曼树(Huffman Tree)。哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</a></p>
<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><table>
<thead>
<tr>
<th align="left">名词</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">路径长度</td>
<td align="left">根结点到第L层结点路径长度为L-1</td>
</tr>
<tr>
<td align="left">树的带权路径长度（WPL）</td>
<td align="left">树中所有叶子结点的带权路径长度之和<br><img src="/images/pasted-75.png" alt="upload successful"><br>其中，n表示叶子结点的数目，wi和li分别表示叶子结点ki的权值和树根结点到叶子结点ki之间的路径长度。</td>
</tr>
<tr>
<td align="left"><img src="/images/pasted-76.png" alt="upload successful"></td>
<td align="left"></td>
</tr>
</tbody></table>
<p>|</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>哈夫曼树中权越大的叶子离根越近(WPL最小的二叉树)</li>
<li>具有相同带权结点的哈夫曼树不惟一</li>
<li>哈夫曼树的结点的度数为 0 或 2， 没有度为 1 的结点；</li>
<li>包含 n 个叶子结点的哈夫曼树中共有 2n – 1 个结点。</li>
<li>包含 n 棵树的森林要经过 n–1 次合并才能形成哈夫曼树，共产生 n–1 个新结点</li>
</ol>
<p><img src="/images/pasted-74.png" alt="upload successful"><br><img src="/images/pasted-62.png" alt="upload successful"><br><strong>WPL 最小的值所属的树即为哈夫曼树</strong></p>
<p><img src="/images/pasted-65.png" alt="upload successful" title="hello"><br><img src="/images/pasted-63.png" alt="upload successful"><br><img src="/images/pasted-64.png" alt="upload successful"></p>
<h2 id="哈夫曼创建"><a href="#哈夫曼创建" class="headerlink" title="哈夫曼创建"></a>哈夫曼创建</h2><p><img src="/images/pasted-66.png" alt="upload successful"><br>为什么数组buffTree[2n-1] 的大小是2n-1,是因为n个子节点构成的树节点最多的个数是2n-1个<br><img src="/images/pasted-67.png" alt="upload successful"></p>
<p><img src="/images/pasted-68.png" alt="upload successful"></p>
<p><img src="/images/pasted-69.png" alt="upload successful"></p>
<h2 id="哈夫曼树编码"><a href="#哈夫曼树编码" class="headerlink" title="哈夫曼树编码"></a>哈夫曼树编码</h2><h3 id="前缀编码"><a href="#前缀编码" class="headerlink" title="前缀编码"></a>前缀编码</h3><p><img src="/images/pasted-70.png" alt="upload successful"></p>
<p><img src="/images/pasted-71.png" alt="upload successful"></p>
<p><img src="/images/pasted-72.png" alt="upload successful"></p>
<p>特点:<br>权值越高的叶子节点越靠近根节点</p>
<p><img src="/images/pasted-73.png" alt="upload successful"></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派之Hexo环境搭建</title>
    <url>/2019/01/27/7c1e.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装node-js-环境"><a href="#安装node-js-环境" class="headerlink" title="安装node.js 环境"></a>安装node.js 环境</h2><pre><code>pi@raspberrypi:~/workdir/node_js $ wget -qO- https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh

=&gt; Downloading nvm from git to &#39;/home/pi/.nvm&#39;
=&gt; 正克隆到 &#39;/home/pi/.nvm&#39;...
remote: Enumerating objects: 267, done.
remote: Counting objects: 100% (267/267), done.
remote: Compressing objects: 100% (242/242), done.
remote: Total 267 (delta 31), reused 86 (delta 15), pack-reused 0
接收对象中: 100% (267/267), 119.47 KiB | 7.00 KiB/s, 完成.
处理 delta 中: 100% (31/31), 完成.
=&gt; Compressing and cleaning up git repository

=&gt; Appending nvm source string to /home/pi/.profile
=&gt; bash_completion source string already in /home/pi/.profile
=&gt; Close and reopen your terminal to start using nvm or run the following to use it now:

export NVM_DIR=&quot;$HOME/.nvm&quot;
[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</code></pre>
<a id="more"></a>

<h2 id="使环境变量生效"><a href="#使环境变量生效" class="headerlink" title="使环境变量生效"></a>使环境变量生效</h2><pre><code>source ~/.Profile</code></pre>
<h2 id="安装-npm"><a href="#安装-npm" class="headerlink" title="安装 npm"></a>安装 npm</h2><pre><code>pi@raspberrypi:~/workdir/node_js $ nvm install stable
Downloading and installing node v11.8.0...
Downloading https://nodejs.org/dist/v11.8.0/node-v11.8.0-linux-armv6l.tar.xz...
######################################################################## 100.0%
Computing checksum with sha256sum
Checksums matched!
Now using node v11.8.0 (npm v6.5.0)
Creating default alias: default -&gt; stable (-&gt; v11.8.0)</code></pre>
<h2 id="设置-npm-镜像源-不然安装很忙"><a href="#设置-npm-镜像源-不然安装很忙" class="headerlink" title="设置 npm 镜像源(不然安装很忙)"></a>设置 npm 镜像源(不然安装很忙)</h2><pre><code>pi@raspberrypi:~/workdir/hexo $ npm get registry
https://registry.npmjs.org/
pi@raspberrypi:~/workdir/hexo $ npm config set registry http://registry.npm.taobao.org/
pi@raspberrypi:~/workdir/hexo $ npm get registry
http://registry.npm.taobao.org/</code></pre>
<h2 id="安装hexo-客户端"><a href="#安装hexo-客户端" class="headerlink" title="安装hexo 客户端"></a>安装hexo 客户端</h2><pre><code>pi@raspberrypi:~/workdir/node_js $ npm install -g hexo-cli
/home/pi/.nvm/versions/node/v11.8.0/bin/hexo -&gt; /home/pi/.nvm/versions/node/v11.8.0/lib/node_modules/hexo-cli/bin/hexo
npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@1.2.7 (node_modules/hexo-cli/node_modules/fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@1.2.7: wanted &#123;&quot;os&quot;:&quot;darwin&quot;,&quot;arch&quot;:&quot;any&quot;&#125; (current: &#123;&quot;os&quot;:&quot;linux&quot;,&quot;arch&quot;:&quot;arm&quot;&#125;)

+ hexo-cli@1.1.0
added 225 packages from 431 contributors in 181.245s</code></pre>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>Linux</tag>
        <tag>raspberry</tag>
      </tags>
  </entry>
  <entry>
    <title>基本算法之二叉树</title>
    <url>/2018/03/25/b1e6.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这几天忙于考<font color=#115533>PMP(Project Management Professional)</font>, 连续几个周末都在看书，终于在昨天考完试了，不知道能不能过，1个月后看吧，🙏~<br>言归正传，今天来学习了解一下二叉树。</p>
<h2 id="什么是二叉树"><a href="#什么是二叉树" class="headerlink" title="什么是二叉树"></a>什么是二叉树</h2><div align=center>
![二叉树][1]
</div>

<a id="more"></a>
<p>其实在程序中二叉树长这样</p>
<div align=center>
![二叉树][2]
</div>

<blockquote>
<p>二叉树是数据结构中非常重要的内容，在计算机科学中，每个结点最多有两个子树的结构被称作二叉树.</p>
</blockquote>
<p><font color=#0101DF>以下摘自百度:</font></p>
<blockquote>
<p>在计算机科学中，二叉树是每个节点最多有两个子树的树结构。通常子树被称作“左子树”（left subtree）和“右子树”（right subtree）。<br>二叉树常被用于实现二叉查找树和二叉堆。<br>二叉树的每个结点至多只有二棵子树(不存在度大于2的结点)，二叉树的子树有左右之分，次序不能颠倒。<br>二叉树的第<code>i</code>层至多有<code>2^&#123;i-1&#125;</code> 个结点；深度为<code>k</code>的二叉树至多有<code>2^k-1</code>个结点；<br>对任何一棵二叉树T，如果其终端结点数为<code>n_0</code>，度为<code>2</code>的结点数为<code>n_2</code>，则<code>n_0=n_2+1</code>。<br>一棵深度为<code>k</code>，且有<code>2^k-1</code>个节点的二叉树，称为满二叉树。这种树的特点是每一层上的节点数都是最大节点数。<br>而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树。<br>具有n个节点的完全二叉树的深度为<code>log2n+1</code>。深度为<code>k</code>的完全二叉树，至少有<code>2^(k-1)</code>个节点，至多有<code>2^k-1</code>个节点。</p>
</blockquote>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="结点-子树"><a href="#结点-子树" class="headerlink" title="结点/子树"></a>结点/子树</h3><blockquote>
<p>二叉树每个结点的的分支称作该结点的子树，其左侧分支称为左子树，右侧分支称为右字树。</p>
</blockquote>
<h3 id="树的结点"><a href="#树的结点" class="headerlink" title="树的结点"></a>树的结点</h3><blockquote>
<p>包含一个数据元素及若干指向子树的分支；</p>
</blockquote>
<h3 id="孩子结点"><a href="#孩子结点" class="headerlink" title="孩子结点"></a>孩子结点</h3><blockquote>
<p>结点的子树的根称为该结点的孩子；</p>
</blockquote>
<h3 id="结点层次"><a href="#结点层次" class="headerlink" title="结点层次"></a>结点层次</h3><blockquote>
<p>一个结点的层次直观上来说就是其所在的行，其中根结点层次为1（第一行），其子结点层次为2（第二行），以此类推，第x行的结点为x。</p>
</blockquote>
<h3 id="二叉树的深度-高度"><a href="#二叉树的深度-高度" class="headerlink" title="二叉树的深度/高度"></a>二叉树的深度/高度</h3><blockquote>
<p>二叉树的深度（高度）指的是二叉树中的最大叶子结点所在的层。<br>二叉树的深度=max(左子树深度，右子数深度)+1，可用递归的方式实现。</p>
</blockquote>
<h3 id="结点的度"><a href="#结点的度" class="headerlink" title="结点的度"></a>结点的度</h3><blockquote>
<p>二叉树结点的度指该结点分支的个数，一棵非空二叉树结点的度只有以下三种情况：</p>
<ul>
<li>没有分支的结点度为0 ：如下图中6、7、8、9、10</li>
<li>只有一个分支（左或右）结点度为1 ：如下图中</li>
<li>有两个分支的结点度为2：如下图中1、2、3、4</li>
</ul>
</blockquote>
<h3 id="树的度"><a href="#树的度" class="headerlink" title="树的度"></a>树的度</h3><blockquote>
<p>树中最大的结点度。</p>
</blockquote>
<h3 id="叶子结点"><a href="#叶子结点" class="headerlink" title="叶子结点"></a>叶子结点</h3><blockquote>
<p>也叫终端结点，是度为 0 的结点；</p>
</blockquote>
<h3 id="分枝结点"><a href="#分枝结点" class="headerlink" title="分枝结点"></a>分枝结点</h3><blockquote>
<p>度不为0的结点；</p>
</blockquote>
<div align=center>
![二叉树][3]<font color=red>**二叉树结点的度最大为2.**</font>
</div>

<h2 id="二叉树性质"><a href="#二叉树性质" class="headerlink" title="二叉树性质"></a>二叉树性质</h2><ol>
<li>在非空二叉树中，第<code>i</code>层的结点总数不超过$2^{i-1}$, i&gt;=1；</li>
<li>深度为<code>h</code>的二叉树最多$2^h-1$有个结点_(h&gt;=1)_，最少有<code>h</code>个结点</li>
<li>对于任意一棵二叉树，如果其叶结点数为<code>N0</code>，而度数为2的结点总数为<code>N2</code>，则: $N0=N2+1$；</li>
<li>给定<code>N</code>个节点，能构成h(N)种不同的二叉树。<br><code>h(N)</code>为卡特兰数的第N项。$h(n)=C(2*n，n)/(n+1)$。</li>
<li>设有<code>i</code>个枝点，<code>I</code>为所有枝点的道路长度总和，<code>J</code>为叶的道路长度总和 $J=I+2i$;</li>
<li>具有n个结点的完全二叉树的深度为$[log_2n]+1$<strong>([x] 表示不大于x的最大整数)</strong>.</li>
</ol>
<h2 id="二叉树遍历方式"><a href="#二叉树遍历方式" class="headerlink" title="二叉树遍历方式"></a>二叉树<font color="red">遍历</font>方式</h2><p>二叉树的基本遍历有三种：前序遍历、中序遍历和后序遍历，除此之外还有分层遍历等。其中基本遍历代码实现时可采用递归方式，其过程如下：</p>
<h3 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h3><ul>
<li>首先访问根，再先序遍历左（右）子树，最后先序遍历右（左）子树，C语言代码如下：</li>
</ul>
<pre class=" language-C"><code class="language-C">void XXBL(tree*root)&#123;
//DoSomethingwithroot(处理根节点)
if(root->lchild!=NULL)
XXBL(root->lchild);
if(root->rchild!=NULL)
XXBL(root->rchild);
&#125;</code></pre>
<h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><ul>
<li>首先中序遍历左（右）子树，再访问根，最后中序遍历右（左）子树，C语言代码如下</li>
</ul>
<pre class=" language-C"><code class="language-C">voidZXBL(tree*root)
&#123;
if(root->lchild!=NULL)
ZXBL(root->lchild);
//DoSomethingwithroot(处理根节点)
if(root->rchild!=NULL)
ZXBL(root->rchild);
&#125;</code></pre>
<h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><ul>
<li>首先后序遍历左（右）子树，再后序遍历右（左）子树，最后访问根，C语言代码如下</li>
</ul>
<pre class=" language-C"><code class="language-C">voidHXBL(tree*root)&#123;
if(root->lchild!=NULL)
HXBL(root->lchild);
if(root->rchild!=NULL)
HXBL(root->rchild);
//DoSomethingwithroot(处理根节点)</code></pre>
<h3 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h3><ul>
<li>即按照层次访问，通常用队列来做。访问根，访问子女，再访问子女的子女（越往后的层次越低）（两个子女的级别相同）</li>
<li>分层遍历（广度优先搜索）：用队列实现。队列初始化，压入根结点，队列不为空时，弹出一个结点，访问，左右子结点不为空时，压入左右子结点。</li>
</ul>
<h2 id="二叉树分类"><a href="#二叉树分类" class="headerlink" title="二叉树分类"></a>二叉树分类</h2><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><blockquote>
<p>若设二叉树的高度为h，除第 h 层外，其它各层 (1-h-1) 的结点数都达到最大个数，第h层有叶子结点，并且叶子结点都是从左到右依次排布</p>
</blockquote>
<h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><blockquote>
<p>除了叶结点外每一个结点都有左右子叶且叶子结点都处在最底层的二叉树</p>
</blockquote>
<h3 id="平衡二叉树-AVL"><a href="#平衡二叉树-AVL" class="headerlink" title="平衡二叉树(AVL)"></a>平衡二叉树(AVL)</h3><blockquote>
<p>二叉排序树，空，或左子树和右子树都是平衡二叉树，且深度差&lt;=1</p>
</blockquote>
<div align=center>
![二叉树类型图][4]
</div>>


]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>汉枫系列-LPT230环境搭建</title>
    <url>/2018/04/17/97d9.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="MAC-下编译器下载"><a href="#MAC-下编译器下载" class="headerlink" title="MAC 下编译器下载"></a>MAC 下编译器下载</h2><blockquote>
<p>Linux 环境类似；</p>
</blockquote>
<ul>
<li><a href="https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads">https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads</a></li>
</ul>
]]></content>
      <categories>
        <category>汉枫</category>
      </categories>
      <tags>
        <tag>lpt230</tag>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>活成自己的样子</title>
    <url>/2888/03/28/dbbb.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<blockquote>
<p>我们总是拼尽全力… 想活成大家所期待的样子，以为那样就是最完美的。但其实，真正的成功，或许是不被他人绑架自己的梦想，全然按照自己的意愿过好这一生。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/ilxj/ilxj.github.io@master/images/pasted-15.png" alt="1"></p>
<pre class=" language-sh"><code class="language-sh">==============================================================================================

                                            _ooOoo_
                                           o8888888o
                                           88" . "88
                                           (| -_- |)
                                            O\ = /O
                                        ____/`---'\____
                                        .' \\|   |// `.
                                       / \\||| : |||// \
                                     / _||||| -:- |||||- \
                                       | | \\\ - /// | |
                                     | \_| ''\---/'' | |
                                      \ .-\__ `-` ___/-. /
                                   ___`. .' /--.--\ `. . __
                                . '< `.___\_<|>_/___.' >'.
                               | | : `- \`.;`\ _ /`;.`/ - ` : | |
                                 \ \ `-. \_ __\ /__ _/ .-` / /
                         ======`-.____`-.___\_____/___.-`____.-'======
                                            `=---='
                         .............................................
                            !Write the code!       Change the world!
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</code></pre>
<iframe frameborder="no" border="0" autoPlay=true marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=28285910&auto=0&height=66"></iframe>

<a id="more"></a>

<p><embed src="http://player.hunantv.com/mgtv_v5_main/main.swf?play_type=1&video_id=3954767" autostart=false allowFullScreen="true" quality="high" width="900" height="498" align="middle" allowScriptAccess="always" type="application/x-shockwave-flash"></embed></p>
<!-- <div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FADFA3","loop":true,"video":{"url":"http://devtest.qiniudn.com/若能绽放光芒.mp4","pic":"http://devtest.qiniudn.com/若能绽放光芒.png"},"danmaku":{"id":"9E2E3368B56CDBB4","api":"http://dplayer.daoapp.io","token":"tokendemo"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script> -->


]]></content>
      <categories>
        <category>新奇</category>
      </categories>
      <tags>
        <tag>新奇</tag>
        <tag>音乐</tag>
        <tag>🎵</tag>
      </tags>
  </entry>
  <entry>
    <title>日志打印</title>
    <url>/2021/03/17/f5b3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="定义打印函数"><a href="#定义打印函数" class="headerlink" title="定义打印函数"></a>定义打印函数</h2><p>参考ESP8266的打印，定义如下打印函数</p>
<a id="more"></a>

<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> _A_LOG_H_</span>
<span class="token macro property">#<span class="token directive keyword">define</span> _A_LOG_H_</span>
<span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>

<span class="token macro property">#<span class="token directive keyword">define</span> Log(format, args...)  printf( format, ##args ) </span><span class="token comment" spellcheck="true">/*这个地方替换成平台相关的打印函数*/</span>

<span class="token macro property">#<span class="token directive keyword">ifdef</span>  LOG_COLOR_EANBLE</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_BLACK   "30"</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_RED     "31"</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_GREEN   "32"</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_BROWN   "33"</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_BLUE    "34"</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_PURPLE  "35"</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_CYAN    "36"</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR(COLOR)  "\033[0;" COLOR "m"</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_BOLD(COLOR)   "\033[1;" COLOR "m"</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_RESET_COLOR   "\033[0m"</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_C       LOG_BOLD(LOG_COLOR_RED)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_E       LOG_COLOR(LOG_COLOR_RED)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_W       LOG_COLOR(LOG_COLOR_BROWN)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_I       LOG_COLOR(LOG_COLOR_GREEN)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_D       LOG_COLOR(LOG_COLOR_CYAN)</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_V</span>
<span class="token macro property">#<span class="token directive keyword">else</span></span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_C</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_E</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_W</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_I</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_D</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_COLOR_V</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_RESET_COLOR</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>

<span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    LOG_NONE<span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">/*!&lt; No log output */</span>
    LOG_CRITICAL<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">/*!&lt; Critical log*/</span>
    LOG_ERROR<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; errors, software module can not recover on its own */</span>
    LOG_WARN<span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">/*!&lt; Error conditions from which recovery measures have been taken */</span>
    LOG_INFO<span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">/*!&lt; Information messages which describe normal flow of events */</span>
    LOG_DEBUG<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">/*!&lt; Extra information which is not necessary for normal use (values, pointers, sizes, etc). */</span>
    LOG_VERBOSE     <span class="token comment" spellcheck="true">/*!&lt; Bigger chunks of debugging information, or frequent messages which can potentially flood the output. */</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>loglevel<span class="token punctuation">;</span>

<span class="token macro property">#<span class="token directive keyword">define</span> LOG_FORMAT(letter, format)  LOG_COLOR_ ## letter "%-10.10s ""|%-04d | " "["#letter"]" " [%s]"  format LOG_RESET_COLOR</span>
<span class="token macro property">#<span class="token directive keyword">define</span> LOG_IMPL(tag, format, log_level, log_tag_letter, ...) do &amp;#123;   \
            Log(LOG_FORMAT(log_tag_letter, format),__FUNCTION__,__LINE__, tag, ##__VA_ARGS__); \
        &amp;#125;while(0)</span>


<span class="token macro property">#<span class="token directive keyword">define</span> logD( tag, format, ... )  LOG_IMPL( tag,format,LOG_DEBUG,   D,##__VA_ARGS__ )</span>
<span class="token macro property">#<span class="token directive keyword">define</span> logI( tag, format, ... )  LOG_IMPL( tag,format,LOG_INFO,    I,##__VA_ARGS__ )</span>
<span class="token macro property">#<span class="token directive keyword">define</span> logW( tag, format, ... )  LOG_IMPL( tag,format,LOG_WARN,    W,##__VA_ARGS__ )</span>
<span class="token macro property">#<span class="token directive keyword">define</span> logE( tag, format, ... )  LOG_IMPL( tag,format,LOG_ERROR,   E,##__VA_ARGS__ )</span>
<span class="token macro property">#<span class="token directive keyword">define</span> logC( tag, format, ... )  LOG_IMPL( tag,format,LOG_CRITICAL,C,##__VA_ARGS__ )</span>

<span class="token macro property">#<span class="token directive keyword">define</span> logDump( tag,level,data,len  ) (&amp;#123;if(len>0)&amp;#123;int i;Log("%-10.10s " "|%-04d | " "*********************** %04d **********************",__FUNCTION__,__LINE__,(int)len );\
for( i=0;i&lt;len;i++ )\
&amp;#123;\
    if( 0==i%20 ) \
    &amp;#123;\
    Log("\r\n""%-10.10s " "|%-04d | ",__FUNCTION__,__LINE__);\
    &amp;#125;\
    Log("%02x ",*((unsigned char*)(data+i)) );\
&amp;#125;\
Log("\r\n\r\n");&amp;#125;\
&amp;#125;)</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre>
]]></content>
  </entry>
  <entry>
    <title>编辑器介绍</title>
    <url>/2017/06/07/f348.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h1><hr>
<h2 id="Sublime-Text主题推荐：Seti-UI"><a href="#Sublime-Text主题推荐：Seti-UI" class="headerlink" title="Sublime Text主题推荐：Seti_UI"></a>Sublime Text主题推荐：Seti_UI</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><hr>
<p>Seti_UI 这款主题最大的特点是能够显示各种文件类型的图标，小图标不仅看起来漂亮，而且大大增加了辨识度，能够轻松的找到对应的文件。</p>
<a id="more"></a>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><hr>
<p><strong>1. 安装</strong><br>在 Package Control 安装包命令行输入 Seti_UI 回车即可。</p>
<p><strong>2. 手动安装</strong></p>
<ul>
<li><a href="https://github.com/ctf0/Seti_ST3/archive/master.zip">Download the .zip</a>.</li>
<li>Unzip and rename the folder to Seti_UI</li>
<li>Copy the folder into Packages directory, which you can find using the menu item Preferences -&gt; Browse Packages… in Sublime Text.</li>
</ul>
<p><strong>3. 启用</strong><br>在 Preferences -&gt; Settings -&gt; User 中加入：</p>
<pre><code>&quot;theme&quot;: &quot;Seti.sublime-theme&quot;</code></pre>
<p>或者</p>
<pre><code>&quot;theme&quot;: &quot;Seti_orig.sublime-theme&quot;</code></pre>
]]></content>
      <tags>
        <tag>工具</tag>
        <tag>IDE</tag>
      </tags>
  </entry>
  <entry>
    <title>风过留痕，雁过留声</title>
    <url>/2017/08/06/23d1.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="我不想让你知道"><a href="#我不想让你知道" class="headerlink" title="我不想让你知道"></a>我不想让你知道</h2><p>就不想让你知道~~</p>
]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>实用网站</title>
    <url>/2020/04/22/6c49.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="搜索相关"><a href="#搜索相关" class="headerlink" title="搜索相关"></a>搜索相关</h2><ul>
<li><a href="https://mijisou.com/">秘迹搜索</a><br><img src="/images/pasted-18.png" alt="upload successful"></li>
</ul>
<a id="more"></a>

<ul>
<li><a href="https://www.xiaobaipan.com/">小白盘</a><br><img src="/images/pasted-19.png" alt="upload successful"></li>
<li><a href="https://www.dogedoge.com/">DogeDoge搜索</a><br><img src="/images/pasted-20.png" alt="upload successful"></li>
<li><a href="https://www.gitlogs.com/">gitlogs</a> GitHub网站的内容搜索引擎<br><img src="/images/pasted-21.png" alt="upload successful"></li>
</ul>
<h2 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h2><ul>
<li><a href="http://www.ypppt.com/">优品PPT</a><br><img src="/images/pasted-22.png" alt="upload successful"></li>
<li><a href="https://www.pdfpai.com/">PDF派</a><br><img src="/images/pasted-29.png" alt="upload successful"></li>
</ul>
<h2 id="图片处理"><a href="#图片处理" class="headerlink" title="图片处理"></a>图片处理</h2><ul>
<li><a href="https://www.uupoop.com/">在线PS</a><br><img src="/images/pasted-23.png" alt="upload successful"></li>
<li><a href="https://tinypng.com/">在线图片压缩</a><br><img src="/images/pasted-24.png" alt="upload successful"></li>
<li><a href="https://www.smartresize.com/zh-cn">在线批量裁剪图片工具</a><br><img src="/images/pasted-25.png" alt="upload successful"></li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul>
<li><a href="https://visualgo.net/zh">VisuAlgo</a><br><img src="/images/pasted-26.png" alt="upload successful"></li>
</ul>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul>
<li><a href="https://www.toolnb.com/">爱资料工具</a><br><img src="/images/pasted-27.png" alt="upload successful"></li>
<li><a href="%E8%8F%9C%E9%B8%9F%E5%B7%A5%E5%85%B7">菜鸟工具</a><br><img src="/images/pasted-28.png" alt="upload successful"></li>
<li><a href="http://www.matools.com/#">matool</a><br><img src="/images/pasted-30.png" alt="upload successful"></li>
<li><a href="https://www.coder.work/">https://www.coder.work</a>  (里面有一个在线HTTP 测试工具我比较喜欢)<br><img src="/images/pasted-32.png" alt="upload successful"></li>
</ul>
<h2 id="素材"><a href="#素材" class="headerlink" title="素材"></a>素材</h2><p>-<a href="https://www.runoob.com/manual/Flat-UI/#">FlatUI</a><br><img src="/images/pasted-31.png" alt="upload successful"></p>
]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>win10 实用工具.md</title>
    <url>/2019/11/06/c142.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="包管理工具-Scoop"><a href="#包管理工具-Scoop" class="headerlink" title="包管理工具 - Scoop"></a>包管理工具 - Scoop</h2><ul>
<li><blockquote>
<p>scoop 类似于Ubuntu下的<code>apt-get install</code><br> </p>
</blockquote>
</li>
<li><a href="https://scoop.sh/">官网</a><br></li>
<li><strong>安装注意地方:</strong> 需要科学上网，不能下载不了<br></li>
</ul>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ol>
<li>打开 <code>powershell</code>,输入下载安装命令</li>
</ol>
<pre class=" language-sh"><code class="language-sh">PS C:\Users\87832> iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
Initializing...
Downloading scoop...
Extracting...
Creating shim...
Downloading main bucket...
Extracting...
Adding ~\scoop\shims to your path.
'lastupdate' has been set to '2019-11-06T11:20:35.0813495+08:00'
Scoop was installed successfully!
Type 'scoop help' for instructions.
PS C:\Users\87832> scoop help</code></pre>
<a id="more"></a>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><h5 id="安装7zip"><a href="#安装7zip" class="headerlink" title="安装7zip"></a>安装7zip</h5><pre class=" language-sh"><code class="language-sh">λscoop install 7zip
Installing '7zip' (19.00) [64bit]
7z1900-x64.msi (1.7 MB) [===========================================================] 100%
Checking hash of 7z1900-x64.msi ... ok.
Extracting 7z1900-x64.msi ... done.
Linking ~\scoop\apps\7zip\current => ~\scoop\apps\7zip\19.00
Creating shim for '7z'.
Creating shortcut for 7-Zip (7zFM.exe)
'7zip' (19.00) was installed successfully!</code></pre>
<h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><ul>
<li><a href="https://www.voidtools.com/zh-cn/">everything</a> </li>
<li><a href="http://www.wox.one/">Wox</a></li>
</ul>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><h3 id="REST-Client"><a href="#REST-Client" class="headerlink" title="REST Client"></a>REST Client</h3><p>参考: <a href="https://blog.csdn.net/noArk/article/details/86748738">https://blog.csdn.net/noArk/article/details/86748738</a></p>
<h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><a href="http://plantuml.com/zh/">http://plantuml.com/zh/</a></p>
<h3 id="Window-Terminal-技巧"><a href="#Window-Terminal-技巧" class="headerlink" title="Window Terminal 技巧"></a>Window Terminal 技巧</h3><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">用处</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl+Alt+数字</td>
<td align="left">切换打开的控制台</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+数字</td>
<td align="left">打开新的控制台</td>
</tr>
<tr>
<td align="left">Shift+Alt++/=</td>
<td align="left">横向打开新控制台</td>
</tr>
<tr>
<td align="left">Shift+Alt+_/-</td>
<td align="left">纵向打开新控制台</td>
</tr>
<tr>
<td align="left">Shift+Alt+方向键</td>
<td align="left">控制控制台尺寸</td>
</tr>
<tr>
<td align="left">Alt+方向键</td>
<td align="left">在本标签内切换控制台</td>
</tr>
<tr>
<td align="left">Ctrl+Shift+w</td>
<td align="left">关闭当前控制台</td>
</tr>
</tbody></table>
]]></content>
  </entry>
  <entry>
    <title>基本算法之平衡二叉树</title>
    <url>/2018/03/25/646b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h2><p><a href="https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/10421057?fr=aladdin">摘自百度:</a></p>
<blockquote>
<p>平衡二叉搜索树（Self-balancing binary search tree）又被称为AVL树（有别于AVL算法），且具有以下性质：它是一 棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树，同时，平衡二叉树必定是二叉搜索树，反之则不一定。平衡二叉树的常用实现方法有<code>红黑树</code>、<code>AVL</code>、<code>替罪羊树</code>、<code>Treap</code>、<code>伸展树</code>等。 最小二叉平衡树的节点的公式如下 $F(n)=F(n-1)+F(n-2)+1$ 这个类似于一个递归的数列，可以参考Fibonacci(斐波那契)数列，1是根节点，F(n-1)是左子树的节点数量，F(n-2)是右子树的节点数量</p>
</blockquote>
<a id="more"></a>

<h2 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h2><p><a href="https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/10421057?fr=aladdin">还是摘自百度</a></p>
<blockquote>
<p>AVL是最先发明的自平衡二叉查找树算法。在AVL中任何节点的两个儿子子树的高度最大差别为一，所以它也被称为高度平衡树，n个结点的AVL树最大深度约1.44log2n。查找、插入和删除在平均和最坏情况下都是O（log n）。增加和删除可能需要通过一次或多次树旋转来重新平衡这个树。</p>
</blockquote>
<p>根据AVL树的定义，AVL树中的任意结点的平衡因子只可能是-1（右子树高于左子树）、0或者1（左子树高于右子树），在某些图中也会表示为绝对高度差，即0，1，2这种形式，请注意理解。</p>
<pre><code>BalanceFactor = height(left-sutree) − height(right-sutree)</code></pre>
<div align=center>
![AVL树][2]
</div>

<h3 id="AVL平衡二叉树结构定义"><a href="#AVL平衡二叉树结构定义" class="headerlink" title="AVL平衡二叉树结构定义"></a>AVL平衡二叉树结构定义</h3><pre class=" language-C"><code class="language-C">typedef struct AVLNode *Tree;
typedef int ElementType;
struct AVLNode
&#123;
    int depth; //深度，这里计算每个结点的深度，通过深度的比较可得出是否平衡
    Tree parent; //该结点的父节点，方便操作
    ElementType val; //结点值
    Tree lchild;
    Tree rchild;
    AVLNode(int val=0) //默认构造函数
    &#123;
        parent=NULL;
        depth=0;
        lchild=rchild=NULL;
        this->val=val;
    &#125;
&#125;;</code></pre>
<h3 id="AVL平衡二叉树操作"><a href="#AVL平衡二叉树操作" class="headerlink" title="AVL平衡二叉树操作"></a>AVL平衡二叉树操作</h3><blockquote>
<p>平衡的调整共有四种情况：分别为<code>LL</code>,<code>LR</code>,<code>RR</code>,<code>RL</code>。<br>当父节点的左子树和右子树的高度之差不能大于1，也就是说不能高过1层，否则该树就失衡了，就要对树进行操作</p>
</blockquote>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><p>我们可以记录当前节点的高度，比如空节点是-1，叶子节点是0，非叶子节点的height往根节点递增，比如在下图<br>中我们认为树的高度为h=2。</p>
<div align=center>
![AVL][3]
</div>

<h4 id="AVL树的插入时的失衡与调整"><a href="#AVL树的插入时的失衡与调整" class="headerlink" title="AVL树的插入时的失衡与调整"></a>AVL树的插入时的失衡与调整</h4><ul>
<li><p>失衡与调整方向</p>
<blockquote>
<p>平衡二叉树的失衡调整主要是通过旋转<strong>最小失衡子树</strong>来实现的。(然后你要问啥是<em><em><font color="red">最小失衡子树</font></em></em> 了？🤷‍ 😶  。。。 )</p>
</blockquote>
</li>
<li><p>最小失衡子树</p>
<blockquote>
<p>在新插入的结点向上查找，以第一个平衡因子的绝对值超过1的结点为根的子树称为最小不平衡子树。也就是说，一棵失衡的树，是有可能有多棵子树同时失衡的，如下。而这个时候，我们只要调整最小的不平衡子树，就能够将不平衡的树调整为平衡的树。</p>
</blockquote>
</li>
</ul>
<p><strong>例子1</strong> 在图A中。2结点（左子树树高-右子树树高）的绝对值=2。同理，3结点的平衡因子也为2.此时同时存在了两棵不平衡子树，而以3为根的树是最小的不平衡子树。我们只要将其以3为中心，将最小不平衡树向左旋转，即可得到平衡二叉树，如图B。</p>
<div align="center">
![val balance][4]
</div>

<p><strong>例子2</strong></p>
<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p><a href="https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/10421057?fr=aladdin">又摘自百度</a></p>
<blockquote>
<p>红黑树是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。它是在1972年由Rudolf Bayer发明的，他称之为”对称二叉B树”，它现代的名字是在 Leo J. Guibas 和 Robert Sedgewick 于1978年写的一篇论文中获得的。它是复杂的，但它的操作有着良好的最坏情况运行时间，并且在实践中是高效的: 它可以在O(log n)时间内做查找，插入和删除，这里的n是树中元素的数目。</p>
</blockquote>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol>
<li>所有节点的颜色是红色或者黑色；(很有道理的样子，🙄🙄🙄🙄🙄🙄)</li>
<li>根节点是黑色；</li>
<li>所有的叶子节点是黑色（叶子节点包含NULL）；</li>
<li>每个红色的节点都有两个黑色的子节点(即红节点的儿子和父亲都必须为黑)；</li>
<li>从任意节点出发，其到叶子节点树尾NULL结点的每一条路径上都包含相同数目的黑色节点</li>
</ol>
<div align="center">
![rbT][5]
</div>

<h3 id="树的旋转知识"><a href="#树的旋转知识" class="headerlink" title="树的旋转知识"></a>树的旋转知识</h3><blockquote>
<p>当我们在对红黑树进行插入和删除等操作时，对树做了修改，那么可能会违背红黑树的性质。<br>为了保持红黑树的性质，我们可以通过对树进行旋转，即修改树种某些节点的颜色及指针结构，以达到对红黑树进行插入、删除节点等操作时，红黑树依然能保持它特有的性质（如上文所述的，五点性质）。</p>
</blockquote>
<ul>
<li>左旋<blockquote>
<p>当在某个节点pivot上，做左旋操作时，我们假设它的右孩子y不是NIL[T]，pivot可以为树内任意左孩子而不是NIL[T]的节点。<br>左旋以pivot到y之间的链为“支轴”进行，它使y成为该孩子树新的根，而y的左孩子b则成为pivot的右孩子。</p>
</blockquote>
</li>
</ul>
<div align="center">
![rgTl][6]
</div>

<ul>
<li>右旋</li>
</ul>
<div align="center">
![rgTr][7]
</div>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://blog.csdn.net/u014634338/article/details/42465089">https://blog.csdn.net/u014634338/article/details/42465089</a></li>
<li><a href="https://www.cnblogs.com/huangxincheng/archive/2012/07/22/2603956.html">https://www.cnblogs.com/huangxincheng/archive/2012/07/22/2603956.html</a></li>
<li><a href="https://blog.csdn.net/Sun_TTTT/article/details/65445754">https://blog.csdn.net/Sun_TTTT/article/details/65445754</a></li>
<li><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md">https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.01.md</a></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>小白学习-蓝牙-01-NRF51822环境搭建</title>
    <url>/2021/03/09/ddee.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-nRF-51822-xxAA-记录笔记"><a href="#1-nRF-51822-xxAA-记录笔记" class="headerlink" title="1. nRF-51822_xxAA 记录笔记"></a>1. nRF-51822_xxAA 记录笔记</h1><!-- TOC -->

<ul>
<li><a href="#1-nrf-51822_xxaa-%E8%AE%B0%E5%BD%95%E7%AC%94%E8%AE%B0">1. nRF-51822_xxAA 记录笔记</a><ul>
<li><a href="#11-date2021-03-12">1.1. Date：2021-03-12</a></li>
<li><a href="#12-sdk-%E8%AF%B4%E6%98%8E">1.2. SDK 说明</a><ul>
<li><a href="#121-device-family-packnrf-mdk">1.2.1. Device family pack(nRF MDK)</a><ul>
<li><a href="#1211-%E5%B7%A5%E7%A8%8B%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC%E6%9F%A5%E7%9C%8B">1.2.1.1. 工程依赖版本查看</a></li>
</ul>
</li>
<li><a href="#122-%E5%A0%86%E6%A0%88%E8%B5%84%E6%BA%90%E4%BD%BF%E7%94%A8">1.2.2. 堆栈资源使用</a><ul>
<li><a href="#1221-memory%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%E8%A1%A8">1.2.2.1. Memory资源映射表</a></li>
<li><a href="#1222-s130%E5%8D%8F%E8%AE%AE%E6%A0%88%E8%B5%84%E4%BD%BF%E7%94%A8">1.2.2.2. S130协议栈资使用</a></li>
<li><a href="#1223-%E8%B0%83%E7%94%A8%E6%A0%88%E5%92%8C%E5%A0%86">1.2.2.3. 调用栈和堆</a></li>
<li><a href="#1224-keil-%E5%A0%86%E6%A0%88%E8%AE%BE%E7%BD%AE">1.2.2.4. Keil 堆栈设置</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#13-%E7%9B%B8%E5%85%B3%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80">1.3. 相关下载地址</a></li>
<li><a href="#14-sdk%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83">1.4. SDK命名规范</a><ul>
<li><a href="#141-softdevice%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E4%B8%80">1.4.1. Softdevice命名规则一</a></li>
<li><a href="#142-softdevice%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99%E4%BA%8C">1.4.2. Softdevice命名规则二</a></li>
</ul>
</li>
<li><a href="#15-%E5%AE%98%E6%96%B9%E6%9D%BF%E5%AD%90">1.5. 官方板子</a></li>
<li><a href="#16-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3">1.6. 官方文档</a></li>
<li><a href="#17-date2021-03-13">1.7. Date：2021-03-13</a></li>
<li><a href="#18-nrf51822-%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE">1.8. nRF51822 日志配置</a><ul>
<li><a href="#181-%E4%BD%BF%E7%94%A8%E4%B8%B2%E5%8F%A3%E6%88%96j-link%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97">1.8.1. 使用串口或j-link输出日志</a></li>
<li><a href="#182-%E4%BD%BF%E7%94%A8printf%E5%87%BD%E6%95%B0%E4%BB%8E%E4%B8%B2%E5%8F%A3%E8%BE%93%E5%87%BA%E6%97%A5%E5%BF%97">1.8.2. 使用Printf函数从串口输出日志</a></li>
</ul>
</li>
<li><a href="#19-vscode%E6%8F%92%E4%BB%B6-keil-assistant">1.9. VsCode插件-Keil Assistant</a><ul>
<li><a href="#191-keil-assistant-%E9%85%8D%E7%BD%AE">1.9.1. Keil Assistant 配置</a></li>
</ul>
</li>
<li><a href="#%E4%BE%8B%E7%A8%8B%E5%88%86%E6%9E%90-experimental_ble_app_blinky">例程分析-experimental_ble_app_blinky</a></li>
<li><a href="#2012-03-14">2012-03-14</a></li>
<li><a href="#sdk%E4%BB%8B%E7%B4%B9nrf5_sdk_1230_d7731ad">SDK介紹(nRF5_SDK_12.3.0_d7731ad)</a></li>
</ul>
</li>
</ul>
<!-- /TOC -->
<a id="more"></a>
<h2 id="1-1-Date：2021-03-12"><a href="#1-1-Date：2021-03-12" class="headerlink" title="1.1. Date：2021-03-12"></a>1.1. Date：2021-03-12</h2><h2 id="1-2-SDK-说明"><a href="#1-2-SDK-说明" class="headerlink" title="1.2. SDK 说明"></a>1.2. SDK 说明</h2><p>Nordic 有两套独立的SDK,分别为<strong>开发SDK</strong>和**协议栈SDK(softdevice)**。<br>这两个SDK必须配套使用，每一个版本的SDK都包含了该版本支持的所有softdevice，请到SDK根目录\components\softdevice目录查看具体支持的softdevice类别和版本；</p>
<h3 id="1-2-1-Device-family-pack-nRF-MDK"><a href="#1-2-1-Device-family-pack-nRF-MDK" class="headerlink" title="1.2.1. Device family pack(nRF MDK)"></a>1.2.1. Device family pack(nRF MDK)</h3><p>nRF MDK，必须和SDK配套使用，不同的SDK 对应不同的nRFMDK,从下载回来的SDK版本为:<strong>nRF5_SDK_12.3.0_d7731ad</strong>中的release_notes.txt 可以看到知道的nRF MDK,如下<br><img src="/images/mdk.jpg" alt="MDK"></p>
<h4 id="1-2-1-1-工程依赖版本查看"><a href="#1-2-1-1-工程依赖版本查看" class="headerlink" title="1.2.1.1. 工程依赖版本查看"></a>1.2.1.1. 工程依赖版本查看</h4><p><img src="/images/%E4%BE%9D%E8%B5%96%E7%89%88%E6%9C%AC.jpg" alt="依赖版本"></p>
<h3 id="1-2-2-堆栈资源使用"><a href="#1-2-2-堆栈资源使用" class="headerlink" title="1.2.2. 堆栈资源使用"></a>1.2.2. 堆栈资源使用</h3><p>通过官方在线文档查询: <a href="https://infocenter.nordicsemi.com/index.jsp?topic=/com.nordic.infocenter.s130.sds/dita/softdevices/s130/mem_usage/mem_resource_reqs.html&amp;anchor=mem_resource_reqs__table_ayk_4lp_3r">https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.s130.sds%2Fdita%2Fsoftdevices%2Fs130%2Fmem_usage%2Fmem_resource_reqs.html&amp;anchor=mem_resource_reqs__table_ayk_4lp_3r</a></p>
<h4 id="1-2-2-1-Memory资源映射表"><a href="#1-2-2-1-Memory资源映射表" class="headerlink" title="1.2.2.1. Memory资源映射表"></a>1.2.2.1. Memory资源映射表</h4><p><img src="/images/memory%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%E8%A1%A8.jpg" alt="memory资源映射表"></p>
<h4 id="1-2-2-2-S130协议栈资使用"><a href="#1-2-2-2-S130协议栈资使用" class="headerlink" title="1.2.2.2. S130协议栈资使用"></a>1.2.2.2. S130协议栈资使用</h4><p><img src="/images/S130%E5%8D%8F%E8%AE%AE%E6%A0%88%E4%BD%BF%E7%94%A8.jpg" alt="S130协议栈使用"></p>
<h4 id="1-2-2-3-调用栈和堆"><a href="#1-2-2-3-调用栈和堆" class="headerlink" title="1.2.2.3. 调用栈和堆"></a>1.2.2.3. 调用栈和堆</h4><ul>
<li>S130的调用栈最大会使用<code>1536 bytes</code>,所以我们在编程的时候要留意应用层的栈使用；</li>
<li>S130协议栈不使用堆空间<br><img src="/images/%E8%B0%83%E7%94%A8%E6%A0%88%E5%92%8C%E5%A0%86.jpg" alt="调用栈和堆"><h4 id="1-2-2-4-Keil-堆栈设置"><a href="#1-2-2-4-Keil-堆栈设置" class="headerlink" title="1.2.2.4. Keil 堆栈设置"></a>1.2.2.4. Keil 堆栈设置</h4>通过分析S130的堆栈使用情况，由于查看NRF51822的堆栈大小分别为 <code>256kB of Flash and 16kB of RAM</code>于是设置堆栈如下图:<br><img src="/images/keil%E5%A0%86%E6%A0%88%E8%AE%BE%E7%BD%AE.jpg" alt="keil堆栈设置"><table>
<thead>
<tr>
<th align="left">Flash/RAM</th>
<th align="left">起始地址</th>
<th align="left">size</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Flash</td>
<td align="left">0x1B000</td>
<td align="left">0x25000</td>
</tr>
<tr>
<td align="left">RAM</td>
<td align="left">0x200013C8</td>
<td align="left">0x2C38</td>
</tr>
<tr>
<td align="left">RAM</td>
<td align="left">0x20001FE8</td>
<td align="left">0x2018</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="1-3-相关下载地址"><a href="#1-3-相关下载地址" class="headerlink" title="1.3. 相关下载地址"></a>1.3. 相关下载地址</h2><ul>
<li>SDK 官网下载地址: <a href="https://www.nordicsemi.com/Software-and-Tools/Software/nRF5-SDK/Download#infotabs">https://www.nordicsemi.com/Software-and-Tools/Software/nRF5-SDK/Download#infotabs</a></li>
<li>调试工具桌面版nRF connect (同时支持Windows/MacOS/Linux平台): <a href="https://www.nordicsemi.com/Software-and-Tools/Development-Tools/nRF-Connect-for-desktop/Download#infotabs">https://www.nordicsemi.com/Software-and-Tools/Development-Tools/nRF-Connect-for-desktop/Download#infotabs</a><h2 id="1-4-SDK命名规范"><a href="#1-4-SDK命名规范" class="headerlink" title="1.4. SDK命名规范"></a>1.4. SDK命名规范</h2><h3 id="1-4-1-Softdevice命名规则一"><a href="#1-4-1-Softdevice命名规则一" class="headerlink" title="1.4.1. Softdevice命名规则一"></a>1.4.1. Softdevice命名规则一</h3>Softdevice包括两种底层协议栈：BLE和ANT，BLE包括两种角色：central（又称master）和peripheral（又称slave），为此需要给这些不同类型的协议栈进行命名区分。协议栈命名格式为Sxyz，其中</li>
<li>x – 表示协议栈的类型，1表示BLE协议栈，2表示ANT协议栈，3表示同时支持BLE和ANT</li>
<li>y – 表示BLE角色，1表示从设备，2表示主设备，3表示同时支持主设备和从设备</li>
<li>z – 表示芯片类型，0表示nRF51系列，2表示nRF52系列<br>比如S110，表示只支持从设备模式的nRF51 BLE协议栈<br>比如S130，表示既支持从设备模式又支持主设备模式的nRF51 BLE协议栈<br>比如S132，表示既支持从设备模式又支持主设备模式的nRF52 BLE协议栈<br>比如S212，表示nRF52 ANT协议栈<br>比如S332，表示nRF52既支持BLE协议栈又支持ANT协议栈，而且BLE协议栈既支持从设备模式又支持主设备模式<h3 id="1-4-2-Softdevice命名规则二"><a href="#1-4-2-Softdevice命名规则二" class="headerlink" title="1.4.2. Softdevice命名规则二"></a>1.4.2. Softdevice命名规则二</h3>大体上跟命名规则1相同，但是协议栈编号最后2位跟芯片型号一样，比如S140，代表这个协议栈专门用于nRF52840。由于52840 Flash空间很大，没有必要做各种细分的协议栈，S140协议栈是一个大而全的协议栈，包含蓝牙所有功能。</li>
<li>Softdevice版本编号，从1.0.0开始编号，然后2.0.0，3.0.0，…S110最新版本是8.0.0，S130最新版本是2.0.1，S132/S140/S112最新版本是7.0.0。</li>
<li>SDK和softdevice兼容性问题。不要查看兼容性表格，直接打开SDK，直接使用SDK里面的softdevice，肯定没有问题。比如S132 在SDK如下文件夹中：</li>
<li><h2 id="1-5-官方板子"><a href="#1-5-官方板子" class="headerlink" title="1.5. 官方板子"></a>1.5. 官方板子</h2><table>
<thead>
<tr>
<th align="left">板子</th>
<th align="left">芯片</th>
<th align="left">区别</th>
</tr>
</thead>
<tbody><tr>
<td align="left">PCA10001</td>
<td align="left">nRF51822-QFAA</td>
<td align="left">硬件和PCA10028一样</td>
</tr>
<tr>
<td align="left">PCA10028</td>
<td align="left">nRF51422-QFAC</td>
<td align="left"></td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="1-6-官方文档"><a href="#1-6-官方文档" class="headerlink" title="1.6. 官方文档"></a>1.6. 官方文档</h2><ul>
<li>在线帮助文档: <a href="https://infocenter.nordicsemi.com/index.jsp?topic=/com.nordic.infocenter.sdk5.v15.3.0/examples.html&amp;cp=5_1_4">https://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk5.v15.3.0%2Fexamples.html&amp;cp=5_1_4</a><br><img src="/images/helpdoc.jpg" alt="helpdoc"><br><img src="/images/sdk_api.jpg" alt="sdk_api"></li>
<li>BLE在线功耗计算工具 :</li>
<li>Nordic Github : <a href="https://github.com/NordicSemiconductor">https://github.com/NordicSemiconductor</a></li>
</ul>
<h2 id="1-7-Date：2021-03-13"><a href="#1-7-Date：2021-03-13" class="headerlink" title="1.7. Date：2021-03-13"></a>1.7. Date：2021-03-13</h2><h2 id="1-8-nRF51822-日志配置"><a href="#1-8-nRF51822-日志配置" class="headerlink" title="1.8. nRF51822 日志配置"></a>1.8. nRF51822 日志配置</h2><h3 id="1-8-1-使用串口或j-link输出日志"><a href="#1-8-1-使用串口或j-link输出日志" class="headerlink" title="1.8.1. 使用串口或j-link输出日志"></a>1.8.1. 使用串口或j-link输出日志</h3><p>可以设置串口或j-link 输出，同时还能配置日志颜色等参数。</p>
<ul>
<li><kbd>J-Link RTT Viewer 配置</kbd><br><img src="/images/jlink_rtt.jpg" alt="jlink_rtt"></li>
<li><kbd>SDK Config 配置 配置</kbd><br><img src="/images/log_config.jpg" alt="log_config"></li>
<li>下载固件查看日志，如图<kbd>J-Link RTT Viewer</kbd>显示 嘿嘿~<br><img src="/images/log.jpg" alt="log"></li>
</ul>
<h3 id="1-8-2-使用Printf函数从串口输出日志"><a href="#1-8-2-使用Printf函数从串口输出日志" class="headerlink" title="1.8.2. 使用Printf函数从串口输出日志"></a>1.8.2. 使用Printf函数从串口输出日志</h3><p>第一步、<br>需要把retarget.c 从SDK中拷贝出来(xx\nRF5_SDK\nRF5_SDK_12.3.0_d7731ad\components\libraries\uart\retarget.c)，放到工程下,因为默认重定义的fputc,函数不会打印，需要改为以下:<br>改前:</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span> p_file<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">UNUSED_PARAMETER</span><span class="token punctuation">(</span>p_file<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">UNUSED_VARIABLE</span><span class="token punctuation">(</span><span class="token function">app_uart_put</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ch<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p>改后:</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fputc</span><span class="token punctuation">(</span><span class="token keyword">int</span> ch<span class="token punctuation">,</span> FILE <span class="token operator">*</span> p_file<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">UNUSED_PARAMETER</span><span class="token punctuation">(</span>p_file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">app_uart_put</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uint8_t<span class="token punctuation">)</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ch<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p>第二步、<br>添加配置,在<code>sdk_config.h</code>中添加以下配置</p>
<pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">ifndef</span> UART_ENABLED</span>
<span class="token macro property">#<span class="token directive keyword">define</span> UART_ENABLED 1</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span class="token comment" spellcheck="true">// &lt;q> APP_FIFO_ENABLED  - app_fifo - Software FIFO implementation</span>
<span class="token macro property">#<span class="token directive keyword">ifndef</span> APP_FIFO_ENABLED</span>
<span class="token macro property">#<span class="token directive keyword">define</span> APP_FIFO_ENABLED 1</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span class="token comment" spellcheck="true">// &lt;e> APP_UART_ENABLED - app_uart - UART driver</span>
<span class="token comment" spellcheck="true">//==========================================================</span>
<span class="token macro property">#<span class="token directive keyword">ifndef</span> APP_UART_ENABLED</span>
<span class="token macro property">#<span class="token directive keyword">define</span> APP_UART_ENABLED 1</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span>
<span class="token comment" spellcheck="true">// &lt;q> RETARGET_ENABLED  - retarget - Retargeting stdio functions</span>
<span class="token macro property">#<span class="token directive keyword">ifndef</span> RETARGET_ENABLED</span>
<span class="token macro property">#<span class="token directive keyword">define</span> RETARGET_ENABLED 1</span>
<span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre>
<p><img src="/images/printf_02.jpg" alt="printf_02"></p>
<p>第三步、<br>添加如下文件: <code>nRF5_SDK\nRF5_SDK_12.3.0_d7731ad\components\libraries\uart\app_uart_fifo.c</code>,<code>nRF5_SDK_12.3.0_d7731ad\components\libraries\fifo\app_fifo.c</code>,<code>nRF5_SDK_12.3.0_d7731ad\examples\ble_peripheral\experimental_ble_app_blinky\retarget.c</code>.<br><img src="/images/printf_01.jpg" alt="printf_01"><br>第四步、初始串口<br>代码如下</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">uart_error_handle</span><span class="token punctuation">(</span>app_uart_evt_t <span class="token operator">*</span> p_event<span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p_event<span class="token operator">-></span>evt_type <span class="token operator">==</span> APP_UART_COMMUNICATION_ERROR<span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">APP_ERROR_HANDLER</span><span class="token punctuation">(</span>p_event<span class="token operator">-></span>data<span class="token punctuation">.</span>error_communication<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p_event<span class="token operator">-></span>evt_type <span class="token operator">==</span> APP_UART_FIFO_ERROR<span class="token punctuation">)</span>
    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">APP_ERROR_HANDLER</span><span class="token punctuation">(</span>p_event<span class="token operator">-></span>data<span class="token punctuation">.</span>error_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">openPrintf</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span>
<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    ret_code_t err_code<span class="token punctuation">;</span>
    <span class="token macro property">#<span class="token directive keyword">define</span> UART_TX_BUF_SIZE 256                         </span><span class="token comment" spellcheck="true">/**&lt; UART TX buffer size. */</span>
    <span class="token macro property">#<span class="token directive keyword">define</span> UART_RX_BUF_SIZE 256                         </span><span class="token comment" spellcheck="true">/**&lt; UART RX buffer size. */</span>
    <span class="token keyword">const</span> app_uart_comm_params_t comm_params <span class="token operator">=</span>
      <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          RX_PIN_NUMBER<span class="token punctuation">,</span>
          TX_PIN_NUMBER<span class="token punctuation">,</span>
          RTS_PIN_NUMBER<span class="token punctuation">,</span>
          CTS_PIN_NUMBER<span class="token punctuation">,</span>
          APP_UART_FLOW_CONTROL_ENABLED<span class="token punctuation">,</span>
          false<span class="token punctuation">,</span>
          UART_BAUDRATE_BAUDRATE_Baud115200
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

    <span class="token function">APP_UART_FIFO_INIT</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>comm_params<span class="token punctuation">,</span>
                         UART_RX_BUF_SIZE<span class="token punctuation">,</span>
                         UART_TX_BUF_SIZE<span class="token punctuation">,</span>
                         uart_error_handle<span class="token punctuation">,</span>
                         APP_IRQ_PRIORITY_LOWEST<span class="token punctuation">,</span>
                         err_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">APP_ERROR_CHECK</span><span class="token punctuation">(</span>err_code<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<h2 id="1-9-VsCode插件-Keil-Assistant"><a href="#1-9-VsCode插件-Keil-Assistant" class="headerlink" title="1.9. VsCode插件-Keil Assistant"></a>1.9. VsCode插件-Keil Assistant</h2><p>  忍受不了Keil这个IDE的界面和风格，寻思一款在VsCode的解决方法，终于得知有一物，名曰: <kbd>Keil Assistant</kbd>,可以完美解决我的痛点。[^RUNOOB]</p>
<h3 id="1-9-1-Keil-Assistant-配置"><a href="#1-9-1-Keil-Assistant-配置" class="headerlink" title="1.9.1. Keil Assistant 配置"></a>1.9.1. Keil Assistant 配置</h3><p><strong>第一步、安装插件</strong><br><img src="/images/Keil%20Assistant%20.jpg" alt="Keil Assistant"><br><strong>第二部、配置插件</strong><br><strong>注意:</strong> 这个步骤只是配置<kbd>Keil</kbd>这个<code>IDE</code>能被插件识别到,工程具体的配置参数(如:芯片选型、IROM IRAM…)还需先用keil配置;<br><img src="/images/keil_config.jpg" alt="keill_config"><br><img src="/images/keil_config1.jpg" alt="keil_config1"><br><strong>第三步、编译下载</strong><br><img src="/images/build.jpg" alt="build"></p>
<h2 id="例程分析-experimental-ble-app-blinky"><a href="#例程分析-experimental-ble-app-blinky" class="headerlink" title="例程分析-experimental_ble_app_blinky"></a>例程分析-experimental_ble_app_blinky</h2><h2 id="2012-03-14"><a href="#2012-03-14" class="headerlink" title="2012-03-14"></a>2012-03-14</h2><h2 id="SDK介紹-nRF5-SDK-12-3-0-d7731ad"><a href="#SDK介紹-nRF5-SDK-12-3-0-d7731ad" class="headerlink" title="SDK介紹(nRF5_SDK_12.3.0_d7731ad)"></a>SDK介紹(nRF5_SDK_12.3.0_d7731ad)</h2><pre class=" language-sh"><code class="language-sh">nRF5_SDK_12.3.0_d7731ad
├── components                        # Nordic SDK 源码
│   ├── ant                           # ANT相关代码
│   ├── ble                           # BLE相关代码
│   ├── boards                        # 开发板代码
│   ├── device                        # SoC寄存器定义相关代码
│   ├── drivers_ext                   # Nordic开发,但是使用的第三方设备
│   ├── drivers_nrf                   # SoC开发的一些外设
│   ├── libraries                     # 库以及一些源码
│   ├── nfc                           # NFC相关
│   ├── proprietary_rf                # Nordic私有2.4G代码
│   ├── serialization                 # 串行接口相关代码
│   ├── softdevice                    # 本SDK支持的协议栈(hex文件)，以及API和说明文档
│   └── toolchain                     # 相关编译器对应的启动文件
├── documentation                     # SDK 发布说明和各种说明，包含API SDK 等说明
├── examples                          # 例程
│   ├── ant                           #
│   ├── ble_central                   #
│   ├── ble_central_and_peripheral    #
│   ├── ble_peripheral                # BLE从模式代码例程，包含两类，以ble_app_xxx:SDK稳定的例程；experimental_ble_app_xxx:一些新特性或者新例程，里面可能有bug或者步稳定，需要自己做稳定性测试；
│   ├── crypto                        # 加密算法应用例程
│   ├── dfu                           # boot loader 示例代码
│   ├── dtm                           # DTM(Direct Test Mode)测试设备相关代码
│   ├── multiprotocol                 # BLE,ANT,2.4G 同时工作例程
│   ├── nfc                           # NFC例程
│   ├── peripheral                    # 外设驱动例程
│   └── proprietary_rf                # 私有2.4G例程
├── external                          # 第三方库或者源码
│   ├── cifra_AES128-EAX              #
│   ├── fatfs                         #
│   ├── freertos                      #
│   ├── micro-ecc                     #
│   ├── nano-pb                       #
│   ├── nfc_adafruit_library          #
│   ├── nrf_cc310                     #
│   ├── protothreads                  #
│   ├── rtx                           #
│   ├── segger_rtt                    #
│   └── tiny-AES128                   #
└── svd                               #</code></pre>
<p>[^RUNOOB]: 菜鸟教程 – 学的不仅是技术，更是梦想！！！</p>
]]></content>
      <tags>
        <tag>ble</tag>
        <tag>nRF5</tag>
        <tag>Nordic</tag>
      </tags>
  </entry>
  <entry>
    <title>红外遥控器制作</title>
    <url>/2020/05/10/3418.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p> &emsp;&emsp;端午节期间，广州的天气真的好热，恨不得整体泡在空调房里。这让我想起了在公司上班的时候，天气炎热，想开空调，却发现空调遥控器好像偏偏跟我们玩捉迷藏似的，找也找不到，只能看着空调干巴巴地流汗。也常常碰见，公司的空调上班的时候都开着，然后最后一位同事走的时候，想关空调，此时遥控器也不翼而飞，于是各种问同事，大伙知道空调遥控器在哪吗？这种类似的“问候”等等。另外，公司空调比较多的时候，走的时候需要一个空调一个空调检测有没有关了，不然就会造成浪费的情况。总之对我来说，空调遥控器就是一个神奇的东西，你想找的时候，就偏偏找不到。<br><br>&emsp;&emsp;基于以上的种种情况，于是我萌发了要做一个方便管理的空调控制器，这个控制器有以下2个特点；</p>
<ol>
<li>必须让每个同事都能轻易的对每个空调进行控制(那就是用手机控制啦，大家都有手机~)；</li>
<li>必须满足远程关闭空调，因为如果当我们离开公司的时候，发现空调没关，可以远程关闭；</li>
</ol>
<a id="more"></a>

<h2 id="二、方案选择"><a href="#二、方案选择" class="headerlink" title="二、方案选择"></a>二、方案选择</h2><p>&emsp;&emsp;基于空调遥控器的特点，我想到了机智云的Gokit，搭配机智云的平台，能够满足我的需求，(主要是手头刚好有几个Gokit哈哈~)；<br><br>&emsp;&emsp;那么怎么来做呢？根据经验所得，需要对这个工作拆分为几部分</p>
<ol>
<li>机智云平台数据点定义(啥是数据点，请到机智云官网查看);这里我订了两个核心功能，一个是开关，一个是温度调节;(当然，你也可以定义更多的数据点，如，模式，风向等等)；</li>
<li>MCU开发，MCU开发需要细分为红外遥控器的协议解码和编码；<strong>解码</strong> 简单来说就是需要通过工具，来分析遥控器发出来的红外波形，什么波形对应着开，什么波形对应着光和温度设置。<strong>编码</strong> 就是要把我们下发的命令转换成和空调能识别的红外波形；</li>
</ol>
<h2 id="三、方案实施"><a href="#三、方案实施" class="headerlink" title="三、方案实施"></a>三、方案实施</h2><h3 id="1-数据点定义"><a href="#1-数据点定义" class="headerlink" title="1. 数据点定义"></a>1. 数据点定义</h3><p>&emsp;&emsp;很简单，两个数据点，温度设置和空调开关，如下图；</p>
<p><img src="/images/pasted-47.png" alt="upload successful"></p>
<h3 id="2-红外解码"><a href="#2-红外解码" class="headerlink" title="2. 红外解码"></a>2. 红外解码</h3><p>&emsp;&emsp; 对于红外解码，有两种方法，一种是找到空调厂商的红外协议，然后根据红外协议，直接编写就可以了，不过很不幸的是，我手头这款空调，我找了很久都没找到对应的空调协议，于是只能另辟途径。也就是第二种方法，红外波形拷贝。<br><br>&emsp;&emsp; 那么波形拷贝我采用的是，用逻辑分析仪对遥控器进行波形分析，然后使用红外波形拷贝的方法，把对应功能的波形拷贝下来。</p>
<p>&emsp;&emsp;决定了使用红外波形拷贝，那么就需要先要搭建波形捕捉电路，翻开了压箱底多年的红外探头接收器和面板(⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄)，步骤如下。</p>
<h4 id="2-1-硬件环境搭建"><a href="#2-1-硬件环境搭建" class="headerlink" title="2.1 硬件环境搭建"></a>2.1 硬件环境搭建</h4><h5 id="红外接收头型号-HS0038B"><a href="#红外接收头型号-HS0038B" class="headerlink" title="红外接收头型号 HS0038B"></a>红外接收头型号 <strong>HS0038B</strong></h5><p><img src="/images/pasted-33.png" alt="upload successful"></p>
<h5 id="HS0038B-电路图搭建"><a href="#HS0038B-电路图搭建" class="headerlink" title="HS0038B 电路图搭建"></a>HS0038B 电路图搭建</h5><ul>
<li>原理图<br><img src="/images/pasted-40.png" alt="upload successful"></li>
<li>面包板搭建实物图<br><img src="/images/pasted-41.png" alt="upload successful"><br><img src="/images/pasted-42.png" alt="upload successful"></li>
</ul>
<h5 id="抓波形"><a href="#抓波形" class="headerlink" title="抓波形"></a>抓波形</h5><ul>
<li>真实抓包红外码图<br><img src="/images/pasted-34.png" alt="upload successful"></li>
<li><ul>
<li>关<br><img src="/images/pasted-35.png" alt="upload successful"></li>
</ul>
</li>
<li><ul>
<li>开<br><img src="/images/pasted-36.png" alt="upload successful"></li>
</ul>
</li>
<li><ul>
<li>20度<br><img src="/images/pasted-37.png" alt="upload successful"></li>
</ul>
</li>
<li><ul>
<li>21度<br><img src="/images/pasted-38.png" alt="upload successful"></li>
</ul>
</li>
<li><ul>
<li>22度<br><img src="/images/pasted-39.png" alt="upload successful"></li>
</ul>
</li>
</ul>
<h5 id="红外解码程序编写"><a href="#红外解码程序编写" class="headerlink" title="红外解码程序编写"></a>红外解码程序编写</h5><p>&emsp;&emsp;对红外波形有一个大概的认识之后，就要编写MCU端的代码，把波形转成红外码。这里我的思路是，对STM32的某个IO，设置为输入下降沿捕捉，然后通过计算每一个高低电平的持续时间，进而把波形转成数组；具体的实现可以看代码,<strong>Talk is cheap, show me the code.（主要是懒(<em>/ω＼</em>)~）</strong></p>
<h3 id="3-红外编码"><a href="#3-红外编码" class="headerlink" title="3. 红外编码"></a>3. 红外编码</h3><p>&emsp;&emsp;进过前面的红外拷贝之后，我存储了，几个功能点的红外码，分别低开关，和温度设置(16度到27度)；<br>这里简单说一下，红外的发送原理(主要是网上已经有很多这方面的教程了)，首先上面抓到的红外波形，并不是红外发送器真正发送的波形，红外发送的波形一般是要发送的命令“加”在一个38K 的一个波形上；因为接收端有一个波形过滤器，如果不是38K红外波形范围内会被过滤掉。所以一般会以38K的PWM作为一个红外载波；<br>&emsp;&emsp;那么发送的时候，我对STM32的PA5引脚做为输出PWM为38K的引脚，然后后根据机智云定义好的数据点，拿到对应的串口协议文档，进行命令提前，主要是APP控制和MCU状态上报，这两条协议，(<strong>当然还有进入WiFi配网和串口握手等，不过这些在MCU代码自动生成的时候已经帮我们实现好了</strong>)串口协议格式如下图</p>
<p><img src="/images/pasted-48.png" alt="upload successful"><br><img src="/images/pasted-49.png" alt="upload successful"><br>那么后面的就是根据协议编程了。</p>
<p>这里插播一条，我实现发送的时候，开始我想使用gokit上的红外来作为发送，不过后面发现发送的距离比较短，后面就自己焊接了红外发射头；<br>当时我对Gokit的改造如下，如果小伙伴要控制的距离不远的话，我想是可以的，具体我的改造如下:</p>
<p><strong>Gokit引脚修改</strong></p>
<p><img src="/images/pasted-43.png" alt="upload successful"><br><img src="/images/pasted-44.png" alt="upload successful"><br><img src="/images/pasted-45.png" alt="upload successful"><br><img src="/images/pasted-46.png" alt="upload successful"></p>
<p><strong>我最后真实的红外发送搭建如下</strong><br><img src="/images/pasted-50.png" alt="upload successful"><br><img src="/images/pasted-51.png" alt="upload successful"></p>
<h3 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h3><p>最后，我把手头几个Gokit 都接上了红外，这样就能开开心心开空调去啦~~~</p>
<p><img src="/images/pasted-54.png" alt="upload successful"><br><img src="/images/pasted-52.png" alt="upload successful"><br><img src="/images/pasted-53.png" alt="upload successful"><br><img src="/images/pasted-55.png" alt="upload successful"></p>
<h3 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h3><ul>
<li>视频: <a href="https://www.bilibili.com/video/BV1WK4y1s7DA/">https://www.bilibili.com/video/BV1WK4y1s7DA/</a></li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://blog.csdn.net/qq_39690917/article/details/86713809">https://blog.csdn.net/qq_39690917/article/details/86713809</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>ESP8266系列-如何搭建自己平台的编译器</title>
    <url>/2017/07/31/e7ff.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h3 id="为什么要搭建自己平台的编译器"><a href="#为什么要搭建自己平台的编译器" class="headerlink" title="为什么要搭建自己平台的编译器"></a>为什么要搭建自己平台的编译器</h3><p>在乐鑫的官网上已经有公布了编译好的编译器，:<a href="http://bbs.espressif.com/viewtopic.php?f=57&amp;t=2">http://bbs.espressif.com/viewtopic.php?f=57&amp;t=2</a><br>但是这里的编译器只是适合32位系统上的；<br><img src="http://static.zybuluo.com/AlexLin/vp3gfy4adgs6ipmc6gftuaj2/image.png" alt="image.png-39.4kB"><br>若你的系统是64位的，或者你在其他的平台上，那么就得自己编译生成对应平台的编译器了；<br>下面以64位Ubuntu系统为例子，演示如何编译自己平台的esp8266编译器;</p>
<a id="more"></a>

<h3 id="Ubuntu-基本信息"><a href="#Ubuntu-基本信息" class="headerlink" title="Ubuntu 基本信息"></a>Ubuntu 基本信息</h3><pre class=" language-sh"><code class="language-sh">alex@alex-virtual-machine:/$ uname -a
Linux alex-virtual-machine 3.16.0-30-generic #40~14.04.1-Ubuntu SMP Thu Jan 15 17:43:14 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
alex@alex-virtual-machine:/$ gcc -v
Using built-in specs.
COLLECT_GCC=gcc
COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/4.8/lto-wrapper
Target: x86_64-linux-gnu
Configured with: ../src/configure -v --with-pkgversion='Ubuntu 4.8.4-2ubuntu1~14.04.3' --with-bugurl=file:///usr/share/doc/gcc-4.8/README.Bugs --enable-languages=c,c++,java,go,d,fortran,objc,obj-c++ --prefix=/usr --program-suffix=-4.8 --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --with-gxx-include-dir=/usr/include/c++/4.8 --libdir=/usr/lib --enable-nls --with-sysroot=/ --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --enable-gnu-unique-object --disable-libmudflap --enable-plugin --with-system-zlib --disable-browser-plugin --enable-java-awt=gtk --enable-gtk-cairo --with-java-home=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64/jre --enable-java-home --with-jvm-root-dir=/usr/lib/jvm/java-1.5.0-gcj-4.8-amd64 --with-jvm-jar-dir=/usr/lib/jvm-exports/java-1.5.0-gcj-4.8-amd64 --with-arch-directory=amd64 --with-ecj-jar=/usr/share/java/eclipse-ecj.jar --enable-objc-gc --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --with-tune=generic --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu
Thread model: posix
gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04.3)</code></pre>
<h3 id="第一步，安装编译需要的软件包"><a href="#第一步，安装编译需要的软件包" class="headerlink" title="第一步，安装编译需要的软件包"></a>第一步，安装编译需要的软件包</h3><pre class=" language-sh"><code class="language-sh">sudo apt-get install git autoconf build-essential gperf bison flex texinfo libtool libncurses5-dev wget gawk libc6-dev-amd64 python-serial libexpat-dev</code></pre>
<h3 id="第二步，下载编译器源码"><a href="#第二步，下载编译器源码" class="headerlink" title="第二步，下载编译器源码"></a>第二步，下载编译器源码</h3><pre class=" language-sh"><code class="language-sh"># 创建源码目录
cd ~/
mkdir esptool/buildTool
cd esptool/buildTool
# 下载源码
git clone -b lx106 git://github.com/jcmvbkbc/crosstool-NG.git</code></pre>
<blockquote>
<p><strong>一定要注意下载的是 lx106 分支的代码，因为ESP8266内置Tensilical L106 32bit微处理器</strong></p>
</blockquote>
<h3 id="第三部，生成配置文件"><a href="#第三部，生成配置文件" class="headerlink" title="第三部，生成配置文件"></a>第三部，生成配置文件</h3><pre class=" language-sh"><code class="language-sh">cd crosstool-NG
#生成.configure
./bootstrap
#将检查依赖文件包，并通过--prefix配置安装路径为当前目录
#若有提示确实的依赖文件，解决方法：sudo apt-get install libtool
./configure --prefix=`pwd`
make
make install
./ct-ng xtensa-lx106-elf</code></pre>
<p>运行过程日志</p>
<pre class=" language-sh"><code class="language-sh">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./bootstrap
Running autoconf...
Done. You may now run:
    ./configure
alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./configure --prefix=`pwd`
checking build system type... x86_64-unknown-linux-gnu
checking host system type... x86_64-unknown-linux-gnu
checking for a BSD-compatible install... /usr/bin/install -c
checking for grep that handles long lines and -e... /bin/grep
checking for egrep... /bin/grep -E
checking for a sed that does not truncate output... /bin/sed
checking whether sed understands -r -i -e... yes
checking whether ln -s works... yes
checking for gcc... gcc
checking whether the C compiler works... yes
checking for C compiler default output file name... a.out
checking for suffix of executables...
checking whether we are cross compiling... no
checking for suffix of object files... o
checking whether we are using the GNU C compiler... yes
checking whether gcc accepts -g... yes
checking for gcc option to accept ISO C89... none needed
checking how to run the C preprocessor... gcc -E
checking for ranlib... ranlib
checking for gobjcopy... no
checking for objcopy... objcopy
checking for absolute path to objcopy... /usr/bin/objcopy
checking for gobjdump... no
checking for objdump... objdump
checking for absolute path to objdump... /usr/bin/objdump
checking for greadelf... no
checking for readelf... readelf
checking for absolute path to readelf... /usr/bin/readelf
checking for gperf... gperf
checking for absolute path to gperf... /usr/bin/gperf
checking for bison... bison
checking for flex... flex
checking for makeinfo... makeinfo
checking for cut... cut
checking for stat... stat
checking for readlink... readlink
checking for wget... wget
checking for tar... tar
checking for gzip... gzip
checking for bzip2... bzip2
checking for patch... /usr/bin/patch
checking for bash >= 3.1... /bin/bash
checking for GNU awk... /usr/bin/gawk
checking for GNU make >= 3.80... /usr/bin/make
checking whether /usr/bin/make sets $(MAKE)... yes
checking for make 3.81... yes
checking for GNU libtool >= 1.5.26... /usr/bin/libtool
checking for GNU libtool >= 1.5.26... /usr/bin/libtool
checking for GNU libtoolize >= 1.5.26... /usr/bin/libtoolize
checking for GNU automake >= 1.10... /usr/bin/automake
checking for xz... xz
checking for cvs... no
checking for svn... no
checking for inline... inline
checking for ANSI C header files... yes
checking for sys/types.h... yes
checking for sys/stat.h... yes
checking for stdlib.h... yes
checking for string.h... yes
checking for memory.h... yes
checking for strings.h... yes
checking for inttypes.h... yes
checking for stdint.h... yes
checking for unistd.h... yes
checking for stdlib.h... (cached) yes
checking for GNU libc compatible malloc... yes
checking for stdlib.h... (cached) yes
checking for GNU libc compatible realloc... yes
checking for size_t... yes
checking for working alloca.h... yes
checking for alloca... yes
checking libintl.h usability... yes
checking libintl.h presence... yes
checking for libintl.h... yes
checking whether gettext is declared... yes
checking ncurses/ncurses.h usability... no
checking ncurses/ncurses.h presence... no
checking for ncurses/ncurses.h... no
checking ncurses/curses.h usability... no
checking ncurses/curses.h presence... no
checking for ncurses/curses.h... no
checking ncursesw/curses.h usability... no
checking ncursesw/curses.h presence... no
checking for ncursesw/curses.h... no
checking ncurses.h usability... yes
checking ncurses.h presence... yes
checking for ncurses.h... yes
checking for library containing initscr... -lncurses
configure: creating ./config.status
config.status: creating Makefile
alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ make
  SED    'ct-ng'
  SED    'scripts/crosstool-NG.sh'
  SED    'scripts/saveSample.sh'
  SED    'scripts/showTuple.sh'
  GEN    'config/configure.in'
  GEN    'paths.mk'
  GEN    'paths.sh'
  SED    'docs/ct-ng.1'
  GZIP   'docs/ct-ng.1.gz'
alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ make install
  GEN    'config/configure.in'
  GEN    'paths.mk'
  GEN    'paths.sh'
  INST    'ct-ng'
  INSTDIR 'config/'
  INSTDIR 'contrib/'
  INSTDIR 'patches/'
  INSTDIR 'scripts/'
  INST    'steps.mk'
  INST    'paths'
  INSTDIR 'samples/'
  INST    'kconfig/'
  INST    'docs/*.txt'
  INST    'ct-ng.1.gz'

For auto-completion, do not forget to install 'ct-ng.comp' into
your bash completion directory (usually /etc/bash_completion.d)
alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./ct-ng xtensa-lx106-elf
  CONF  config/config.in
#
# configuration saved
#

***********************************************************

Initially reported by: Max Filippov <jcmvbkbc@gmail.com>
URL: http://www.esp8266.com/viewtopic.php?f=9&t=224

***********************************************************

WARNING! This sample may enable experimental features.
         Please be sure to review the configuration prior
         to building and using your toolchain!
Now, you have been warned!

***********************************************************

Now configured for "xtensa-lx106-elf"</code></pre>
<h3 id="第四步，修改crosstool-NG配置-amp-编译"><a href="#第四步，修改crosstool-NG配置-amp-编译" class="headerlink" title="第四步，修改crosstool_NG配置&amp;编译"></a>第四步，修改crosstool_NG配置&amp;编译</h3><ul>
<li>在crosstool-NG目录下执行./ct-ng menuconfig进行配置</li>
</ul>
<pre class=" language-sh"><code class="language-sh">./ct-ng menuconfig</code></pre>
<p><img src="http://static.zybuluo.com/AlexLin/ulwtccvkik8a6t1m8861g9kt/image.png" alt="image.png-87.3kB"></p>
<ul>
<li> 配置多线程编译<br>“Paths and misc options”-&gt;“Number of parallel jobs”</li>
</ul>
<p><img src="http://static.zybuluo.com/AlexLin/kayiaw7ks1gph5eebwfv6i2w/image.png" alt="image.png-128.4kB"></p>
<ul>
<li>保存编译中间步骤<br>“Paths and misc options”-&gt;“Debug crosstool-NG”-&gt;“Save intermediate steps”</li>
</ul>
<p><img src="http://static.zybuluo.com/AlexLin/6f1aygjx6rtuolnell8m8g1b/image.png" alt="image.png-141.1kB"></p>
<ul>
<li>编译交叉编译工具(<strong>这个过程比较久，我编译了33分钟，要耐心等待~~~</strong>)</li>
</ul>
<pre class=" language-sh"><code class="language-sh">./ct-ng build</code></pre>
<p>运行日志</p>
<pre class=" language-sh"><code class="language-sh">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$ ./ct-ng build
[INFO ]  Performing some trivial sanity checks
[INFO ]  Build started 20170730.163954
[INFO ]  Building environment variables
[INFO ]  =================================================================
[INFO ]  Retrieving needed toolchain components' tarballs
[INFO ]  Retrieving needed toolchain components' tarballs: done in 0.15s (at 00:17)
[INFO ]  =================================================================
[INFO ]  Extracting and patching toolchain components
[INFO ]  Extracting and patching toolchain components: done in 0.88s (at 00:18)
[INFO ]  Saving state to restart at step 'libc_check_config'...
[INFO ]  Saving state to restart at step 'companion_libs_for_build'...
[INFO ]  Saving state to restart at step 'binutils_for_build'...
[INFO ]  Saving state to restart at step 'companion_libs_for_host'...
[INFO ]  =================================================================
[INFO ]  Installing GMP for host
[INFO ]  Installing GMP for host: done in 139.49s (at 02:38)
[INFO ]  =================================================================
[INFO ]  Installing MPFR for host
[INFO ]  Installing MPFR for host: done in 51.10s (at 03:29)
[INFO ]  =================================================================
[INFO ]  Installing ISL for host
[INFO ]  Installing ISL for host: done in 109.78s (at 05:19)
[INFO ]  =================================================================
[INFO ]  Installing CLooG for host
[INFO ]  Installing CLooG for host: done in 19.59s (at 05:39)
[INFO ]  =================================================================
[INFO ]  Installing MPC for host
[INFO ]  Installing MPC for host: done in 21.96s (at 06:01)
[INFO ]  Saving state to restart at step 'binutils_for_host'...
[INFO ]  =================================================================
[INFO ]  Installing binutils for host
[INFO ]  Installing binutils for host: done in 209.94s (at 09:32)
[INFO ]  Saving state to restart at step 'cc_core_pass_1'...
[INFO ]  Saving state to restart at step 'kernel_headers'...
[INFO ]  Saving state to restart at step 'libc_start_files'...
[INFO ]  Saving state to restart at step 'cc_core_pass_2'...
[INFO ]  Saving state to restart at step 'libc'...
[INFO ]  Saving state to restart at step 'cc_for_build'...
[INFO ]  Saving state to restart at step 'cc_for_host'...
[INFO ]  =================================================================
[INFO ]  Installing final compiler
[INFO ]  Installing final compiler: done in 965.90s (at 26:12)
[INFO ]  Saving state to restart at step 'libelf_for_target'...
[INFO ]  Saving state to restart at step 'binutils_for_target'...
[INFO ]  Saving state to restart at step 'debug'...
[INFO ]  =================================================================
[INFO ]  Installing cross-gdb
[INFO ]  Installing cross-gdb: done in 336.23s (at 32:36)
[INFO ]  Saving state to restart at step 'test_suite'...
[INFO ]  Saving state to restart at step 'finish'...
[INFO ]  =================================================================
[INFO ]  Cleaning-up the toolchain's directory
[INFO ]    Stripping all toolchain executables
[INFO ]  Cleaning-up the toolchain's directory: done in 2.31s (at 33:07)
[INFO ]  Build completed at 20170730.171300
[INFO ]  (elapsed: 33:06.05)
[INFO ]  Finishing installation (may take a few seconds)...
[33:07] / alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG$</code></pre>
<p><strong>编译生成文件在根目录下的builds下，文件名为xtensa-lx106-elf</strong></p>
<pre class=" language-sh"><code class="language-sh">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls
xtensa-lx106-elf</code></pre>
<h3 id="第五步，添加esp8266-依赖头文件"><a href="#第五步，添加esp8266-依赖头文件" class="headerlink" title="第五步，添加esp8266 依赖头文件"></a>第五步，添加esp8266 依赖头文件</h3><pre class=" language-sh"><code class="language-sh">#编译ESP8266必须添加以下库文件，不然就会报找不到相应库（如： xtensa-lx106-elf/bin/../lib/gcc/xtensa-lx106-elf/4.8.2/../../../../xtensa-lx106-elf/bin/ld: cannot find -lhal）
wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a
wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a
wget https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz
## 设置可读可写可执行权限
sudo chmod -R u+x+r+w xtensa-lx106-elf/
sudo chmod 777 libc.a libhal.a
cp libc.a libhal.a xtensa-lx106-elf/xtensa-lx106-elf/sysroot/lib/
tar -xvf include.tgz
sudo chmod 777 include/*
sudo cp -rf include xtensa-lx106-elf/xtensa-lx106-elf/</code></pre>
<p>过程日志</p>
<pre class=" language-sh"><code class="language-sh">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a
--2017-07-30 17:19:01--  https://github.com/esp8266/esp8266-wiki/raw/master/libs/libc.a
Resolving github.com (github.com)... 192.30.255.113, 192.30.255.112
Connecting to github.com (github.com)|192.30.255.113|:443... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libc.a [following]
--2017-07-30 17:19:02--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libc.a
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 2754022 (2.6M) [application/octet-stream]
Saving to: ‘libc.a’

100%[=====================================================================================================>] 2,754,022   4.78KB/s   in 7m 38s

2017-07-30 17:26:41 (5.87 KB/s) - ‘libc.a’ saved [2754022/2754022]

alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a
--2017-07-30 17:27:29--  https://github.com/esp8266/esp8266-wiki/raw/master/libs/libhal.a
Resolving github.com (github.com)... 192.30.255.112, 192.30.255.113
Connecting to github.com (github.com)|192.30.255.112|:443... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libhal.a [following]
--2017-07-30 17:27:30--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/libs/libhal.a
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 347624 (339K) [application/octet-stream]
Saving to: ‘libhal.a’

100%[=====================================================================================================>] 347,624     15.1KB/s   in 24s

2017-07-30 17:27:57 (13.9 KB/s) - ‘libhal.a’ saved [347624/347624]

alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ wget https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz
--2017-07-30 17:28:07--  https://github.com/esp8266/esp8266-wiki/raw/master/include.tgz
Resolving github.com (github.com)... 192.30.255.112, 192.30.255.113
Connecting to github.com (github.com)|192.30.255.112|:443... connected.
HTTP request sent, awaiting response... 302 Found
Location: https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/include.tgz [following]
--2017-07-30 17:28:08--  https://raw.githubusercontent.com/esp8266/esp8266-wiki/master/include.tgz
Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.72.133
Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.72.133|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 979111 (956K) [application/octet-stream]
Saving to: ‘include.tgz’

100%[=====================================================================================================>] 979,111     75.2KB/s   in 10s

2017-07-30 17:28:19 (93.5 KB/s) - ‘include.tgz’ saved [979111/979111]
alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls
include.tgz  libc.a  libhal.a  xtensa-lx106-elf
alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo chmod -R u+x+r+w xtensa-lx106-elf/
alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ cp libc.a libhal.a xtensa-lx106-elf/xtensa-lx106-elf/sysroot/lib/
alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo chmod 777 include/*
alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ sudo cp -rf include xtensa-lx106-elf/xtensa-lx106-elf/</code></pre>
<h3 id="第六步，添加编译工具到环境变量"><a href="#第六步，添加编译工具到环境变量" class="headerlink" title="第六步，添加编译工具到环境变量"></a>第六步，添加编译工具到环境变量</h3><ul>
<li>把生成的编译器工具下的bin路径添加到环境变量中</li>
</ul>
<pre class=" language-sh"><code class="language-sh">alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ ls
include  include.tgz  libc.a  libhal.a  xtensa-lx106-elf
alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ echo "export PATH=~/esptool/buildTool/crosstool-NG/builds/xtensa-lx106-elf/bin:$PATH" >>~/.profile
alex@alex-virtual-machine:~/esptool/buildTool/crosstool-NG/builds$ source ~/.profile</code></pre>
<h3 id="编译验证"><a href="#编译验证" class="headerlink" title="编译验证"></a>编译验证</h3><p>成功~<br><img src="http://static.zybuluo.com/AlexLin/j8khwtatkzace5rfnt527r7l/image.png" alt="image.png-67.8kB"></p>
<h3 id="编译好编译工具"><a href="#编译好编译工具" class="headerlink" title="编译好编译工具"></a>编译好编译工具</h3><p>如果你不想走以上的流程，那么可以使用我编译好的，这个编译器可以在64位是Ubuntu1402上运行。</p>
<p>下载链接：<a href="http://pan.baidu.com/s/1jHLNQTo">http://pan.baidu.com/s/1jHLNQTo</a> 密码：s70o</p>
<p>下载完成之后，参考<strong>第六步</strong>，把工具添加到环境变量中去。</p>
<p><strong>hope you like it~<br>by AlexLin</strong></p>
]]></content>
      <categories>
        <category>esp8266</category>
      </categories>
      <tags>
        <tag>esp8266</tag>
        <tag>gcc</tag>
      </tags>
  </entry>
  <entry>
    <title>CC1101笔记</title>
    <url>/2017/03/26/dd22.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><hr>
<h1 id="产品描述"><a href="#产品描述" class="headerlink" title="产品描述"></a>产品描述</h1><h2 id="工作频段"><a href="#工作频段" class="headerlink" title="工作频段"></a>工作频段</h2><p><strong>CC1100: **400-464 MHz and 800-928MHz <br>**CC1101:</strong> 387-464 MHz and 779-928MHz</p>
<h2 id="芯片引脚"><a href="#芯片引脚" class="headerlink" title="芯片引脚"></a>芯片引脚</h2><p><img src="http://upload-images.jianshu.io/upload_images/1736256-bf9e764fcd560a78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="cc1101引脚"></p>
<a id="more"></a>
<h3 id="引脚说明"><a href="#引脚说明" class="headerlink" title="引脚说明"></a>引脚说明</h3><hr>
<table>
<thead>
<tr>
<th>引脚编号</th>
<th>引脚名</th>
<th>引脚类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>SCLK</td>
<td>数字输入</td>
<td>连续配置接口，时钟输入</td>
</tr>
<tr>
<td>2</td>
<td>SO(GD01)</td>
<td>数字输出</td>
<td>连续配置接口，数据输出当 CSn 为高时为可选的一般输出脚</td>
</tr>
<tr>
<td>3</td>
<td>GDO2</td>
<td>数字输出</td>
<td>一般用途的数字输出脚：<strong>1&gt;**测试信号；</strong>2&gt;**FIFO 状态信号;**3&gt;**时钟输出，从 XOSC 向下分割;**4&gt;**连续输入 TX 数据</td>
</tr>
<tr>
<td>4</td>
<td>DVDD</td>
<td>功率（数字）</td>
<td>数字 I/O 和数字中心电压调节器的 1.8V-3.6V 数字功率供给输出</td>
</tr>
<tr>
<td>5</td>
<td>DCOUPL</td>
<td>功率（数字）</td>
<td>对退耦的 1.6V-2.0V 数字功率供给输出;<strong>注意：这个引脚只对 CC2500 使用。不能用来对其他设备提供供给电压</strong></td>
</tr>
<tr>
<td>6</td>
<td>GDO0(ATEST)</td>
<td>数字 I/O</td>
<td>一般用途的数字输出脚：<strong>1&gt;</strong> 测试信号;**2&gt;**FIFO 状态信号;**3&gt;**时钟输出，从 XOSC 向下分割;**4&gt;**连续输入 TX 数据;**5&gt;**也用作原型/产品测试的模拟测试 I/O</td>
</tr>
<tr>
<td>7</td>
<td>CSn</td>
<td>数字输入</td>
<td>连续配置接口，芯片选择</td>
</tr>
<tr>
<td>8</td>
<td>XOSC_Q1</td>
<td>模拟 I/O</td>
<td>晶体振荡器脚 1，或外部时钟输入</td>
</tr>
<tr>
<td>9</td>
<td>AVDD</td>
<td>功率（模拟）</td>
<td>1.8V-3.6V 模拟功率供给连接</td>
</tr>
<tr>
<td>10</td>
<td>XOSC_Q2</td>
<td>模拟 I/O</td>
<td>晶体振荡器脚</td>
</tr>
<tr>
<td>11</td>
<td>AVDD</td>
<td>功率（模拟）</td>
<td>1.8V-3.6V 模拟功率供给连接</td>
</tr>
<tr>
<td>12</td>
<td>RF_P</td>
<td>RF I/O</td>
<td>接收模式下对 LNA 的正 RF 输入信号发送模式下对 LNA 的正 RF 输出信号</td>
</tr>
<tr>
<td>13</td>
<td>AVDD</td>
<td>RF I/O</td>
<td>接收模式下对 LNA 的负 RF 输入信号发送模式下对 LNA 的负 RF 输出信号</td>
</tr>
<tr>
<td>14</td>
<td>AVDD</td>
<td>功率（模拟）</td>
<td>1.8V-3.6V 模拟功率供给连接</td>
</tr>
<tr>
<td>15</td>
<td>AVDD</td>
<td>功率（模拟）</td>
<td>1.8V-3.6V 模拟功率供给连接</td>
</tr>
<tr>
<td>16</td>
<td>GND</td>
<td>地(模拟)</td>
<td>模拟接地</td>
</tr>
<tr>
<td>17</td>
<td>RBIAS</td>
<td>模拟 I/O</td>
<td>参考电流的外部偏阻器</td>
</tr>
<tr>
<td>18</td>
<td>DGUARD</td>
<td>功率（数字）</td>
<td>对数字噪声隔离的功率供给连接</td>
</tr>
<tr>
<td>19</td>
<td>GND</td>
<td>地（数字）</td>
<td>数字噪声隔离的接地</td>
</tr>
<tr>
<td>20</td>
<td>SI</td>
<td>数字输入</td>
<td>连续配置接口，数据输入</td>
</tr>
</tbody></table>
<h2 id="通讯方式以及配置方式—SPI"><a href="#通讯方式以及配置方式—SPI" class="headerlink" title="通讯方式以及配置方式—SPI"></a>通讯方式以及配置方式—SPI</h2><ul>
<li>CC1101通过4线SPI兼容接口（MOSI,MISO,SCLK和CSn）进行配置，<strong>CC1101作为从设备</strong>。<br>这个接口同时用作读写缓冲器数据。<br>SPI接口上所有的数据传送都是先传送 <strong>MSB</strong></li>
</ul>
<blockquote>
<p><strong>拓展知识:</strong><br><strong>MSB:**高位前导<br>**LSB:**低位前导。<br>**big endian（大端）</strong>是指低地址存放最高有效字节（MSB），<br><strong>little endian（小端）</strong>则是低地址存放最低有效字节（LSB）</p>
</blockquote>
<h3 id="SPI-读写注意事项"><a href="#SPI-读写注意事项" class="headerlink" title="SPI 读写注意事项"></a>SPI 读写注意事项</h3><ul>
<li>SPI接口上的所有传送都是以一个头字节（header byte）开始包含以下：</li>
<li>一个<strong>读写位(R/W)：</strong>在读操作中该位置1，在写操作中该位置0；</li>
<li>一个**(突发(burst access)访问位(B)**</li>
<li>**6位地址位(A5~A0)**。</li>
<li>在SPI总线上传输数据时，CSn脚必须保持低电平。如果在发送头字节或者读写寄存器时CSn拉高，传送将被取消</li>
<li>当 CSn 变低，在开始转换头字节之前，MCU必须等待，直到 MISO 脚变低。这表明电压调制器已经稳定，晶体正在运作中。除非芯片处在 SLEEP 或 XOFF 状态，MISO 脚在 CSn变低之后总会立即变低。</li>
</ul>
<h4 id="芯片状态字节"><a href="#芯片状态字节" class="headerlink" title="芯片状态字节"></a><strong>芯片状态字节</strong></h4><ul>
<li> 当头字节在 SPI 接口上被写入时，芯片状态字节在 MISO 脚上被 CC1100 写入。状态字节<br>包含关键状态信号，对 MCU 是有用的。**(7)位**是 CHIP_RDYn 信号。在 SCLK 的在第一个正边缘之前，这个信号必须变低。CHIP_RDYn 信号表明晶体正处于工作中，调节数字供给电压是稳定的。</li>
<li>状态字节中的**(6:4 )**位由状态值组成。这个值反映了芯片的状态。当使 XOSC 空闲并使数字中心的能量开启，所有其他模块处于功率降低状态。只有芯片处于此状态时，频率和信道配置才能被更新。当芯片处于接收模式时，RX状态是活动的。同样地，当芯片处于传输模式时，TX 状态是活动的。</li>
<li>状态字节中的后四位**(3:0)**包含FIFO_BYTES_AVAILABLE。为了进行读操作，这个区域包含可从 RX FIFO 读取的字节数。为了进行写操作，这个区域包含可写入 TX  FIFO的字当FIFO_BYTES_AVAILABLE=15，15 或者更多的字节是可用/自由的。<br><img src="http://upload-images.jianshu.io/upload_images/1736256-043836467cbc7d84.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="状态字节概要"></li>
</ul>
<h3 id="寄存器访问"><a href="#寄存器访问" class="headerlink" title="寄存器访问"></a>寄存器访问</h3><ul>
<li>**CC1101 配置寄存器地址: ** 0x00到0x2E</li>
<li>所有的配置寄存器均能读和写。读/写位控制寄存器是读或者写。当对寄存器写时，每当一个待写入的数据字节传输到 SI脚时，状态字节将被送至 SO 脚。</li>
<li>通过在地址头设置突发位，连续地址的寄存器能高效地被访问。这个地址在内部计数器内设置起始地址。每增加一个新的字节（每8 个时钟脉冲），计数器值增加 1。突发访问，不管是读访问还是写访问，必须通过设置CSn 为高来终止。</li>
<li>对 0x30-0x3D 间的地址来说，突发位用以在<strong>状态寄存器</strong>和<strong>命令选通</strong>间选择。状态寄存器只读。突发读取对状态寄存器是不可取的，故它们每次只能被读一个。</li>
</ul>
<p><strong>burst位置1：</strong>选择状态寄存器；<br><strong>burst置0：</strong>选择命令选通（command strobes）;</p>
<h3 id="命令选通-command-strobes"><a href="#命令选通-command-strobes" class="headerlink" title="命令选通(command strobes)"></a>命令选通(command strobes)</h3><ul>
<li> 命令选通可以看做是CC1101的一个单字节指令。<br>通过寻址一个命令选通寄存器，将启动内部序列。<br>这些命令用来<strong>禁止晶振</strong>，<strong>使能接收</strong>，<strong>使能无线唤醒</strong> 等；</li>
<li>命令选通寄存器的访问和一个寄存器的写操作一样，但没有数据被传输。就是说，只有 R/W 位（置为 0）突发访问（置为 0）和六个地址位（0x30 和 0x3D 之间）被写。一个命令滤波可能在任何其他 SPI 访问之后，而不需要将 CSn 拉至高电平。命令选通立即被执行，当 CSn 高时 SPWD 和 SXOFF 命令被执行是例外。</li>
</ul>
<h3 id="FIFO访问"><a href="#FIFO访问" class="headerlink" title="FIFO访问"></a>FIFO访问</h3><ul>
<li>64 字节 TX FIFO 和 64 字节 RX FIFO 通过0x3F 被访问。</li>
<li>读/写位为 0 时，TX FIFO被访问。</li>
<li>读/写位为 1 时，RX FIFO 被访问。</li>
<li>TX FIFO 是只写的，而 RX FIFO 是只读的。</li>
<li>突发位用来决定 FIFO 访问是单字节还是突发访问。</li>
<li>单字节访问方式期望地址的突发位为 0 的头字节和一个数据字节。在数据字节之后跟随一个新的头字节，因此，CSn 继续保持低。</li>
<li>突发访问方式允许一地址字节，然后是连续的数据字节，直到通过设置 CSn 为高来关断访问。<ul>
<li> 0x3F : 单字节访问 TX FIFO</li>
<li>0x7F : 突发访问 TX FIFO</li>
<li>0xBF : 单字节访问 RX FIFO</li>
<li>0XFF : 突发访问 RX FIFO</li>
</ul>
</li>
</ul>
<h3 id="PATABLE-访问"><a href="#PATABLE-访问" class="headerlink" title="PATABLE 访问"></a>PATABLE 访问</h3><ul>
<li><strong>0x3E</strong>地址用来访问 PATABLE。PATABLE用来选择 PA 能量控制设置。在接收此地址之后，SPI 等待至少 8 个字节。通过控制PATABLE，能实现可控的 PA 能量上升和下降，减少的带宽的 ASK 调制整型也如此。</li>
<li>PATABLE 是一个 8 字节表，定义了 PA 控制设 置 ， 为 8 个 PA 功 率 值 （ 由FRENDO.PA_POWER 的 3 个位的值所选择）的每一个所使用。这个表从最低位（0）到最高位（7）可读和写，一次一位。一个索引计数器用来控制对这个表的访问。每读出或写入表中的一个字节，计数器就加 1。当 CSn 为高时，计数值置为最小值。当达到最大值时，计数器由零重新开始计数。</li>
<li>对 PATABLE 的访问是单字节或者突发访问，由突发位决定。当使用突发访问时，索引计数器的值增加；达到7时重新从0开始。读/写位控制访问是写访问（R/W=0）或者读访问(R/W=1)。</li>
<li>如果一字节被写入 PATABLE，且这个值将要被读出，那么，为了设置索引计数器的值重为 0，CSn 必须在读访问之前置为高。注意，当 PATABLE 进入休眠状态时，所存储的内容会丢失，特别是第一个字节（索引<br>为 0）。</li>
</ul>
<h3 id="基本控制和状态脚"><a href="#基本控制和状态脚" class="headerlink" title="基本控制和状态脚"></a>基本控制和状态脚</h3><ul>
<li>CC1101有2个专用配置脚（GDO0和GDO2）和一个共用脚（GDO1）可以向控制软件输出有用的内部状态信息。这些脚可以用来向MCU产生中断。</li>
<li>GDO1和SPI的SO引脚共用。</li>
<li>GDO1/SO的默认设置时3态输出。通过选择任何编程选项，GDO1/SO将变为普通引脚。当CSn拉低，该引脚将始终作为普通的SO功能引脚。</li>
<li>在同步和异步串行模式，在发送模式下，GDO0引脚将作为串行TX数据输入引脚。</li>
<li>GDO0也可以用作片上模拟温度传感器。通过外部ADC测量GDO0脚的电压，可以计算出温度。温度传感器的详细说明见18页的Section 4.7。通过默认的PTEST寄存器设置（0x7F），如果频率合成器被允许温度传感器的的输出时可用的。（例如：MANCAL，FSTXON，RX和 TX状态）在IDLE状态向PTEST寄存器写入0xBF允许模拟温度传感器是必要的。离开IDLE状态之前，必须恢复PTEST寄存器为默认值（0x7F）。</li>
</ul>
<h3 id="数据包处理的硬件支持"><a href="#数据包处理的硬件支持" class="headerlink" title="数据包处理的硬件支持"></a>数据包处理的硬件支持</h3><h4 id="发送模式下"><a href="#发送模式下" class="headerlink" title="发送模式下"></a>发送模式下</h4><blockquote>
<p>数据包的处理者可以配置增加下面的元素到TX FIFO中的数据包存储</p>
</blockquote>
<p>- 一个可编程数量的前导字节；</p>
<ul>
<li> 两字节同步字，可复制为4字节同步字。只插入前导字节或者同步字节是不可能的；</li>
<li>一个覆盖数据区域的CRC校验计算。 <blockquote>
<p>推荐设置4字节前导和4字节同步字，除了500k波特率时推荐使用8字节前导。另外，在数据区域和附加的2字节CRC校验，以下可以被执行</p>
</blockquote>
</li>
<li>使用PN9序列Whitening数据。 </li>
<li>通过使用交叉和编码数据（卷积编码）前向纠错。</li>
</ul>
<h4 id="接收模式下"><a href="#接收模式下" class="headerlink" title="接收模式下"></a>接收模式下</h4><blockquote>
<p>数据包处理支持将是解构数据包，（如使能）以下可以被执行</p>
</blockquote>
<ul>
<li>前导检测</li>
<li>同步字检测</li>
<li>CRC计算和CRC检查</li>
<li> 一个字节地址检测</li>
<li>包长度检查（根据设置的最大长度检查长度字节）</li>
<li>反Whitening（如果使能）</li>
<li>反交叉和解码( 如果使能 )<br>另外，RSSI（接收信号强度指示）、LQI（链路质量指示）和CRC状态的两个状态字节可以附加在RX FIFO</li>
</ul>
<h3 id="数据包格式"><a href="#数据包格式" class="headerlink" title="数据包格式 "></a>数据包格式 </h3><p>数据包的格式可以配置为由以下部分组成： <br>- 前导 n 同步字 </p>
<ul>
<li>可选的长度字节 </li>
<li>可选的地址字节 </li>
<li>净荷 </li>
<li>可选的2字节CRC<br><img src="http://upload-images.jianshu.io/upload_images/1736256-d71997128378e0f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据格式"></li>
</ul>
<blockquote>
<p>前导形式是一个交互的0 /1 序 列（01010101…）前导的最小长度是可编程控制的。当启用 TX 时，调制器开始传送前导。当控制数目的前导字节被传送完毕，调制器开始发送同步词汇，然后传送来自 TX FIFO的可利用的数据。若 TX FIFO 为空，调制器将继续传送前导字节，直到第一个字节被写入 TX FIFO。调制器将随后传送同步词汇和数据字节;<br>前导字节的长度由MDMCFG1.NU_PREAMBLE 值控制。</p>
</blockquote>
<h3 id="数据包长度"><a href="#数据包长度" class="headerlink" title="数据包长度"></a>数据包长度</h3><ul>
<li>CC1101 支持恒定长度数据包协议和可变长度协议。</li>
<li><strong>可变</strong>或<strong>固定数据包</strong>长度模式能支持的长度可达 255 字节。</li>
<li><strong>大于255个字节</strong>的数据包，必须使用<strong>无限数据包长度模式</strong>；<blockquote>
<p>使用不同长度的配置来支持数据包格式。必须确保在发送前半个或任何字节的时候TX模式不被关闭</p>
</blockquote>
</li>
</ul>
<h4 id="固定数据包长度"><a href="#固定数据包长度" class="headerlink" title="固定数据包长度"></a>固定数据包长度</h4><ul>
<li>固定数据包长度模式通过设定PKTCTRL0.LENGTH_CONFIG=0来选择。</li>
<li>期望的数据包长度通过PKTLEN寄存器来设置，不包括长度字节和可选的CRC；</li>
</ul>
<h4 id="可变数据包长度"><a href="#可变数据包长度" class="headerlink" title="可变数据包长度"></a>可变数据包长度</h4><ul>
<li>可变数据包长度模式，PKTCTRL0.LENGTH_CONFIG=1，数据包长度由同步字后面的第一个字节配置。</li>
<li>数据包长度定义为有效载荷，不包括长度字节和可选的CRC。</li>
<li>PKTLEN用来配置允许接收的最大数据包长度。</li>
<li>任何接收的数据包长度大于PKTLEN的值都将被丢弃。</li>
</ul>
<h5 id="可变长数据包收发逻辑"><a href="#可变长数据包收发逻辑" class="headerlink" title="可变长数据包收发逻辑"></a>可变长数据包收发逻辑</h5><p>数据包长度寄存器PKTLEN，在接收和发送时可以重新编程。结合固定数据包长度模式(PKTCTRL0.LENGTH_CONFIG=0)，这使与变长数据包不同的长度配置成为可能。（在可变数据包长度模式下长度字节是同步字节后第一个字节）在接收开始，数据包长度设置为一个大的值。MCU读取足够多的字节来解析数据包中的长度区域。然后依照这个值对PKTLEN进行设置。当数据包处理器中的字节计数器等于PKTLEN寄存器的值时数据包结束。因此，MCU必须在内部计数器达到数据包长度之前确认正确的长度</p>
<h4 id="无限数据包长度模式-大于255个字节"><a href="#无限数据包长度模式-大于255个字节" class="headerlink" title="无限数据包长度模式(大于255个字节)"></a>无限数据包长度模式(大于255个字节)</h4><ul>
<li>PKTCTRL0.LENGTH_CONFIG=2，数据包长度将设置为无限长，发送和接收将持续到手动关闭。</li>
</ul>
<h5 id="无限数据包长度收发逻辑"><a href="#无限数据包长度收发逻辑" class="headerlink" title="无限数据包长度收发逻辑"></a>无限数据包长度收发逻辑</h5><ul>
<li>数据包自动控制寄存器PKTCTRL0，可以在TX和RX期间重新编程。这就使发送和接收数据包长度超过256字节并且仍然使用数据包处理器硬件支持成为可能。</li>
<li>在数据包开始时，必须激活无限数据包长度模式（PKTCTRL0.LENGTH_CONFIG=2）。</li>
<li>在发送端，PKTLEN寄存器设置为：mod(长度,256)。</li>
<li>在接收端，MCU读出足够长度的字节来解析出数据包长度并设置PKTLEN寄存器为:mod(长度,256)。</li>
<li>当数据包中还有少于256字节数据，MCU禁止数据包无限长度模式并且激活固定长度模式。</li>
<li>当内部字节计数器到PKTLEN时，发送和接收结束。</li>
<li>（无线进入的状态由TXOFF_MODE 或 RXOFF_MODE决定）自动CRC添加/校验也可以使用（通过设置PKTCTRL0.CRC_EN=1）。</li>
</ul>
<blockquote>
<p>例子:发送一个600字节的数据包时，MCU必须按照以下执行：</p>
</blockquote>
<ul>
<li>设置PKTCTRL0.LENGTH_CONFIG=2。 </li>
<li> 重新设置PKTLEN寄存器的值为:（600，256）=88. <strong>(600%256 = 88)</strong></li>
<li> 至少发送345字节（600-255），例如通过填充64字节 TX FIFO 6次（发送384字节）。 </li>
<li>设置PKTCTRL0.LENGTH_CONFIG=0。 </li>
<li>当数据包计数器达到88发送完成。一共600字节被发送。 <br><img src="http://upload-images.jianshu.io/upload_images/1736256-d519a90a009de7e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="600个字节发送"></li>
</ul>
<h3 id="接收模式下的数据包过滤"><a href="#接收模式下的数据包过滤" class="headerlink" title="接收模式下的数据包过滤"></a>接收模式下的数据包过滤</h3><p>CC1101支持三种不同类型的数据包过滤：</p>
<ul>
<li>地址过滤</li>
<li>最大长度过滤</li>
<li>CRC过滤</li>
</ul>
<h4 id="地址过滤"><a href="#地址过滤" class="headerlink" title="地址过滤"></a>地址过滤</h4><ul>
<li>设置PKTCTRL1.ADR_CHK为任意大于0的值使能数据包地址过滤。</li>
<li>数据包处理器启动后将比较数据包中的目标地址字节和在ADDR寄存器中设置的节点地址<br>或者当PKTCTRL1.ADR_CHK=10时的广播地址0x00<br>以及PKTCTRL1.ADR_CHK=11时的广播地址0x00和0xFF。<br>如果接收的地址匹配到一个正确地址，数据包被接收并写入到RX FIFO。<br>如果地址匹配失败，数据包将被丢弃，重新启动接收模式（不管MCSM1.RXOFF_MODE的设置）。 </li>
<li>如果当时用无限数据包长度模式和使能地址过滤时接收地址匹配到正确的地址，0xFF将被写入到RX FIFO，其次是地址字节和有效载荷。</li>
</ul>
<h4 id="最大长度过滤"><a href="#最大长度过滤" class="headerlink" title="最大长度过滤 "></a>最大长度过滤 </h4><p>在可变数据包模式，PKTCTRL0.LENGTH_CONFIG=1，PKTLEN.PACKET_LENGTH寄存器用来设置最大允许的数据包长度。如果接收的长度字节大于这个值，数据包将被丢弃，重新启动接收模式（不管MCSM1.RXOFF_MODE的设置）。</p>
<h4 id="CRC过滤"><a href="#CRC过滤" class="headerlink" title="CRC过滤"></a>CRC过滤</h4><ul>
<li>当CRC校验失败时过滤数据包，通过设置PKTCTRL1.CRC_AUTOFLUSH=1使能；</li>
<li>CRC自动清除功能将在CRC校验失败时清空所有RX FIFO；</li>
<li>在自动清空RX FIFO后，下一个状态依赖于MCSM1.RXOFF_MODE的设置；</li>
<li>当使用自动清除功能，在可变数据包长度模式下最大数据包长度为63字节，在定长数据包长度模式下是64字节；</li>
<li>注意当PKTCTRL1.APPEND_STATUS使能，最大允许数据包长度将减少2个字节，以确保在数据包的结尾附加的2字节的状态字节在RX FIFO中占用的空间；</li>
<li>当CRC校验错误以后全部RX FIFO被清空；</li>
<li>在接收正确的数据包前之前接收到的数据包必须从FIFO中读出。直到CRC校验正确MCU才从正确的数据包中读取数据；</li>
</ul>
<h3 id="发送模式下的数据包处理"><a href="#发送模式下的数据包处理" class="headerlink" title="发送模式下的数据包处理"></a>发送模式下的数据包处理</h3><ul>
<li>需要发送的有效载荷必须写入到TX FIFO；</li>
<li>如果使能可变数据包长度第一个字节必须写长度字节；</li>
<li>长度字节的值等于数据包的有效载荷（包含可选的地址字节）；</li>
<li>如果在接收端使能地址识别，写入到TX FIFO中的第二个字节必须是地址字节；</li>
<li>如果使能固定数据包长度，写入到TX FIFO中的第一个字节必须是地址字节（接收端使用地址识别）；</li>
<li>调制器将首先发送预置数量的前导字节；</li>
<li>如果TX FIFO中有可发送的数据，调制器将发送2字节（可选4字节）同步字，紧接着是TX FIFO中的有效载荷；</li>
<li>如果使能CRC，校验时计算TX FIFO中的所有数据，然后跟随有效数据发送2个附加字节；</li>
<li>如果在完整的数据包发送完成之前TX FIFO变为空的，无线将进入TXFIFO_UNDERFLOW状态。退出该状态的唯一方法是运行SFTX命令；</li>
<li>发送下溢后再向TX FIFO写入数据不能重启TX模式；</li>
<li>如果whitening(白化)被使能，同步字后面的所有字节将被whitened。这必须在FEC/Interleaver之前完成。Whitening通过设置PKTCTRL0.WHITE_DATA=1使能；</li>
<li>如果FEC/Interleaving(交错器)被使能，同步字后面的所有数据在调制之前将被interleaver 和 FEC编码加密。FEC通过设置MDMCFG1.FEC_EN=1使能；</li>
</ul>
<h3 id="接收模式下的数据包处理"><a href="#接收模式下的数据包处理" class="headerlink" title="接收模式下的数据包处理"></a>接收模式下的数据包处理</h3><ul>
<li>在接收模式，解调器和数据包处理器将寻找一个有效的前导和同步字。</li>
<li>当找到后，解调器将获得位和字节同步，并将接收第一个有效字节。 </li>
<li>如果使能FEC/Interleaver，FEC解码器将开始解码第一个有效字节。Interleaver将在数据被其他任何处理之前解密。 </li>
<li>如果使能whitening，在此基础上数据将被de-whitening(反白化)。 </li>
<li>当使能可变数据包长度模式时，第一个字节是长度字节。数据包处理器储存该值为数据包长度并且通过该长度字节指示接收的字节数量。</li>
<li>如果使用固定数据包长度模式，数据包处理器将接收预置数量的字节。 </li>
<li>接下来，数据包处理器可选的检测地址并且只有地址匹配才继续接收。</li>
<li>如果使能自动CRC校验，数据包处理器计算CRC并与CRC校验结果相匹配。 </li>
<li>在有效载荷的结尾，数据包处理器将可选的写入两个复交数据包状态字节，包括CRC状态、LQI和RSSI</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1736256-7786a7bdca8c6dee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="接收数据包状态字1"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1736256-116e004500c41ba0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="接收数据包状态字2"></p>
<h3 id="MCU数据包处理"><a href="#MCU数据包处理" class="headerlink" title="MCU数据包处理"></a>MCU数据包处理</h3><p>如果在固件中执行一个数据包导向的无线协议，MCU需要知道一个数据包什么时候收到/发送。<br>加之，超过64字节长度的数据包，当接收时需要读取RX FIFO和当发送时TX FIFO需要重新填充。<br>这就意味着MCU必须知道有多少个字节可以从RX FIFO中读取或者可以向TX FIFO中写入。<br>有两种方法可以获得必要的状态信息。</p>
<ul>
<li><p>中断驱动方法 <br>当同步字接收/发送完成或者完整的数据包接收/发送通过设置IOCFGx.GDOx_CFG=0x06，GDO脚可以用在RX和TX中产生一个中断。<br>此外，<br>IOCFGx.GDOx_CFG还有两个配置用来产生中断，源于有多少字节在RX FIFO或TX FIFO。<br>IOCFGx.GDOx_CFG=0x00和IOCFGx.GDOx_CFG=0x01为RX FIFO，<br>IOCFGx.GDOx_CFG=0x02和IOCFGx.GDOx_CFG=0x03为TX FIFO。</p>
</li>
<li><p>SPI轮询 <br>PKTSTATUS可以使用给定的速率查询以获得GDO0和GDO2当前值。<br>RXBYTES 和 TXBYTES可以使用给定的速率查询以获得RX FIFO或者TX FIFO中的字节数。<br>合二为一的，RX FIFO和TX FIFO中的字节数量可以从每次头字节、数据字节或命令选通在SPI总线上发送时MISO引脚返回的芯片状态字节读取。 </p>
<blockquote>
<p><strong>推荐使用中断驱动方法</strong>因为高速率SPI轮询将减小RX的灵敏度。<br>而且，在Section10.3和CC1101勘误表【4】中，当使用SPI轮询，单一读取PKTSTATUS、 RXBYTES和 TXBYTES有一个小的有限的错误的可能性。<br>当读取芯片状态字节有同样的问题。 </p>
</blockquote>
</li>
</ul>
<h3 id="RSSI"><a href="#RSSI" class="headerlink" title="RSSI"></a>RSSI</h3><ul>
<li><p>RSSI的值时在选择的通道中信号功率级别的估计。</p>
</li>
<li><p>这个值基于RX中当前增益的设置和信道中的标准信号等级。 </p>
</li>
<li><p>在RX模式，RSSI可以连续的从RSSI状态寄存器读取知道解调器检测到一个同步字（当同步字检测使能）。此时RSSI读取的值将被冻结知道芯片下一次进入RX状态。 </p>
<blockquote>
<p>注意：从无线进入RX模式到在RSSI寄存器检测到一个正确的RSSI值需要一定的时间。查看DN505[15]获得RSSI响应时间估算的详细信息。 <br>RSSI的值以dBm和1/2 dB给出。<br>RSSI更新速率，fRSSI 依赖于接收滤波带宽和AGCCTRL0.FILTER_LENGTH。</p>
</blockquote>
</li>
<li><p>如果使能PKTCTRL1.APPEND_STATUS，数据包最后的RSSI值自动添加到有效载荷后面的第一个附加字节。 </p>
</li>
<li><p>从RSSI状态寄存器读出的RSSI值时2个补足的数字。下面的程序可以将RSSI转换为完整的功率级别（RSSI_dBm）。 </p>
</li>
</ul>
<ol>
<li>读取RSSI状态寄存器 </li>
<li>将读到的数据从16进制数转换到二进制数（RSSI_dec） </li>
<li> 如果RSSI_dec≧128，RSSI_dBm =(RSSI_dec - 256)/2 – RSSI_offset 4）<br>4 )  如果RSSI_dec＜128，RSSI_dBm =RSSI_dec /2 – RSSI_offset</li>
</ol>
<h3 id="净信道评估（CCA）"><a href="#净信道评估（CCA）" class="headerlink" title="净信道评估（CCA）"></a>净信道评估（CCA）</h3><ul>
<li>CCA用来显示当前信道是空闲还是繁忙。</li>
<li>通过设定IOCFGx.GDOx_CFG=0x09，当前的CCA状态在任何一个GDO引脚都可以查看。 </li>
<li>MCSM1.CCA_MODE用来选择当确定CCA时使用的模式。 </li>
<li>当CC1101在RX状态时给出STX 或 SFSTXON命令选通，仅能在净信道条件完成才能进入TX或FSTXON状态。</li>
<li>此外，芯片将仍处于RX状态。如果信道接下来变为可用的，在一个新的命令选通通过SPI接口发送之前，无线不会进入TX或FSTXON状态。这个特性叫做<strong>TX-if-CCA</strong>。<br>可以编程设置4种CCA条件：<ul>
<li>始终（禁止CCA，总是进入TX）</li>
<li>如果RSSI低于门限值 </li>
<li> 除非正常接收一个数据包 </li>
<li> 以上两个（RSSI低于门限值和没有正常接收一个数据包）</li>
</ul>
</li>
</ul>
<h3 id="链路质量指示（LQI）"><a href="#链路质量指示（LQI）" class="headerlink" title="链路质量指示（LQI）"></a>链路质量指示（LQI）</h3><ul>
<li>信号链路质量指示是一个公制的接收信号的当前质量。</li>
<li>若 PKTCTRL1.APPEND_STATUS启用，则这个值自动附加在接收数据包的末端。</li>
<li>这个值也可从 LQI 状态寄存器上读取。<br>LQI 由跟随同步词汇的 64 个符号（头 8 个数据包字节）计算得来。LQI 最好用作连接<br>质量的一个相对的度量，因为这个值决定于调制格式。</li>
</ul>
<h3 id="上电启动序列"><a href="#上电启动序列" class="headerlink" title="上电启动序列"></a>上电启动序列</h3><ul>
<li>当电源给电，系统必须复位。</li>
<li>通过下面描述的2个序列中的一个来完成，即自动上电复位（POR）或者手动复位。</li>
<li>自动上电复位或手动复位之后，推荐转换GDO0引脚上输出的信号。</li>
<li>默认设置是以CLK_XOSC/192的频率输出一个时钟信号。</li>
<li>然而，为了在TX和RX中优化执行，必须<strong><strong>GD0/1/2 引脚配置</strong></strong>中的配置来配置GDO脚</li>
</ul>
<h4 id="自动POR"><a href="#自动POR" class="headerlink" title="自动POR"></a>自动POR</h4><p>CC1101内部包含上电复位电路。最小的需求见表15，完整的上电复位功能必须遵循。当CHIP_RDYn变低内部上电序列完成。在CSn拉低后在SO引脚上可以查看CHIP_RDYn。 <br>当CC1101复位完成，芯片将进入IDLE状态，晶振开始运行。如果芯片在上电之后有足够的时间让晶振稳定，在捕获CSn变低之后SO引脚将马上变低。如果在复位完成之前CSn被拉低，SO引脚将首先变高，指示晶振没有稳定，变低之前见下图。<br><img src="http://upload-images.jianshu.io/upload_images/1736256-1dc0e7c8463d0096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自动POR"></p>
<h4 id="手动复位"><a href="#手动复位" class="headerlink" title="手动复位"></a>手动复位</h4><p>CC1101上的其它全部复位时使用SRES命令。通过执行这个命令，所有内部寄存器和状态恢复默认，IDLE状态。手动复位序列如下（图 手动复位）： </p>
<ul>
<li>设置SCLK=1，SI=0，避免引脚控制模式可能出现的问题。 </li>
<li> 选通CS低/高。 </li>
<li> 保持CS为低，然后拉高，至少40us才可以拉低 </li>
<li>将CSn拉低等到SO拉低（CHIP_RDYn）。</li>
<li>在SI线上发布SRES选通。 </li>
<li>当SO再一次拉低，复位完成，芯片进入IDLE状态<br><img src="http://upload-images.jianshu.io/upload_images/1736256-e692bc860255aa22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手动复位"><blockquote>
<p>注意：以上复位程序只需要在电源给电之后。如果用户在这之后想要复位CC1101，只需要执行SRES命令选通</p>
</blockquote>
</li>
</ul>
<h3 id="常规用途-测试输出控制引脚"><a href="#常规用途-测试输出控制引脚" class="headerlink" title="常规用途/ 测试输出控制引脚"></a>常规用途/ 测试输出控制引脚</h3><p>3 个数字输出引脚 GDO0 和 GDO1 和 GDO2为常规控制脚。它们的功能分别由</p>
<ul>
<li><strong>IOCFG0.GDO0_CFG</strong></li>
<li><strong>IOCFG1.GDO1_CFG</strong></li>
<li><strong>IOCFG2.GDO3_CFG</strong><br>控制;</li>
<li>GDO1 和在 SPI 接口上的SO 脚是同一脚，因此这个脚上控制的输出在 CSn 高时才有效。</li>
<li>GDO1 的默认值为 3状态，当 SPI 接口和其它设备一起使用时这是有效的。</li>
<li>GOO0 的默认值为125kHz-146kHz时钟输出（XOSC 频率除以 192）。当 XOSC 在重启<br>功率下开启后，使用一个晶体，它就能用来为系统中的 MCU 计时。当 MCU 工作时，通过 IOCFG0.GDO0_CFG，它能改变时钟频率。不会造成时钟波形干扰。</li>
<li>对 IOCFG0.GDO0_CFG 寄存器写入值 128（0x80h），芯片内模拟温度传感器启用。然后，GDO0 上的电压与温度成比例</li>
<li>如果IOCFGx.GDOx_CFG的设置小于0x20并且IOCFGx_GDOx_INV为0（1），在SLEEP模式GDO0和GDO2将由硬件置0（1），GDO1将有硬件置1（0）。这些信号将由硬件保持知道CHIP_RDYn变低。 </li>
<li>如果IOCFGx.GDOx_CFG设置为0x20或更高，GDO引脚在SLEEP状态也工作在设置的状态。例如，如果IOCFG1.GDO1_CFG=0x2E，GDO1在所有状态都是高阻抗。</li>
</ul>
<hr>
<table>
<thead>
<tr>
<th>GDO0_CFG[5:0] GDO1_CFG[5:0] GDO2_CFG[5:0]</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>0(0x00)</td>
<td>与 RX FIFO 关联：当 RX FIFO 在 RXFIFO_THR 上被填充时声明。当 RX FIFO 在RXFIFO THR 之下时被反声明</td>
</tr>
<tr>
<td>1(0x01)</td>
<td>与 RX FIFO 关联：当 RX FIFO 在 RXFIFO_THR 上被填充或到达数据包末端时声明。当RX FIFO 空时被反声明</td>
</tr>
<tr>
<td>2(0x02)</td>
<td>与 TX FIFO 关联：当 TX FIFO 在 TXFIFO_THR 上被填充时声明。当 TX FIFO 在TXFIFO THR 之下时被反声明</td>
</tr>
<tr>
<td>3(0x03)</td>
<td>与 TX FIFO 关联：当 TX FIFO 满时声明。当 TX FIFO 在 TXFIFO_THR 之下为空时被反声明</td>
</tr>
<tr>
<td>4(0x04)</td>
<td>当 RX FIFO 已溢出时声明。当 FIFO 被淹没时被反声明</td>
</tr>
<tr>
<td>5(0x05)</td>
<td>当 TX FIFO 已下溢时声明。当 FIFO 被淹没时被反声明</td>
</tr>
<tr>
<td>6(0x06)</td>
<td>当同步词汇被送出/收到时声明，在数据包末端时反声明。对 RX，当可选地址检测失败或 RX FIFO 溢出时，引脚被反声明。若 TX FIFO 下溢，这个引脚将同样被反声明</td>
</tr>
<tr>
<td>7(0x07)</td>
<td>当一个数据包被 OK CRC 收到时声明。当第一个字节从 RX FIFO 中读取时反声明</td>
</tr>
<tr>
<td>8(0x08)</td>
<td>前导质量达到。当 PQI 高于控制 PQT 值时声明</td>
</tr>
<tr>
<td>9(0x09)</td>
<td>清理信道评估。当 RSSI 等级低于门限时为高（决定于当前 CCA MODE 设置）</td>
</tr>
<tr>
<td>10(0x0A)</td>
<td>锁定检测器输出</td>
</tr>
<tr>
<td>11(0x0B)</td>
<td>连续时钟。与同步连续模式下的数据同步。数据在下降沿建立，在 SERIAL CLK 上升沿被读取。</td>
</tr>
<tr>
<td>12(0x0C)</td>
<td>连续同步数据输出。同步连续模式时使用。在 SERIAL_CLK 上升沿 MCU 必须读 DO。数据在下降沿由 CC2500 建立</td>
</tr>
<tr>
<td>13(0x0D)</td>
<td>连续透明数据输出。同步连续模式时使用。</td>
</tr>
<tr>
<td>14(0x0E)</td>
<td>载波感应。当 RSSI 等级低于门限时为高</td>
</tr>
<tr>
<td>15(0x0F)</td>
<td>CRC OK。上一个 CRC 对比匹配。当进入/重启 RX 模式时清理。</td>
</tr>
<tr>
<td>16(0x10)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>17(0x11)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>18(0x12)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>19(0x13)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>20(0x14)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>21(0x15)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>22(0x16)</td>
<td>RX_HARD_DATA[1]。能同RX_SYMBOL_TICK一起使用在交替连续RX输出上。</td>
</tr>
<tr>
<td>23(0x17)</td>
<td>RX_HARD_DATA[1]。能同RX_SYMBOL_TICK一起使用在交替连续RX输出上。</td>
</tr>
<tr>
<td>24(0x18)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>25(0x19)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>26(0x1A)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>27(0x1B)</td>
<td>1 时 PA PD.PA 开启，0 时功率降低。能用来控制外部 PA 或 RX/TX 开关</td>
</tr>
<tr>
<td>28(0x1C)</td>
<td>1 时 LNA PD.LNA 开启，0 时功率降低。能用来控制外部 LNA 或 RX/TX 开关</td>
</tr>
<tr>
<td>29(0x1D)</td>
<td>RX_SYMBOL_TICK。能同RX_HARD_DATA一起使用在交替连续RX输出上。</td>
</tr>
<tr>
<td>30(0x1E)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>31(0x1F)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>32(0x20)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>33(0x21)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>34(0x22)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>35(0x23)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>36(0x24)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>37(0x25)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>38(0x26)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>39(0x27)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>40(0x28)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>41(0x29)</td>
<td>CHIP RDY</td>
</tr>
<tr>
<td>42(0x2A)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>43(0x2B)</td>
<td>XOSC STABLE</td>
</tr>
<tr>
<td>44(0x2C)</td>
<td>保留－测试用</td>
</tr>
<tr>
<td>45(0x2D)</td>
<td>GDO0 Z EN N。当这个输出为 0 时，GDO0 配置为输入（为连续 TX 数据）</td>
</tr>
<tr>
<td>46(0x2E)</td>
<td>高阻抗（3-状态）</td>
</tr>
<tr>
<td>47(0x2F)</td>
<td>HW 到 0（HW1 同 INV 信号一起完成）</td>
</tr>
<tr>
<td>48(0x30)</td>
<td>CLK XOSC/1</td>
</tr>
<tr>
<td>49(0x31)</td>
<td>CLK XOSC/1.5</td>
</tr>
<tr>
<td>50(0x32)</td>
<td>CLK XOSC/2</td>
</tr>
<tr>
<td>51(0x33)</td>
<td>CLK XOSC/3</td>
</tr>
<tr>
<td>52(0x34)</td>
<td>CLK XOSC/4</td>
</tr>
<tr>
<td>53(0x35)</td>
<td>CLK XOSC/6</td>
</tr>
<tr>
<td>54(0x36)</td>
<td>CLK XOSC/8</td>
</tr>
<tr>
<td>55(0x37)</td>
<td>CLK XOSC/12</td>
</tr>
<tr>
<td>56(0x38)</td>
<td>CLK XOSC/16</td>
</tr>
<tr>
<td>57(0x39)</td>
<td>CLK XOSC/24</td>
</tr>
<tr>
<td>58(0x3A)</td>
<td>CLK XOSC/32</td>
</tr>
<tr>
<td>59(0x3B)</td>
<td>CLK XOSC/48</td>
</tr>
<tr>
<td>60(0x3C)</td>
<td>CLK XOSC/64</td>
</tr>
<tr>
<td>61(0x3D)</td>
<td>CLK XOSC/96</td>
</tr>
<tr>
<td>62(0x3E)</td>
<td>CLK XOSC/128</td>
</tr>
<tr>
<td>63(0x3F)</td>
<td>CLK XOSC/192</td>
</tr>
</tbody></table>
<h3 id="寄存器配置"><a href="#寄存器配置" class="headerlink" title="寄存器配置"></a>寄存器配置</h3><p>CC1101的配置通过编程8位寄存器来实现</p>
<h4 id="命令寄存器-12个"><a href="#命令寄存器-12个" class="headerlink" title="命令寄存器(12个)"></a>命令寄存器(12个)</h4><p>访问这些寄存器将会发起内部状态或模式的改变</p>
<hr>
<table>
<thead>
<tr>
<th>地址</th>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>0x30</td>
<td>SRES</td>
<td>复位芯片</td>
</tr>
<tr>
<td>0x31</td>
<td>SFSTXON</td>
<td>使能和校准频率合成器（如果MCSM0.FS_AUTOCAL=1）。如果在RX(使能CCA)，仅当合成器运行时转到等待状态（RX/TX快速转换）</td>
</tr>
<tr>
<td>0x32</td>
<td>SXOFF</td>
<td>关闭晶振</td>
</tr>
<tr>
<td>0x33</td>
<td>SCAL</td>
<td>校准频率合成器并关闭。SCAL可以从IDLE模式执行而不需要设置收到校准模式（MCSM0.FS_AUTOCAL=0）。</td>
</tr>
<tr>
<td>0x34</td>
<td>SRX</td>
<td>使能RX。如果来自IDLE状态并且MCSM0.FS_AUTOCAL=1首先执行校准。</td>
</tr>
<tr>
<td>0x35</td>
<td>STX</td>
<td>在IDLE状态：使能TX。如果MCSM0.FS_AUTOCAL=1首先执行校准。如果在RX状态并使能CCA仅在信道为空时转到TX。</td>
</tr>
<tr>
<td>0x36</td>
<td>SIDLE</td>
<td>离开RX/TX模式，关闭频率合成器，如果可用离开WOR。</td>
</tr>
<tr>
<td>0x38</td>
<td>SWOR</td>
<td>如果WORCTRL.RC_PD=0像Section19.5的描述一样开始自动RX轮询序列（WOR）。</td>
</tr>
<tr>
<td>0x39</td>
<td>SPWD</td>
<td>当CSn拉高进入掉电模式。</td>
</tr>
<tr>
<td>0x3A</td>
<td>SFRX</td>
<td>清除RX FIFO缓冲器。只在IDLE 或 RXFIFO_OVERFLOW状态运行SFRX。</td>
</tr>
<tr>
<td>0x3B</td>
<td>SFTX</td>
<td>清除TX FIFO缓冲器。只在IDLE 或 TXFIFO_UNDERFLOW状态运行SFTX。</td>
</tr>
<tr>
<td>0x3C</td>
<td>SWORRST</td>
<td>复位实时时钟到Event1值。</td>
</tr>
<tr>
<td>0x3D</td>
<td>SMOP</td>
<td>无操作，可以用来访问获取芯片状态字节。</td>
</tr>
</tbody></table>
<h4 id="配置寄存器"><a href="#配置寄存器" class="headerlink" title="配置寄存器"></a>配置寄存器</h4><hr>
<table>
<thead>
<tr>
<th>地址</th>
<th>寄存器</th>
<th>描述</th>
<th>保持在休眠状态中</th>
</tr>
</thead>
<tbody><tr>
<td>0x00</td>
<td>IOCFG2</td>
<td>GDO2输出引脚配置</td>
<td>是</td>
</tr>
<tr>
<td>0x01</td>
<td>IOCFG1</td>
<td>GDO1输出引脚配置</td>
<td>是</td>
</tr>
<tr>
<td>0x02</td>
<td>IOCFG0</td>
<td>GDO0输出引脚配置</td>
<td>是</td>
</tr>
<tr>
<td>0x03</td>
<td>FIFOTHR</td>
<td>RX FIFO和TX FIFO门限</td>
<td>是</td>
</tr>
<tr>
<td>0x04</td>
<td>SYNC1</td>
<td>同步字，高字节</td>
<td>是</td>
</tr>
<tr>
<td>0x05</td>
<td>SYNC0</td>
<td>同步字，低字节</td>
<td>是</td>
</tr>
<tr>
<td>0x06</td>
<td>PKTLEN</td>
<td>数据包长度</td>
<td>是</td>
</tr>
<tr>
<td>0x07</td>
<td>PKTCTRL1</td>
<td>数据包自动控制</td>
<td>是</td>
</tr>
<tr>
<td>0x08</td>
<td>PKTCTRL0</td>
<td>数据包自动控制</td>
<td>是</td>
</tr>
<tr>
<td>0x09</td>
<td>ADDR</td>
<td>设备地址</td>
<td>是</td>
</tr>
<tr>
<td>0x0A</td>
<td>CHANNR</td>
<td>信道号</td>
<td>是</td>
</tr>
<tr>
<td>0x0B</td>
<td>FSCTRL1</td>
<td>频率合成器控制</td>
<td>是</td>
</tr>
<tr>
<td>0x0C</td>
<td>FSCTRL0</td>
<td>频率合成器控制</td>
<td>是</td>
</tr>
<tr>
<td>0x0D</td>
<td>FREQ2</td>
<td>频率控制字，高字节</td>
<td>是</td>
</tr>
<tr>
<td>0x0E</td>
<td>FREQ1</td>
<td>频率控制字，中间字节</td>
<td>是</td>
</tr>
<tr>
<td>0x0F</td>
<td>FREQ0</td>
<td>频率控制字，低字节</td>
<td>是</td>
</tr>
<tr>
<td>0x10</td>
<td>MDMCFG4</td>
<td>Modem配置</td>
<td>是</td>
</tr>
<tr>
<td>0x11</td>
<td>MDMCFG3</td>
<td>Modem配置</td>
<td>是 、</td>
</tr>
<tr>
<td>0x12</td>
<td>MDMCFG2</td>
<td>Modem配置</td>
<td>是</td>
</tr>
<tr>
<td>0x13</td>
<td>MDMCFG1</td>
<td>Modem配置</td>
<td>是</td>
</tr>
<tr>
<td>0x14</td>
<td>MDMCFG0</td>
<td>Modem配置</td>
<td>是</td>
</tr>
<tr>
<td>0x15</td>
<td>DEVIATN</td>
<td>Modem背离设定</td>
<td>是</td>
</tr>
<tr>
<td>0x16</td>
<td>MCSM2</td>
<td>主无线控制状态机配置</td>
<td>是</td>
</tr>
<tr>
<td>0x17</td>
<td>MCSM1</td>
<td>主无线控制状态机配置</td>
<td>是</td>
</tr>
<tr>
<td>0x18</td>
<td>MCSM0</td>
<td>主无线控制状态机配置</td>
<td>是</td>
</tr>
<tr>
<td>0x19</td>
<td>FOCCFG</td>
<td>频率偏移补偿配置</td>
<td>是</td>
</tr>
<tr>
<td>0x1A</td>
<td>BSCFG</td>
<td>位同步配置</td>
<td>是</td>
</tr>
<tr>
<td>0x1B</td>
<td>AGCTRL2</td>
<td>AGC控制</td>
<td>是</td>
</tr>
<tr>
<td>0x1C</td>
<td>AGCTRL1</td>
<td>AGC控制</td>
<td>是</td>
</tr>
<tr>
<td>0x1D</td>
<td>AGCTRL0</td>
<td>AGC控制</td>
<td>是</td>
</tr>
<tr>
<td>0x1E</td>
<td>WOREVT1</td>
<td>事件0超时高字节</td>
<td>是</td>
</tr>
<tr>
<td>0x1F</td>
<td>WOREVT0</td>
<td>事件0超时低字节</td>
<td>是</td>
</tr>
<tr>
<td>0x20</td>
<td>WORCTRL</td>
<td>WOR控制</td>
<td>是</td>
</tr>
<tr>
<td>0x21</td>
<td>FREND1</td>
<td>前端RX配置</td>
<td>是</td>
</tr>
<tr>
<td>0x22</td>
<td>FREND0</td>
<td>前端TX配置</td>
<td>是</td>
</tr>
<tr>
<td>0x23</td>
<td>FSCAL3</td>
<td>频率合成器校准</td>
<td>是</td>
</tr>
<tr>
<td>0x24</td>
<td>SCAL2</td>
<td>频率合成器校准</td>
<td>是</td>
</tr>
<tr>
<td>0x25</td>
<td>SCAL1</td>
<td>频率合成器校准</td>
<td>是</td>
</tr>
<tr>
<td>0x26</td>
<td>SCAL0</td>
<td>频率合成器校准</td>
<td>是</td>
</tr>
<tr>
<td>0x27</td>
<td>RCCTRL1</td>
<td>RC振荡器配置</td>
<td>是</td>
</tr>
<tr>
<td>0x28</td>
<td>RCCTRL0</td>
<td>RC振荡器配置</td>
<td>是</td>
</tr>
<tr>
<td>0x29</td>
<td>FSTEST</td>
<td>频率合成器校准控制</td>
<td>否</td>
</tr>
<tr>
<td>0x2A</td>
<td>PTEST</td>
<td>产品测试</td>
<td>否</td>
</tr>
<tr>
<td>0x2B</td>
<td>AGCTEST</td>
<td>AGC测试</td>
<td>否</td>
</tr>
<tr>
<td>0x2C</td>
<td>TEST2</td>
<td>各方面测试设定</td>
<td>否</td>
</tr>
<tr>
<td>0x2D</td>
<td>TEST1</td>
<td>各方面测试设定</td>
<td>否</td>
</tr>
<tr>
<td>0x2E</td>
<td>TEST0</td>
<td>各方面测试设定</td>
<td>否</td>
</tr>
</tbody></table>
<h4 id="状态寄存器总览"><a href="#状态寄存器总览" class="headerlink" title="状态寄存器总览"></a>状态寄存器总览</h4><hr>
<table>
<thead>
<tr>
<th>地址</th>
<th>寄存器</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>0x30（0xF0）</td>
<td>PARTNUM</td>
<td>CC1101零件号</td>
</tr>
<tr>
<td>0x31（0xF1）</td>
<td>VERSION</td>
<td>当前版本号</td>
</tr>
<tr>
<td>0x32（0xF2）</td>
<td>FREQEST</td>
<td>频率偏移评估</td>
</tr>
<tr>
<td>0x33（0xF3）</td>
<td>LQI</td>
<td>解调器链路质量估计</td>
</tr>
<tr>
<td>0x34（0xF4）</td>
<td>RSSI</td>
<td>接收信号强度指示</td>
</tr>
<tr>
<td>0x35（0xF5）</td>
<td>MARCSTATE</td>
<td>控制状态机状态</td>
</tr>
<tr>
<td>0x36（0xF6）</td>
<td>WORTIME1</td>
<td>WOR定时器高字节</td>
</tr>
<tr>
<td>0x37（0xF7）</td>
<td>WORTIME0</td>
<td>WOR定时器低字节</td>
</tr>
<tr>
<td>0x38（0xF8）</td>
<td>PKTSTATUS</td>
<td>当前GDOx状态和数据包状态</td>
</tr>
<tr>
<td>0x39（0xF9）</td>
<td>VCO_VC_DAC</td>
<td>PLL校准模块的当前设置</td>
</tr>
<tr>
<td>0x3A（0xFA）</td>
<td>TXBYTES</td>
<td>下溢和TX FIFO中的字节数</td>
</tr>
<tr>
<td>0x3B（0xFB）</td>
<td>RXBYTES</td>
<td>上溢和RX FIFO中的字节数</td>
</tr>
<tr>
<td>0x3C（0xFC）</td>
<td>RCCTRL1_STATUS</td>
<td>上一次RC振荡器校准结果</td>
</tr>
<tr>
<td>0x3D（0xFD）</td>
<td>RCCTRL0_STATUS</td>
<td>上一次RC振荡器校准结果</td>
</tr>
<tr>
<td><img src="http://upload-images.jianshu.io/upload_images/1736256-32d8e78d15cce521.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="寄存器总图"></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>参考：<a href="https://wenku.baidu.com/view/c2b0081b227916888486d769.html">https://wenku.baidu.com/view/c2b0081b227916888486d769.html</a></p>
]]></content>
      <categories>
        <category>射频</category>
      </categories>
      <tags>
        <tag>433MHZ</tag>
        <tag>无线</tag>
        <tag>cc1101</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派之Zero-W-01</title>
    <url>/2018/09/02/b2a5.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="WiFi-相关"><a href="#WiFi-相关" class="headerlink" title="WiFi 相关"></a>WiFi 相关</h2><h3 id="iwlist-命令"><a href="#iwlist-命令" class="headerlink" title="iwlist 命令"></a>iwlist 命令</h3><hr>
<blockquote>
<p><strong>iwlist 命令：用于对/proc/net/wireless文件进行分析，得出无线网卡相关信息</strong></p>
</blockquote>
<h4 id="热点扫描"><a href="#热点扫描" class="headerlink" title="热点扫描"></a>热点扫描</h4><pre class=" language-shell"><code class="language-shell"> sudo iwlist wlan0 scan</code></pre>
<a id="more"></a>

<pre class=" language-shell"><code class="language-shell">pi@raspberrypi:~$ sudo iwlist --help
Usage: iwlist [interface] scanning [essid NNN] [last]
              [interface] frequency
              [interface] channel
              [interface] bitrate
              [interface] rate
              [interface] encryption
              [interface] keys
              [interface] power
              [interface] txpower
              [interface] retry
              [interface] ap
              [interface] accesspoints
              [interface] peers
              [interface] event
              [interface] auth
              [interface] wpakeys
              [interface] genie
              [interface] modulation</code></pre>
<p><strong>解说</strong></p>
<pre class=" language-shell"><code class="language-shell"># iwlist wlan0 scanning   搜索当前无线网络
# iwlist wlan0 frequency  显示频道信息
# iwlist wlan0 rate       显示连接速度
# iwlist wlan0 power      显示电源模式
# iwlist wlan0 txpower    显示功耗
# iwlist wlan0 retry      显示重试连接次数(网络不稳定查看)
# iwlist wlan0 ap         显示热点信息
# iwlist --help           显示帮助信息
# iwlist --version        显示版本信息</code></pre>
<h3 id="iwconfig-命令"><a href="#iwconfig-命令" class="headerlink" title="iwconfig 命令"></a>iwconfig 命令</h3><hr>
<blockquote>
<p>iwconfig 系统配置无线网络设备或显示无线网络设备信息。iwconfig 命令类似于ifconfig命令，但是他配置对象是无线网卡，它对网络设备进行无线操作，如设置无线通信频段</p>
</blockquote>
<pre><code>pi@raspberrypi:~$ iwconfig --help
Usage: iwconfig [interface]
                interface essid &#123;NNN|any|on|off&#125;
                interface mode &#123;managed|ad-hoc|master|...&#125;
                interface freq N.NNN[k|M|G]
                interface channel N
                interface bit &#123;N[k|M|G]|auto|fixed&#125;
                interface rate &#123;N[k|M|G]|auto|fixed&#125;
                interface enc &#123;NNNN-NNNN|off&#125;
                interface key &#123;NNNN-NNNN|off&#125;
                interface power &#123;period N|timeout N|saving N|off&#125;
                interface nickname NNN
                interface nwid &#123;NN|on|off&#125;
                interface ap &#123;N|off|auto&#125;
                interface txpower &#123;NmW|NdBm|off|auto&#125;
                interface sens N
                interface retry &#123;limit N|lifetime N&#125;
                interface rts &#123;N|auto|fixed|off&#125;
                interface frag &#123;N|auto|fixed|off&#125;
                interface modulation &#123;11g|11a|CCK|OFDMg|...&#125;
                interface commit
       Check man pages for more details.</code></pre>
<p><strong>解锁</strong></p>
<pre><code>auto        自动模式
essid       设置ESSID
nwid        设置网络ID
freq        设置无线网络通信频段
channel     设置无线网络通信频段
sens        设置无线网络设备的感知阀值
mode        设置无线网络设备的通信设备
ap          强迫无线网卡向给定地址的接入点注册
nick&lt;名字&gt;   为网卡设定别名
rate&lt;速率&gt;   设定无线网卡的速率
rts&lt;阀值&gt;    在传输数据包之前增加一次握手，确信信道在正常的
power       无线网卡的功率设置</code></pre>
<h3 id="iw-命令"><a href="#iw-命令" class="headerlink" title="iw 命令"></a>iw 命令</h3><hr>
<blockquote>
<p>iw 是一种新的基于 nl80211 的用于无线设备的CLI配置实用程序。它支持最近已添加到内核所有新的驱动程序。采用无线扩展接口的旧工具iwconfig已被废弃，强烈建议切换到 iw 和 nl80211。</p>
</blockquote>
<pre><code>pi@raspberrypi:~$ iw --help
Usage:  iw [options] command
Options:
        --debug         enable netlink debugging
        --version       show version (4.9)
Commands:
        help [command]
                Print usage for all or a specific command, e.g.
                &quot;help wowlan&quot; or &quot;help wowlan enable&quot;.

        event [-t|-r] [-f]
                Monitor events from the kernel.
                -t - print timestamp
                -r - print relative timstamp
                -f - print full frame for auth/assoc etc.

        features


        commands
                list all known commands and their decimal &amp; hex value

        phy
        list
                List all wireless devices and their capabilities.

        phy &lt;phyname&gt; info
                Show capabilities for the specified wireless device.

        phy &lt;phyname&gt; channels
                Show available channels.

        dev
                List all network interfaces for wireless hardware.

        dev &lt;devname&gt; info
                Show information for this interface.

        dev &lt;devname&gt; del
                Remove this virtual interface

        dev &lt;devname&gt; interface add &lt;name&gt; type &lt;type&gt; [mesh_id &lt;meshid&gt;] [4addr on|off] [flags &lt;flag&gt;*] [addr &lt;mac-addr&gt;]
        phy &lt;phyname&gt; interface add &lt;name&gt; type &lt;type&gt; [mesh_id &lt;meshid&gt;] [4addr on|off] [flags &lt;flag&gt;*] [addr &lt;mac-addr&gt;]
                Add a new virtual interface with the given configuration.
                Valid interface types are: managed, ibss, monitor, mesh, wds.

                The flags are only used for monitor interfaces, valid flags are:
                none:     no special flags
                fcsfail:  show frames with FCS errors
                control:  show control frames
                otherbss: show frames from other BSSes
                cook:     use cooked mode
                active:   use active mode (ACK incoming unicast packets)
                mumimo-groupid &lt;GROUP_ID&gt;: use MUMIMO according to a group id
                mumimo-follow-mac &lt;MAC_ADDRESS&gt;: use MUMIMO according to a MAC address

                The mesh_id is used only for mesh mode.

        dev &lt;devname&gt; ibss join &lt;SSID&gt; &lt;freq in MHz&gt; [NOHT|HT20|HT40+|HT40-|5MHz|10MHz|80MHz] [fixed-freq] [&lt;fixed bssid&gt;] [beacon-interval &lt;TU&gt;] [basic-rates &lt;rate in Mbps,rate2,...&gt;] [mcast-rate &lt;rate in Mbps&gt;] [key d:0:abcde]
                Join the IBSS cell with the given SSID, if it doesn&#39;t exist create
                it on the given frequency. When fixed frequency is requested, don&#39;t
                join/create a cell on a different frequency. When a fixed BSSID is
                requested use that BSSID and do not adopt another cell&#39;s BSSID even
                if it has higher TSF and the same SSID. If an IBSS is created, create
                it with the specified basic-rates, multicast-rate and beacon-interval.

        dev &lt;devname&gt; ibss leave
                Leave the current IBSS cell.

        dev &lt;devname&gt; station set &lt;MAC address&gt; plink_action &lt;open|block&gt;
                Set mesh peer link action for this station (peer).

        dev &lt;devname&gt; station set &lt;MAC address&gt; vlan &lt;ifindex&gt;
                Set an AP VLAN for this station.

        dev &lt;devname&gt; station set &lt;MAC address&gt; mesh_power_mode &lt;active|light|deep&gt;
                Set link-specific mesh power mode for this station

        dev &lt;devname&gt; station dump [-v]
                List all stations known, e.g. the AP on managed interfaces

        dev &lt;devname&gt; station del &lt;MAC address&gt; [subtype &lt;subtype&gt;] [reason-code &lt;code&gt;]
                Remove the given station entry (use with caution!)
                Example subtype values: 0xA (disassociation), 0xC (deauthentication)

        dev &lt;devname&gt; station get &lt;MAC address&gt;
                Get information for a specific station.

        dev &lt;devname&gt; survey dump
                List all gathered channel survey data

        dev &lt;devname&gt; ocb leave
                Leave the OCB mode network.

        dev &lt;devname&gt; ocb join &lt;freq in MHz&gt; &lt;5MHz|10MHz&gt;
                Join the OCB mode network.

        dev &lt;devname&gt; mesh leave
                Leave a mesh.

        dev &lt;devname&gt; mesh join &lt;mesh ID&gt; [[freq &lt;freq in MHz&gt; &lt;NOHT|HT20|HT40+|HT40-|80MHz&gt;] [basic-rates &lt;rate in Mbps,rate2,...&gt;]], [mcast-rate &lt;rate in Mbps&gt;] [beacon-interval &lt;time in TUs&gt;] [dtim-period &lt;value&gt;] [vendor_sync on|off] [&lt;param&gt;=&lt;value&gt;]*
                Join a mesh with the given mesh ID with frequency, basic-rates,
                mcast-rate and mesh parameters. Basic-rates are applied only if
                frequency is provided.

        dev &lt;devname&gt; mpath dump
                List known mesh paths.

        dev &lt;devname&gt; mpath set &lt;destination MAC address&gt; next_hop &lt;next hop MAC address&gt;
                Set an existing mesh path&#39;s next hop.

        dev &lt;devname&gt; mpath new &lt;destination MAC address&gt; next_hop &lt;next hop MAC address&gt;
                Create a new mesh path (instead of relying on automatic discovery).

        dev &lt;devname&gt; mpath del &lt;MAC address&gt;
                Remove the mesh path to the given node.

        dev &lt;devname&gt; mpath get &lt;MAC address&gt;
                Get information on mesh path to the given node.

        dev &lt;devname&gt; mpp dump
                List known mesh proxy paths.

        dev &lt;devname&gt; mpp get &lt;MAC address&gt;
                Get information on mesh proxy path to the given node.

        dev &lt;devname&gt; scan [-u] [freq &lt;freq&gt;*] [ies &lt;hex as 00:11:..&gt;] [meshid &lt;meshid&gt;] [lowpri,flush,ap-force] [randomise[=&lt;addr&gt;/&lt;mask&gt;]] [ssid &lt;ssid&gt;*|passive]
                Scan on the given frequencies and probe for the given SSIDs
                (or wildcard if not given) unless passive scanning is requested.
                If -u is specified print unknown data in the scan results.
                Specified (vendor) IEs must be well-formed.

        dev &lt;devname&gt; scan sched_stop
                Stop an ongoing scheduled scan.

        dev &lt;devname&gt; scan sched_start [interval &lt;in_msecs&gt; | scan_plans [&lt;interval_secs:iterations&gt;*] &lt;interval_secs&gt;] [delay &lt;in_secs&gt;] [freqs &lt;freq&gt;+] [matches [ssid &lt;ssid&gt;]+]] [active [ssid &lt;ssid&gt;]+|passive] [randomise[=&lt;addr&gt;/&lt;mask&gt;]]
                Start a scheduled scan at the specified interval on the given frequencies
                with probing for the given SSIDs (or wildcard if not given) unless passive
                scanning is requested.  If matches are specified, only matching results
                will be returned.

        dev &lt;devname&gt; scan abort
                Abort ongoing scan

        dev &lt;devname&gt; scan trigger [freq &lt;freq&gt;*] [ies &lt;hex as 00:11:..&gt;] [meshid &lt;meshid&gt;] [lowpri,flush,ap-force] [randomise[=&lt;addr&gt;/&lt;mask&gt;]] [ssid &lt;ssid&gt;*|passive]
                Trigger a scan on the given frequencies with probing for the given
                SSIDs (or wildcard if not given) unless passive scanning is requested.

        dev &lt;devname&gt; scan dump [-u]
                Dump the current scan results. If -u is specified, print unknown
                data in scan results.

        phy &lt;phyname&gt; reg get
                Print out the devices&#39; current regulatory domain information.

        reg get
                Print out the kernel&#39;s current regulatory domain information.

        reg set &lt;ISO/IEC 3166-1 alpha2&gt;
                Notify the kernel about the current regulatory domain.

        dev &lt;devname&gt; auth &lt;SSID&gt; &lt;bssid&gt; &lt;type:open|shared&gt; &lt;freq in MHz&gt; [key 0:abcde d:1:6162636465]
                Authenticate with the given network.


        dev &lt;devname&gt; connect [-w] &lt;SSID&gt; [&lt;freq in MHz&gt;] [&lt;bssid&gt;] [key 0:abcde d:1:6162636465]
                Join the network with the given SSID (and frequency, BSSID).
                With -w, wait for the connect to finish or fail.

        dev &lt;devname&gt; disconnect
                Disconnect from the current network.

        dev &lt;devname&gt; link
                Print information about the current link, if any.

        dev &lt;devname&gt; offchannel &lt;freq&gt; &lt;duration&gt;
                Leave operating channel and go to the given channel for a while.

        dev &lt;devname&gt; cqm rssi &lt;threshold|off&gt; [&lt;hysteresis&gt;]
                Set connection quality monitor RSSI threshold.


        phy &lt;phyname&gt; wowlan show
                Show WoWLAN status.

        phy &lt;phyname&gt; wowlan disable
                Disable WoWLAN.

        phy &lt;phyname&gt; wowlan enable [any] [disconnect] [magic-packet] [gtk-rekey-failure] [eap-identity-request] [4way-handshake] [rfkill-release] [net-detect [interval &lt;in_msecs&gt; | scan_plans [&lt;interval_secs:iterations&gt;*] &lt;interval_secs&gt;] [delay &lt;in_secs&gt;] [freqs &lt;freq&gt;+] [matches [ssid &lt;ssid&gt;]+]] [active [ssid &lt;ssid&gt;]+|passive] [randomise[=&lt;addr&gt;/&lt;mask&gt;]]] [tcp &lt;config-file&gt;] [patterns [offset1+]&lt;pattern1&gt; ...]
                Enable WoWLAN with the given triggers.
                Each pattern is given as a bytestring with &#39;-&#39; in places where any byte
                may be present, e.g. 00:11:22:-:44 will match 00:11:22:33:44 and
                00:11:22:33:ff:44 etc.
                Offset and pattern should be separated by &#39;+&#39;, e.g. 18+43:34:00:12 will match &#39;43:34:00:12&#39; after 18 bytes of offset in Rx packet.

                The TCP configuration file contains:
                  source=ip[:port]
                  dest=ip:port@mac
                  data=&lt;hex data packet&gt;
                  data.interval=seconds
                  [wake=&lt;hex packet with masked out bytes indicated by &#39;-&#39;&gt;]
                  [data.seq=len,offset[,start]]
                  [data.tok=len,offset,&lt;token stream&gt;]

                Net-detect configuration example:
                 iw phy0 wowlan enable net-detect interval 5000 delay 30 freqs 2412 2422 matches ssid foo ssid bar

        phy &lt;phyname&gt; coalesce show
                Show coalesce status.

        phy &lt;phyname&gt; coalesce disable
                Disable coalesce.

        phy &lt;phyname&gt; coalesce enable &lt;config-file&gt;
                Enable coalesce with given configuration.
                The configuration file contains coalesce rules:
                  delay=&lt;delay&gt;
                  condition=&lt;condition&gt;
                  patterns=&lt;[offset1+]&lt;pattern1&gt;,&lt;[offset2+]&lt;pattern2&gt;,...&gt;
                  delay=&lt;delay&gt;
                  condition=&lt;condition&gt;
                  patterns=&lt;[offset1+]&lt;pattern1&gt;,&lt;[offset2+]&lt;pattern2&gt;,...&gt;
                  ...
                delay: maximum coalescing delay in msec.
                condition: 1/0 i.e. &#39;not match&#39;/&#39;match&#39; the patterns
                patterns: each pattern is given as a bytestring with &#39;-&#39; in
                places where any byte may be present, e.g. 00:11:22:-:44 will
                match 00:11:22:33:44 and 00:11:22:33:ff:44 etc. Offset and
                pattern should be separated by &#39;+&#39;, e.g. 18+43:34:00:12 will
                match &#39;43:34:00:12&#39; after 18 bytes of offset in Rx packet.


        dev &lt;devname&gt; roc start &lt;freq&gt; &lt;time in ms&gt;


        wdev &lt;idx&gt; p2p stop


        wdev &lt;idx&gt; p2p start


        dev &lt;devname&gt; vendor recvbin &lt;oui&gt; &lt;subcmd&gt; &lt;filename|-|hex data&gt;


        dev &lt;devname&gt; vendor recv &lt;oui&gt; &lt;subcmd&gt; &lt;filename|-|hex data&gt;


        dev &lt;devname&gt; vendor send &lt;oui&gt; &lt;subcmd&gt; &lt;filename|-|hex data&gt;


        phy &lt;phyname&gt; set antenna &lt;bitmap&gt; | all | &lt;tx bitmap&gt; &lt;rx bitmap&gt;
                Set a bitmap of allowed antennas to use for TX and RX.
                The driver may reject antenna configurations it cannot support.

        dev &lt;devname&gt; set txpower &lt;auto|fixed|limit&gt; [&lt;tx power in mBm&gt;]
                Specify transmit power level and setting type.

        phy &lt;phyname&gt; set txpower &lt;auto|fixed|limit&gt; [&lt;tx power in mBm&gt;]
                Specify transmit power level and setting type.

        phy &lt;phyname&gt; set distance &lt;auto|distance&gt;
                Enable ACK timeout estimation algorithm (dynack) or set appropriate
                coverage class for given link distance in meters.
                To disable dynack set valid value for coverage class.
                Valid values: 0 - 114750

        phy &lt;phyname&gt; set coverage &lt;coverage class&gt;
                Set coverage class (1 for every 3 usec of air propagation time).
                Valid values: 0 - 255.

        phy &lt;phyname&gt; set netns &#123; &lt;pid&gt; | name &lt;nsname&gt; &#125;
                Put this wireless device into a different network namespace:
                    &lt;pid&gt;    - change network namespace by process id
                    &lt;nsname&gt; - change network namespace by name from /run/netns
                               or by absolute path (man ip-netns)


        phy &lt;phyname&gt; set retry [short &lt;limit&gt;] [long &lt;limit&gt;]
                Set retry limit.

        phy &lt;phyname&gt; set rts &lt;rts threshold|off&gt;
                Set rts threshold.

        phy &lt;phyname&gt; set frag &lt;fragmentation threshold|off&gt;
                Set fragmentation threshold.

        dev &lt;devname&gt; set channel &lt;channel&gt; [HT20|HT40+|HT40-]
        phy &lt;phyname&gt; set channel &lt;channel&gt; [HT20|HT40+|HT40-]
        dev &lt;devname&gt; set freq &lt;freq&gt; [HT20|HT40+|HT40-]
        dev &lt;devname&gt; set freq &lt;control freq&gt; [20|40|80|80+80|160] [&lt;center freq 1&gt;] [&lt;center freq 2&gt;]
        phy &lt;phyname&gt; set freq &lt;freq&gt; [HT20|HT40+|HT40-]
                Set frequency/channel the hardware is using, including HT
                configuration.

        phy &lt;phyname&gt; set name &lt;new name&gt;
                Rename this wireless device.

        dev &lt;devname&gt; set mcast_rate &lt;rate in Mbps&gt;
                Set the multicast bitrate.

        dev &lt;devname&gt; set peer &lt;MAC address&gt;
                Set interface WDS peer.

        dev &lt;devname&gt; set noack_map &lt;map&gt;
                Set the NoAck map for the TIDs. (0x0009 = BE, 0x0006 = BK, 0x0030 = VI, 0x00C0 = VO)

        dev &lt;devname&gt; set 4addr &lt;on|off&gt;
                Set interface 4addr (WDS) mode.

        dev &lt;devname&gt; set type &lt;type&gt;
                Set interface type/mode.
                Valid interface types are: managed, ibss, monitor, mesh, wds.

        dev &lt;devname&gt; set meshid &lt;meshid&gt;
        dev &lt;devname&gt; set monitor &lt;flag&gt;*
                Set monitor flags. Valid flags are:
                none:     no special flags
                fcsfail:  show frames with FCS errors
                control:  show control frames
                otherbss: show frames from other BSSes
                cook:     use cooked mode
                active:   use active mode (ACK incoming unicast packets)
                mumimo-groupid &lt;GROUP_ID&gt;: use MUMIMO according to a group id
                mumimo-follow-mac &lt;MAC_ADDRESS&gt;: use MUMIMO according to a MAC address

        dev &lt;devname&gt; set mesh_param &lt;param&gt;=&lt;value&gt; [&lt;param&gt;=&lt;value&gt;]*
                Set mesh parameter (run command without any to see available ones).

        dev &lt;devname&gt; set power_save &lt;on|off&gt;
                Set power save state to on or off.

        dev &lt;devname&gt; set bitrates [legacy-&lt;2.4|5&gt; &lt;legacy rate in Mbps&gt;*] [ht-mcs-&lt;2.4|5&gt; &lt;MCS index&gt;*] [vht-mcs-&lt;2.4|5&gt; &lt;NSS:MCSx,MCSy... | NSS:MCSx-MCSy&gt;*] [sgi-2.4|lgi-2.4] [sgi-5|lgi-5]
                Sets up the specified rate masks.
                Not passing any arguments would clear the existing mask (if any).

        dev &lt;devname&gt; get mesh_param [&lt;param&gt;]
                Retrieve mesh parameter (run command without any to see available ones).

        dev &lt;devname&gt; get power_save &lt;param&gt;
                Retrieve power save state.


Commands that use the netdev (&#39;dev&#39;) can also be given the
&#39;wdev&#39; instead to identify the device.

You can omit the &#39;phy&#39; or &#39;dev&#39; if the identification is unique,
e.g. &quot;iw wlan0 info&quot; or &quot;iw phy0 info&quot;. (Don&#39;t when scripting.)

Do NOT screenscrape this tool, we don&#39;t consider its output stable.</code></pre>
<p><strong>解说</strong></p>
<pre><code># iw list                 # 获得所有设备的功能，如带宽信息（2.4GHz，和5GHz），和802.11n的信息
# iw dev wlan0 scan       # 扫描
# iw event                # 监听事件
# iw dev wlan0 link       # 获得链路状态
# iw wlan0 connect foo    # 连接到已禁用加密的AP，这里它的SSID是foo
# iw wlan0 connect foo 2432  # 假设你有两个AP SSID 都是 foo ，你知道你要连接的是在 2432 频道
# iw wlan0 connect foo keys 0:abcde d:1:0011223344    # 连接到使用WEP的AP
# iw dev wlan1 station dump    # 获取station 的统计信息
# iw dev wlan1 station get     # 获得station对应的peer统计信息
# iw wlan0 set bitrates legacy-2.4 12 18 24    # 修改传输比特率
# iw dev wlan0 set bitrates mcs-5 4    # 修改tx HT MCS的比特率</code></pre>
<h3 id="WiFi-连接设置"><a href="#WiFi-连接设置" class="headerlink" title="WiFi 连接设置"></a>WiFi 连接设置</h3><hr>
<h4 id="方法一、-修改WiFi连接配置文件"><a href="#方法一、-修改WiFi连接配置文件" class="headerlink" title="方法一、 修改WiFi连接配置文件"></a>方法一、 修改WiFi连接配置文件</h4><ul>
<li><p>修改 /etc/network/interfaces 文件(这个文件是定义网络配置的)</p>
<pre><code>    sudo nano /etc/network/interfaces</code></pre>
<p>修改后文件内容如下：</p>
<pre class=" language-C"><code class="language-C">    auto lo
    iface lo inet loopback
    iface eth0 inet dhcp

    auto wlan0
    allow-hotplug wlan0
    iface wlan0 inet dhcp
    wpa-ssid "JoStudio"
    wpa-psk "password"</code></pre>
</li>
</ul>
<p><strong>说明:</strong><br>    <code>C     auto lo  //表示使用localhost     iface eth0 inet dhcp  //表示如果有网卡ech0, 则用dhcp获得IP地址 (这个网卡是本机的网卡，而不是WIFI网卡)     auto wlan0   //表示如果有wlan设备，使用wlan0设备名     allow-hotplug wlan0 //表示wlan设备可以热插拨     iface wlan0 inet dhcp //表示如果有WLAN网卡wlan0 (就是WIFI网卡), 则用dhcp获得IP地址     wpa-ssid &quot;JoStudio&quot;  //表示连接SSID名为 JoStudio的WIFI网络。  JoStudio是我的WIFI网SSID名称，如果是别的，请更改     wpa-psk &quot;password&quot; //表示连接WIFI网络时，使用wpa-psk认证方式，认证密码是password。如果是别的密码，请更改     </code></p>
<p>　　&gt;上述定义后，如果有网线连接，则采取DHCP自动连接。如果有名为JoStudio的WIFI网络，则自动连入，采取DHCP获得地址。</p>
<ul>
<li>立即连接WIFI网络</li>
</ul>
<p>　　使用命令<br>    <code>　　     sudo /etc/init.d/networking restart    </code><br>　　成功后，用 ifconfig 命令可以看到 wlan0 设备，且有了IP地址(已连接)</p>
<ul>
<li>以后每次启动，系统都将自动连接到名为JoStudio的WIFI网络</li>
</ul>
<h4 id="方法二、-wpa-cli命令"><a href="#方法二、-wpa-cli命令" class="headerlink" title="方法二、 wpa_cli命令"></a>方法二、 wpa_cli命令</h4><p>参考: <a href="http://shumeipai.nxez.com/2013/09/30/use-wpa-cli-command-line-to-configure-wi-fi-wireless-lan.html">http://shumeipai.nxez.com/2013/09/30/use-wpa-cli-command-line-to-configure-wi-fi-wireless-lan.html</a></p>
<blockquote>
<p>wpa_cli是命令行界面下的无线网连接工具。<br>通过wpa_cli管理备选的网络列表。在备选网络中启用的网络，树莓派会自动试图连接。</p>
</blockquote>
<ol>
<li><p>启动wpa_cli 命令界面</p>
<pre><code>    sudo wpa_cli</code></pre>
</li>
<li><p>常用命令</p>
</li>
</ol>
<hr>
<table>
<thead>
<tr>
<th align="left">命令</th>
<th align="left">命令缩写</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">status</td>
<td align="left">stat</td>
<td align="left">显示当前连接的状态信息</td>
</tr>
<tr>
<td align="left">ping</td>
<td align="left"></td>
<td align="left">测试指令，看service端是否有响应</td>
</tr>
<tr>
<td align="left">mib</td>
<td align="left"></td>
<td align="left">Request a list of MIB variables (dot1x, dot11).</td>
</tr>
<tr>
<td align="left">interface</td>
<td align="left"></td>
<td align="left">显示当前可用的interface，wpa_supplicant 支持多interface</td>
</tr>
<tr>
<td align="left">set</td>
<td align="left"></td>
<td align="left">设置环境变量，如果不带参数，显示当前环境变量</td>
</tr>
<tr>
<td align="left">logon</td>
<td align="left"></td>
<td align="left">IEEE 802.1X EAPOL state machine logon</td>
</tr>
<tr>
<td align="left">logoff</td>
<td align="left"></td>
<td align="left">IEEE 802.1X EAPOL state machine logff</td>
</tr>
<tr>
<td align="left">reassociate</td>
<td align="left">reas</td>
<td align="left">设置连接标签，开启扫描，查找可用的AP进行连接，如果当前是连接状态，只会扫描一次。</td>
</tr>
<tr>
<td align="left">preauthenticate</td>
<td align="left">pr</td>
<td align="left">针对一个AP进行预认证</td>
</tr>
<tr>
<td align="left">identity</td>
<td align="left">id</td>
<td align="left">设置identity</td>
</tr>
<tr>
<td align="left">password</td>
<td align="left"></td>
<td align="left">设置密码</td>
</tr>
<tr>
<td align="left">disconnect</td>
<td align="left">disc</td>
<td align="left">断开连接，并且会告知wpa_supplicant 不在连接其他AP</td>
</tr>
<tr>
<td align="left">reconnect</td>
<td align="left">reconn</td>
<td align="left">重新连接，在运行上面的过程后，运行此命令</td>
</tr>
<tr>
<td align="left">quit</td>
<td align="left">q</td>
<td align="left">exits wpa_cli</td>
</tr>
<tr>
<td align="left">terminate</td>
<td align="left">term</td>
<td align="left">kills wpa_supplicant</td>
</tr>
<tr>
<td align="left">reconfigure</td>
<td align="left">recon</td>
<td align="left">重新导入配置文件，可以在调试时，修改配置文件后运行此命令，使配置文件生效</td>
</tr>
<tr>
<td align="left">scan</td>
<td align="left">scan</td>
<td align="left">扫描</td>
</tr>
<tr>
<td align="left">scan_result</td>
<td align="left">scan_r</td>
<td align="left">显示扫描结果</td>
</tr>
<tr>
<td align="left">bss</td>
<td align="left"></td>
<td align="left">获取扫描结果 某一个热点的具体信息</td>
</tr>
<tr>
<td align="left">list_networks</td>
<td align="left">list_n</td>
<td align="left">已经保存配置文件中的AP</td>
</tr>
<tr>
<td align="left">bssid</td>
<td align="left"></td>
<td align="left">配置ssid的bssid</td>
</tr>
<tr>
<td align="left">add_network</td>
<td align="left">add_n</td>
<td align="left">添加一个AP配置，在framework还没调通之前，可以用此命令进行配置</td>
</tr>
<tr>
<td align="left">set_network</td>
<td align="left">set_n</td>
<td align="left">设置ap的属性，用set_network 不接参数，可以看到所有可用信息。</td>
</tr>
<tr>
<td align="left">select_network</td>
<td align="left">select_n</td>
<td align="left">选择一个已经配置的AP进行连接，这个命令用的比较多。上面set_n 命令进行配置后，可以用这命令进行连接</td>
</tr>
<tr>
<td align="left">enable_network</td>
<td align="left">enable_n</td>
<td align="left">将network 的标志位:disable 置0，该位为1时，wifi在断开连接状态，不会去主动连接该热点。如果wifi不主动连接任何热点，可以查看配置文件。</td>
</tr>
<tr>
<td align="left">disable_network</td>
<td align="left">disable_n</td>
<td align="left">对应上面 disable_network network_id</td>
</tr>
<tr>
<td align="left">remove_network</td>
<td align="left">remove_n</td>
<td align="left">忘记网络 remove_network id 会删除对应network配置</td>
</tr>
<tr>
<td align="left">get_network</td>
<td align="left">get_n</td>
<td align="left">获取network的属性 对应之前的set_network</td>
</tr>
<tr>
<td align="left">wps_pbc</td>
<td align="left"></td>
<td align="left">wps  push button功能</td>
</tr>
<tr>
<td align="left">wps_pin</td>
<td align="left"></td>
<td align="left">Wps pin 功能</td>
</tr>
<tr>
<td align="left">save_config</td>
<td align="left">save_c</td>
<td align="left">保存信息到配置文件中，每次修改配置后记得用</td>
</tr>
</tbody></table>
<ol start="3">
<li><p>Example wpa_cli</p>
<pre><code>for AP that doesn`t have encryption
&gt;add_network      (It will display a network id for you, assume it returns 0)
&gt;set_network 0 ssid “666”
&gt;set_network 0 key_mgmt NONE
&gt;enable_network 0
&gt;quit

if normal, we have connectted to the AP “666”, now you need a IP to access internet, for example:
dhcpcd wlan0
if everything is ok, it will get an IP &amp; can access internet

for AP that has WEP
&gt;add_network      (assume returns 1)
&gt;set_network 1 ssid “666”
&gt;set_network 1 key_mgmt NONE
&gt;set_network 1 wep_key0 “your ap passwork”(if usting ASCII, it need double quotation marks, if using hex, then don`t need the double quotation marks)
&gt;set_network 1 wep_tx_keyidx 0
&gt;select_network 1  (optional, remember, if you are connecting with another AP, you should select it to disable the another)
&gt;enable_network 1
and then ,get an IP to access internet

for AP that has WPA-PSK/WPA2-PSK
&gt;add_network      (assume returns 2)
&gt;set_network 2 ssid “666”
&gt;set_network 2 psk “your pre-shared key”
&gt;select_network 2  (optional, remember, if you are connecting with another AP, you should select it to disable the another)
&gt;enable_network 2
</code></pre>
</li>
<li><p>生效</p>
<pre><code>pi@raspberrypi:~$ sudo /etc/init.d/networking restart
pi@raspberrypi:~$ sudo service networking restart  #跟上面行的作用一样。
pi@raspberrypi:~$ sudo ifdown wlan0   #有时需要执行 或者 下一行命令才能发生作用。
pi@raspberrypi:~$ sudo ifup wlan0        #建议尝试本条命令
pi@raspberrypi:~$ wpa_cli status      #查看连接状态</code></pre>
</li>
</ol>
<h4 id="方法三、-新刷系统WiFi连接设置"><a href="#方法三、-新刷系统WiFi连接设置" class="headerlink" title="方法三、 新刷系统WiFi连接设置"></a>方法三、 新刷系统WiFi连接设置</h4><p>用户可以在未启动树莓派的状态下单独修改 <code>/boot/wpa_supplicant.conf</code> 文件配置 WiFi 的 SSID 和密码，这样树莓派启动后会自行读取 <code>wpa_supplicant.conf</code> 配置文件连接 WiFi 设备。</p>
<pre class=" language-shell"><code class="language-shell">country=CN
ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1

network=&#123;
ssid="AlexLam"
psk="123456"
key_mgmt=WPA-PSK
priority=3
&#125;

network=&#123;
ssid="CMCC-KHLK"
psk="123456"
key_mgmt=WPA-PSK
priority=2
&#125;

network=&#123;
ssid="360WiFi-AlexLin"
psk="123456"
key_mgmt=WPA-PSK
priority=1
&#125;</code></pre>
<h5 id="解说"><a href="#解说" class="headerlink" title="解说"></a>解说</h5><ul>
<li>ssid:网络的ssid</li>
<li>psk:密码</li>
<li>priority:连接优先级，数字越大优先级越高（不可以是负数）</li>
<li>scan_ssid:连接隐藏WiFi时需要指定该值为1</li>
</ul>
<p><strong>如果你的 WiFi 没有密码</strong><br></p>
<pre><code>network=&#123;
ssid=&quot;你的无线网络名称（ssid）
&quot;key_mgmt=NONE
&#125;</code></pre>
<p><strong>如果你的 WiFi 使用WEP加密</strong><br></p>
<pre><code>network=&#123;
ssid=&quot;你的无线网络名称（ssid）&quot;
key_mgmt=NONEwep_key0=&quot;你的wifi密码&quot;
&#125;</code></pre>
<p><strong>如果你的 WiFi 使用WPA/WPA2加密</strong><br></p>
<pre><code>network=&#123;
ssid=&quot;你的无线网络名称（ssid）&quot;
key_mgmt=WPA-PSKpsk=&quot;你的wifi密码&quot;
&#125;</code></pre>
<h2 id="切换国内源"><a href="#切换国内源" class="headerlink" title="切换国内源"></a>切换国内源</h2><h3 id="查看自己的版本类型"><a href="#查看自己的版本类型" class="headerlink" title="查看自己的版本类型"></a>查看自己的版本类型</h3><pre><code>    pi@raspberrypi:~$ lsb_release -a
    No LSB modules are available.
    Distributor ID: Raspbian
    Description:    Raspbian GNU/Linux 9.4 (stretch)
    Release:        9.4
    Codename:       stretch</code></pre>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>需要修改的地方有两处</p>
<pre><code>    /etc/apt/sources.list
    /etc/apt/sources.list.d/raspi.list</code></pre>
<p>/etc/apt/sources.list</p>
<pre class=" language-shell"><code class="language-shell">#deb http://raspbian.raspberrypi.org/raspbian/ stretch main contrib non-free rpi
# Uncomment line below then 'apt-get update' to enable 'apt-get source'
#deb-src http://raspbian.raspberrypi.org/raspbian/ stretch main contrib non-freee rpi
deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ stretch main contrib non-free rpi</code></pre>
<p>/etc/apt/sources.list.d/raspi.list</p>
<pre class=" language-shell"><code class="language-shell">#deb http://archive.raspberrypi.org/debian/ stretch main ui
# Uncomment line below then 'apt-get update' to enable 'apt-get source'
#deb-src http://archive.raspberrypi.org/debian/ stretch main ui
deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui
deb-src http://mirrors.ustc.edu.cn/archive.raspberrypi.org/ stretch main ui</code></pre>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><pre><code>  sudo apt-get update
  sudo apt-get upgrade</code></pre>
<h2 id="samba"><a href="#samba" class="headerlink" title="samba"></a>samba</h2><hr>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>sudo apt-get install samba</code></pre>
<p>过程日志</p>
<pre class=" language-shell"><code class="language-shell">pi@raspberrypi:~$ sudo apt-get install samba
Reading package lists... Done
Building dependency tree
Reading state information... Done
The following additional packages will be installed:
  attr libaio1 libfile-copy-recursive-perl python-dnspython python-ldb
  python-samba python-tdb samba-common-bin samba-dsdb-modules
  samba-vfs-modules tdb-tools update-inetd
Suggested packages:
  python-gpgme bind9 bind9utils ctdb ldb-tools ntp | chrony smbldap-tools
  winbind ufw heimdal-clients
The following NEW packages will be installed:
  attr libaio1 libfile-copy-recursive-perl python-dnspython python-ldb
  python-samba python-tdb samba samba-common-bin samba-dsdb-modules
  samba-vfs-modules tdb-tools update-inetd
0 upgraded, 13 newly installed, 0 to remove and 0 not upgraded.
Need to get 3,208 kB/3,473 kB of archives.
After this operation, 23.7 MB of additional disk space will be used.
Do you want to continue? [Y/n]
Get:1 http://mirrors.ustc.edu.cn/raspbian/raspbian stretch/main armhf python-samba armhf 2:4.5.12+dfsg-2+deb9u3 [1,143 kB]
Get:2 http://mirrors.ustc.edu.cn/raspbian/raspbian stretch/main armhf samba-common-bin armhf 2:4.5.12+dfsg-2+deb9u3 [556 kB]
Get:3 http://mirrors.ustc.edu.cn/raspbian/raspbian stretch/main armhf samba armhf 2:4.5.12+dfsg-2+deb9u3 [871 kB]
Get:4 http://mirrors.ustc.edu.cn/raspbian/raspbian stretch/main armhf samba-dsdb-modules armhf 2:4.5.12+dfsg-2+deb9u3 [304 kB]
Get:5 http://mirrors.ustc.edu.cn/raspbian/raspbian stretch/main armhf samba-vfs-modules armhf 2:4.5.12+dfsg-2+deb9u3 [334 kB]
Fetched 3,208 kB in 8s (383 kB/s)
Preconfiguring packages ...
Selecting previously unselected package python-dnspython.
(Reading database ... 126437 files and directories currently installed.)
Preparing to unpack .../00-python-dnspython_1.15.0-1_all.deb ...
Unpacking python-dnspython (1.15.0-1) ...
Selecting previously unselected package python-ldb.
Preparing to unpack .../01-python-ldb_2%3a1.1.27-1_armhf.deb ...
Unpacking python-ldb (2:1.1.27-1) ...
Selecting previously unselected package python-tdb.
Preparing to unpack .../02-python-tdb_1.3.11-2_armhf.deb ...
Unpacking python-tdb (1.3.11-2) ...
Selecting previously unselected package python-samba.
Preparing to unpack .../03-python-samba_2%3a4.5.12+dfsg-2+deb9u3_armhf.deb ...
Unpacking python-samba (2:4.5.12+dfsg-2+deb9u3) ...
Selecting previously unselected package samba-common-bin.
Preparing to unpack .../04-samba-common-bin_2%3a4.5.12+dfsg-2+deb9u3_armhf.deb ...
Unpacking samba-common-bin (2:4.5.12+dfsg-2+deb9u3) ...
Selecting previously unselected package tdb-tools.
Preparing to unpack .../05-tdb-tools_1.3.11-2_armhf.deb ...
Unpacking tdb-tools (1.3.11-2) ...
Selecting previously unselected package libfile-copy-recursive-perl.
Preparing to unpack .../06-libfile-copy-recursive-perl_0.38-1_all.deb ...
Unpacking libfile-copy-recursive-perl (0.38-1) ...
Selecting previously unselected package update-inetd.
Preparing to unpack .../07-update-inetd_4.44_all.deb ...
Unpacking update-inetd (4.44) ...
Selecting previously unselected package samba.
Preparing to unpack .../08-samba_2%3a4.5.12+dfsg-2+deb9u3_armhf.deb ...
Unpacking samba (2:4.5.12+dfsg-2+deb9u3) ...
Selecting previously unselected package attr.
Preparing to unpack .../09-attr_1%3a2.4.47-2_armhf.deb ...
Unpacking attr (1:2.4.47-2) ...
Selecting previously unselected package libaio1:armhf.
Preparing to unpack .../10-libaio1_0.3.110-3_armhf.deb ...
Unpacking libaio1:armhf (0.3.110-3) ...
Selecting previously unselected package samba-dsdb-modules.
Preparing to unpack .../11-samba-dsdb-modules_2%3a4.5.12+dfsg-2+deb9u3_armhf.deb ...
Unpacking samba-dsdb-modules (2:4.5.12+dfsg-2+deb9u3) ...
Selecting previously unselected package samba-vfs-modules.
Preparing to unpack .../12-samba-vfs-modules_2%3a4.5.12+dfsg-2+deb9u3_armhf.deb ...
Unpacking samba-vfs-modules (2:4.5.12+dfsg-2+deb9u3) ...
Setting up python-dnspython (1.15.0-1) ...
Setting up python-tdb (1.3.11-2) ...
Processing triggers for libc-bin (2.24-11+deb9u3) ...
Setting up libaio1:armhf (0.3.110-3) ...
Processing triggers for systemd (232-25+deb9u4) ...
Setting up tdb-tools (1.3.11-2) ...
update-alternatives: using /usr/bin/tdbbackup.tdbtools to provide /usr/bin/tdbbackup (tdbbackup) in auto mode
Processing triggers for man-db (2.7.6.1-2) ...
Setting up samba-dsdb-modules (2:4.5.12+dfsg-2+deb9u3) ...
Setting up attr (1:2.4.47-2) ...
Setting up libfile-copy-recursive-perl (0.38-1) ...
Setting up python-ldb (2:1.1.27-1) ...
Setting up update-inetd (4.44) ...
Setting up samba-vfs-modules (2:4.5.12+dfsg-2+deb9u3) ...
Setting up python-samba (2:4.5.12+dfsg-2+deb9u3) ...
Setting up samba-common-bin (2:4.5.12+dfsg-2+deb9u3) ...
Setting up samba (2:4.5.12+dfsg-2+deb9u3) ...
Adding group `sambashare' (GID 116) ...
Done.
Samba is not being run as an AD Domain Controller, masking samba-ad-dc-service.
Please ignore the following error about deb-systemd-helper not finding samba-ad-dc-service.
Created symlink /etc/systemd/system/multi-user.target.wants/nmbd.service → /lib/systemd/system/nmbd.service.
Failed to preset unit: Unit file /etc/systemd/system/samba-ad-dc.service is masked.
/usr/bin/deb-systemd-helper: error: systemctl preset failed on samba-ad-dc.service: No such file or directory
Created symlink /etc/systemd/system/multi-user.target.wants/smbd.service → /lib/systemd/system/smbd.service.
Processing triggers for libc-bin (2.24-11+deb9u3) ...
Processing triggers for systemd (232-25+deb9u4) ...
pi@raspberrypi:~$</code></pre>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code>sudo vim /etc/samba/smb.conf</code></pre>
<p>在最后面添加以下内容</p>
<pre><code>[public]
   comment = public storage
   path = /home/pi/workdir
   valid users = pi
   read only = no
   create mask = 0777
   directory mask = 0777
   guest ok = no
   browseable = yes</code></pre>
<p>参数说明：</p>
<ul>
<li>comment：共享文件夹说明</li>
<li>path：共享文件夹目录</li>
<li>valid users：有效用户</li>
<li>read only：是否只读</li>
<li>create mask：创建文件的权限</li>
<li>directory mask：创建文件夹的权限</li>
<li>guest ok：是否允许访客访问</li>
<li>browseable：是否可见</li>
</ul>
<p>其中 <code>valid users</code> 即 <code>pi</code> 为有效用户，还需要添加其到 Samba 中，命令行执行：</p>
<pre><code>sudo smbpasswd -a pi</code></pre>
<p>重启 samba 以生效配置，命令行执行：</p>
<pre><code>sudo samba restart</code></pre>
<blockquote>
<p>注：Samba 默认开机自启，无需为重启担心。</p>
</blockquote>
<p>设置文件权限<br>在 Samba 配置文件设置权限后，还需在系统中将共享文件夹的权限设置为同配置文件中相同的权限，以确保其他用户正常访问及修改文件夹内容，命令行执行：</p>
<pre><code>sudo chmod -R 777 /mnt/udisk</code></pre>
<h3 id="其他指令设置"><a href="#其他指令设置" class="headerlink" title="其他指令设置"></a>其他指令设置</h3><pre class=" language-sh"><code class="language-sh">pdbedit –a username：新建Samba账户。
pdbedit –x username：删除Samba账户。
pdbedit –L：列出Samba用户列表，读取passdb.tdb数据库文件。
pdbedit –Lv：列出Samba用户列表的详细信息。
pdbedit –c “[D]” –u username：暂停该Samba用户的账号。
pdbedit –c “[]” –u username：恢复该Samba用户的账号。
# 启动服务 
/etc/init.d/smb start
/etc/init.d/smb start
# 开机自启动
chkconfig  smb on
chkconfig nmb on
# 查看开启的端口
netstat -nlutp |grep mbd</code></pre>
<h3 id="访问共享文件"><a href="#访问共享文件" class="headerlink" title="访问共享文件"></a>访问共享文件</h3><p><strong>Windows：</strong><br>在资源管理器地址栏输入：<code>\\\\192.168.1.37\\public</code>，其中 <code>192.168.1.37</code> 替换为你树莓派的 IP 地址即可。</p>
<p><strong>macOS：</strong><br>打开 <code>FInder</code>，之后使用快捷键 <code>cmd+k</code>，服务器地址中填写<code>smb://192.168.1.37/public</code>，其中 <code>192.168.1.37</code> 替换为你树莓派的 IP 地址，之后点击连接即可。</p>
<h2 id="外设相关"><a href="#外设相关" class="headerlink" title="外设相关"></a>外设相关</h2><h3 id="GPIO映射"><a href="#GPIO映射" class="headerlink" title="GPIO映射"></a>GPIO映射</h3><p><img src="/images/pi_gpio.png" alt="GPIO"></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>raspberry</tag>
      </tags>
  </entry>
</search>
